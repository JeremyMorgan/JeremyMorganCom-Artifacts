<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jeremy's Programming Blog]]></title>
  <link href="https://www.jeremymorgan.com/atom.xml" rel="self"/>
  <link href="https://www.jeremymorgan.com/"/>
  <updated>2015-05-30T12:51:07-07:00</updated>
  <id>https://www.jeremymorgan.com/</id>
  <author>
    <name><![CDATA[Jeremy Morgan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Brief Introduction to REST]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/intro-restful-web-services/"/>
    <updated>2015-05-21T21:25:00-07:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/brief-introduction-to-rest</id>
    <content type="html"><![CDATA[<p>Perhaps you&#8217;ve seen the term REST being thrown around lately and have been a little curious what it&#8217;s all about. If that&#8217;s the case, or you know a little about it but never used it, this article is for you. Today I&#8217;m going to give a small overview of what REST services are, and why it&#8217;s awesome.</p>

<h2>So long RPC, hello REST</h2>

<p>If you&#8217;ve been in the web game a while, you may remember when RPC took over the web about 10 years ago. I myself remember it being one of the most exciting things of it&#8217;s time. Although the pattern has been around since the 80s it started popping up on the web in the early 2000s, and for it&#8217;s time RPC was a great solution. In fact it&#8217;s still in use all over the place.</p>

<p>RPC stands for Remote Procedure Call, and it is a way to execute a method on a separate address space such as a server, and consume the output if needed. Here&#8217;s a rough diagram of what that looks like:</p>

<p><img src="https://www.jeremymorgan.com/images/rest-services/intro-rest-services-1.jpg" title="&#34;Intro to REST Services&#34;" alt="&#34;Intro to REST Services&#34;"></p>

<p>As you can see the web server at www.yoursite.com submits and retrieves information from other servers, and uses that data to assemble a web page. RPC calls can provide services for just about anything, from messaging protocols, to stock quotes, weather reports, etc. WordPress uses it extensively for pinging other blogs and a multitude of communication services.</p>

<h3>XML RPC and SOAP</h3>

<p>There are generally two ways to perform RPC calls, with XML and SOAP. There are advantages to each, but back when I was building a lot of this stuff I preferred the XML-RPC methods which was an RPC call made to a server that returned XML. It&#8217;s very simple and straightforward, and didn&#8217;t require a lot of ceremony.</p>

<p><a href="http://tldp.org/HOWTO/XML-RPC-HOWTO/xmlrpc-howto-intro.html">How XML-RPC Works</a></p>

<p>SOAP (Simple Object Access Protocol) also uses XML for messaging, but provides an extensible and powerful messaging system. It requires a bit more work in exchange for more powerful features.</p>

<p><a href="https://msdn.microsoft.com/en-us/library/ms995800.aspx">How SOAP-RPC works</a></p>

<p>Neither of these systems were inherently bad and provided great solutions for the time. It&#8217;s still prevalent all over the web and doing well. In 2008 Leonard Richardson introduced a model that&#8217;s much more useful today.</p>

<p>If you want a more detailed explanation, check out this <a href="https://technet.microsoft.com/en-us/library/cc738291(v=ws.10).aspx" target="_new">Microsoft TechNet article on RPC.</a></p>

<h2>Key REST Principles</h2>

<p>In short, Rest is a set of principles to be adhered to when communicating from point to point. Here are some of those guidelines</p>

<ul>
<li>Deals with objects (resources) that have IDs</li>
<li>Links servers together</li>
<li>Provides an interface between spaces</li>
<li>Uses standard methods</li>
<li>is stateless</li>
</ul>


<p>These are some of the basic things that a make a service RESTful in nature. One of the important principles is that they are to be objects with an ID. These IDs will used in a URI to identify which resource we&#8217;re reading or modifying.</p>

<blockquote><p>http://www.yoursite.com/api/products/1234</p></blockquote>

<p>Next we&#8217;ll look at the model for determining if an API is &#8220;RESTful&#8221; and what level it conforms to.</p>

<h2>REST Maturity Model</h2>

<p>Richardson created the REST Maturity model which specifies whether an API is &#8220;fully RESTful&#8221;. Most are not, and don&#8217;t necessarily have to be. But here is a rundown:</p>

<h3>Level 0 - XML-RPC / SOAP</h3>

<ul>
<li>One URI</li>
<li>One HTTP Method</li>
</ul>


<p>Level 0 is a very basic model where you simply sent an RPI (Remote Procedure Invocation) at a web site and it returns some data. It can be in XML, JSON, or any format with key-value pairs.</p>

<h3>Level 1 - Add URIs</h3>

<ul>
<li>Many URIs / Resources</li>
<li>One HTTP Method</li>
</ul>


<p>Level 1 is similar except now there are multiple resources in use:</p>

<blockquote><p>http://www.yoursite.com/api/products/1234</p>

<p>http://www.yoursite.com/api/customers/0037</p></blockquote>

<h3>Level 2 - Add HTTP</h3>

<ul>
<li>Many URIs/Resources</li>
<li>Use of HTTP Verbs</li>
</ul>


<p>In level 2 we add HTTP verbs: GET,POST,PUT,DELETE. There are others, but these four I will describe later.</p>

<h3>Level 3 - Add HATEOAS</h3>

<ul>
<li>Many URIs/Resources</li>
<li>Use of HTTP verbs</li>
<li>Hypermedia</li>
</ul>


<p>In this level we add HATEOAS: Hypertext As The Engine Of Application State. This is how we send objects, but also some instructions in the reply describing what we can do next. For example, it may return something like this:</p>

<pre><code>&lt;?xml version="1.0"?&gt;
&lt;account&gt;
   &lt;account_number&gt;12345&lt;/account_number&gt;
   &lt;balance currency="usd"&gt;100.00&lt;/balance&gt;
   &lt;link rel="deposit" href="https://www.jeremymorgan.com/account/12345/deposit" /&gt;
   &lt;link rel="withdraw" href="https://www.jeremymorgan.com/account/12345/withdraw" /&gt; 
   &lt;link rel="transfer" href="https://www.jeremymorgan.com/account/12345/transfer" /&gt;
   &lt;link rel="close" href="https://www.jeremymorgan.com/account/12345/close" /&gt;
 &lt;/account&gt;
</code></pre>

<p>(from Wikipedia)</p>

<p>These hypermedia controls mean the REST client does not need to know how to use the service and instead can be guided by the responses. This is what is considered a &#8220;fully RESTful&#8221; service.</p>

<h2>HTTP Verbs</h2>

<p>The HTTP verbs are a standard interface for communicating via a REST service. There is &#8220;createobject&#8221; verb, or &#8220;modifyobject&#8221; so these actions are completed with a set of verbs:</p>

<ul>
<li>GET</li>
<li>POST</li>
<li>PUT</li>
<li>DELETE</li>
</ul>


<p>I&#8217;ll try to explain these in the simplest way possible. Here we are working with &#8220;resources&#8221; that are similar to records in SQL (or may directly correlate with a record).</p>

<p><strong>GET</strong> - This retrieves a list of resources, and does not modify them. Equivalent to an SQL SELECT</p>

<p><strong>POST</strong> - Generally used to create a new resource. Equivalent to an SQL INSERT</p>

<p><strong>PUT</strong> - Replaces a resource with updated information. Equivalent to an SQL UPDATE</p>

<p><strong>DELETE</strong> - Removes a resource. Equivalent to an SQL DELETE</p>

<p>All of this is done through HTTP. There are more HTTP Verbs in use, but I mention these as they are the most commonly used for REST. In fact, some engineers only use GET and POST for all operations. Theoretically you can do everything with GET if you overload requests in the URIs, but generally it&#8217;s good practice to use these verbs for your actions.</p>

<h3>Everything needs an ID</h3>

<p>All of these resources need to have an ID. This is especially true with PUT and DELETE as we need to know which resources to modify behind the scenes. The ID is generally passed in the URI:</p>

<blockquote><p>http://www.yoursite.com/api/customers/0037</p></blockquote>

<p>If we send a PUT to this URI, it will update the customer resource with an ID of 0037. If we send a DELETE to this URI, it will remove it.</p>

<h3>Verbs that must be Idempotent</h3>

<p>In theory the GET, PUT, and DELETE verbs should be idempotent, meaning you can call them over an over without any additional side effect. For example, you should be able to send a delete to a URI over and over without breaking the system. Even if the resource has been deleted you should send back a code, but not throw an exception or crash.</p>

<p>Often times when designing REST interfaces, I will send a 200(OK) when a resource is deleted. Then on subsequent deletes I will send a 204 or 404 so the caller knows the resource is no longer present. I don&#8217;t do this with a PUT, however. Even if the caller sends a PUT with the same information over and over they&#8217;ll get the same response because I&#8217;m not going to be checking if the data submitted is actually different. Instead I&#8217;ll just blindly update the resource with whatever information is sent. We don&#8217;t really care if the data is truly different and don&#8217;t want to waste cycles checking for it unless we are doing some form of auditing.</p>

<h2>REST API Example</h2>

<p>Here&#8217;s an example of a simple REST API using the information we&#8217;ve learned about above. We want to create an API to modify our customer information.</p>

<p><img src="https://www.jeremymorgan.com/images/rest-services/intro-rest-services-2.png" title="&#34;Intro to REST Services&#34;" alt="&#34;Intro to REST Services&#34;"></p>

<p>As you can see sometimes the URI is the same but the verb being sent is different. This is crucial to know when building your application, because getting your verbs mixed up can give unexpected results. You may intend to update a resource and instead delete it.</p>

<h3>Communication between endpoints</h3>

<p>There are several ways you can communicate over REST and there is no right answer. The most common ways are XML and JSON. Here is a light comparison between the two.</p>

<p><strong>XML:</strong></p>

<p>Pros:</p>

<ul>
<li>Generalized markup, so you can create multiple formats and styles for custom purposes.</li>
<li>You can define Schema for custom datatypes and perform structure validation.</li>
<li>can use XPATH to extract information much easier than JSON</li>
</ul>


<p>Cons:</p>

<ul>
<li>Much more verbose than JSON, more data is being transferred and can be slower</li>
</ul>


<p><strong>JSON</strong></p>

<p>Pros:</p>

<ul>
<li>Easy integration with JavaScript (which is commonly used to interface with REST services)</li>
<li>Simple, easy to understand syntax</li>
<li>Less overhead, smaller sizes and better performance</li>
</ul>


<p>Cons:</p>

<ul>
<li>Less powerful and flexible, especially with different data types</li>
</ul>


<h2>Summary</h2>

<p>I hope this has provided a good overview of what REST services are and how they&#8217;re structured. The trends in web technology have moved away from the common middleware web services that generate HTML for browsers and today people access the web from a variety of different devices, including phones, tablets and watches. REST is well suited for this as it gives a common interface to your data, giving you the freedom to use that data on a variety of platforms.</p>

<p>The same REST service can power a web page, mobile application or anything you can imagine. You can have synchronization between a web page and mobile device (think of Spotify) with ease. REST is the future of the web and something you should be using for your next project, if you aren&#8217;t already.</p>

<p>I&#8217;d like to give a shout out to <a href="https://www.getpostman.com/" target="_blank">POSTman</a> which is an awesome interface for testing REST services. You can use it while designing your REST backend or your front end application. It&#8217;s indispensable.</p>

<br />


<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://www.feedblitz.com/f?sub=339769"><strong>get the programmer newsletter</strong></a> 100% spam free!
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to install ASP.Net 5 on Ubuntu Linux]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/how-to-asp-5-linux/"/>
    <updated>2015-04-10T07:50:00-07:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/how-to-install-asp-dot-net-5-with-docker</id>
    <content type="html"><![CDATA[<p>One of the primary goals of the ASP.Net 5 (codenamed vNext) project is cross platform development, and it&#8217;s become easier than ever to develop ASP.Net applications on Linux and OSX. Today we&#8217;re going to take a look at how to do this with Ubuntu Linux server.</p>

<h3>1. Get Your System Ready</h3>

<p>Let&#8217;s get our system started. For this tutorial I&#8217;m using a Digital Ocean droplet. These are only $5 per month, and <a href="https://www.digitalocean.com/?refcode=ca6f81fa42b4" target="_new">if you click this link to sign up</a> you&#8217;ll get a $10 credit.</p>

<p>I installed a blank Ubuntu 14.04 64 bit server. First, run the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update&&sudo apt-get dist-upgrade</span></code></pre></td></tr></table></div></figure>


<p>This will make sure we have the newest package lists and upgrade packages if they are available.</p>

<p>Next we&#8217;ll need to install Mono. The current stable version for Ubuntu is 3.2.8, which won&#8217;t run ASP.Net, so we will have to pull it directly from the Mono repositories:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
</span><span class='line'>echo "deb http://download.mono-project.com/repo/debian wheezy main" | sudo tee /etc/apt/sources.list.d/mono-xamarin.list
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install mono-complete</span></code></pre></td></tr></table></div></figure>


<p>To make sure it installed correctly, type in</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mono -V</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.jeremymorgan.com/images/asp-5-linux/how-to-asp-5-linux-1.jpg" title="how to install ASP.Net 5 on Docker" ></p>

<p>Next, we&#8217;ll install some prerequisites that we&#8217;ll need to fetch and build some items from source:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install -y autoconf build-essential git-core libtool unzip curl</span></code></pre></td></tr></table></div></figure>


<p>Also, to run web services we&#8217;ll need to install libuv. We&#8217;ll have to build it from source and link it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /opt
</span><span class='line'>sudo git clone https://github.com/libuv/libuv.git
</span><span class='line'>cd libuv
</span><span class='line'>sudo ./autogen.sh
</span><span class='line'>sudo ./configure
</span><span class='line'>sudo make
</span><span class='line'>sudo make install
</span><span class='line'>sudo ln -s /usr/local/lib/libuv.so /usr/lib/libuv.so.1</span></code></pre></td></tr></table></div></figure>


<p>Now our system should be ready for ASP.Net 5.</p>

<h3>2. Set up ASP.Net 5</h3>

<p>Now that we&#8217;ve got that set up, let&#8217;s put ASP.Net 5 on here. First we&#8217;ll install KVM:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -sSL https://raw.githubusercontent.com/aspnet/Home/master/kvminstall.sh | sh && source ~/.k/kvm/kvm.sh</span></code></pre></td></tr></table></div></figure>


<p><b>Note:</b> if you want to go real bleeding edge, you can install DNVM instead, shich is the replacement for KVM:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -sSL https://raw.githubusercontent.com/aspnet/Home/dev/dnvminstall.sh | DNX_BRANCH=dev sh && source ~/.dnx/dnvm/dnvm.sh</span></code></pre></td></tr></table></div></figure>


<p>Now, let&#8217;s install DNX (the .Net execution environment)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kvm upgrade</span></code></pre></td></tr></table></div></figure>


<p>If you downloaded DNVM above instead, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dnvm upgrade</span></code></pre></td></tr></table></div></figure>


<h3>3. Clone an ASP.Net Sample</h3>

<p>Now we&#8217;ll clone the sample repositories:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir ~/aspnet
</span><span class='line'>cd ~/aspnet
</span><span class='line'>git clone https://github.com/aspnet/Home.git
</span><span class='line'>cd ~/aspnet/Home/samples/HelloMvc</span></code></pre></td></tr></table></div></figure>


<p>This is the sample we&#8217;ll choose to build. Type in the following to build the packages for it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kpm restore</span></code></pre></td></tr></table></div></figure>


<p>Now we can start it up:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>k kestrel</span></code></pre></td></tr></table></div></figure>


<p>You should see a screen that looks like this:</p>

<p><img src="https://www.jeremymorgan.com/images/asp-5-linux/how-to-asp-5-linux-2.jpg" title="how to install ASP.Net 5 on Docker" ></p>

<p>Congrats! You now have ASP.Net 5 running on Ubuntu Linux!</p>

<p>If you would like to run this as a background process, type in</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nohup k kestrel &</span></code></pre></td></tr></table></div></figure>


<p>Note that this should not yet be used for production servers!</p>

<h3>Conclusion</h3>

<p>I have found several articles online about how to do this, but many of them seemed innaccurate, missing peices or out of date. This is common with bleeding edge stuff. I&#8217;ll try to update this as much as possible.</p>

<p>This is a good way to set up cheap instances of ASP.Net for your projects. At only $5 a month you could have several application servers running for your project for very little. As I stated before you can <a href="https://www.digitalocean.com/?refcode=ca6f81fa42b4" target="_new">get a $10 credit from Digital Ocean by using this link</a> to sign up, or you can use some of the other low cost Linux hosts out there to set up some low cost, fast ASP.Net 5 servers.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Graph Tags Are Terribly Important]]></title>
    <link href="https://www.jeremymorgan.com/blog/seo/open-graph-tags-for-seo/"/>
    <updated>2015-03-21T22:19:00-07:00</updated>
    <id>https://www.jeremymorgan.com/blog/seo/open-graph-tags-are-terribly-important</id>
    <content type="html"><![CDATA[<p>Today I want to talk about something that&#8217;s pretty important for your blog, even if it&#8217;s a tech blog. It&#8217;s Open Graph tags, and it&#8217;s a fairly easy way to get more people to your site, and get it noticed. I haven&#8217;t done an SEO or Marketing type article on this site in two years, but I think this is pretty fitting for anyone working on websites. Is your company doing this? They should be.</p>

<!-- more -->


<h3>What are Open Graph Tags?</h3>

<p>The <a href="http://ogp.me/">Open Graph Protocol</a> was originally developed for representation on social sites. There has been a lot of shuffling around standards, but for the most part you can easily set up something that will work well with 3 major social media sites:</p>

<ul>
<li>Facebook (<a href="https://developers.facebook.com/docs/sharing/opengraph" target="_blank">Get Info</a>)</li>
<li>Google+ (<a href="https://developers.google.com/+/web/snippet/" target="_blank">Get Info</a>)</li>
<li>Twitter (<a href="https://dev.twitter.com/cards/getting-started" target="_blank">Get Info</a>)</li>
</ul>


<p>There are many uses with these tags when it comes to applications and mobile use, but we&#8217;re going to focus on another benefit: making your links on these sites more informative. Here is the basic information needed:</p>

<ul>
<li>Title (usually the title tag of your page)</li>
<li>Image (This is what will display in your link)</li>
<li>Description (This is a description)</li>
</ul>


<p>This is what I would consider the bare minimum for a decent webpage. Here is what one of my links looks like from this site:</p>

<p><img src="https://www.jeremymorgan.com/images/seo/open-graph-seo-1.jpg" title="Open Graph Tags for SEO" alt="Open Graph Tags for SEO"></p>

<p>Chances are you&#8217;ve seen tons of these types of links and thought nothing of it. Facebook and Google both try to make a best effort to find a large image, your title and description on it&#8217;s own. Most of the time it&#8217;s ok, even the space jam site has something showing up and it hasn&#8217;t been updated since the 90s.</p>

<p><img src="https://www.jeremymorgan.com/images/seo/open-graph-seo-4.jpg" title="Open Graph Tags for SEO" alt="Open Graph Tags for SEO"></p>

<p>But you&#8217;ve also probably seen ones like this:</p>

<p><img src="https://www.jeremymorgan.com/images/seo/open-graph-seo-3.jpg" title="Open Graph Tags for SEO" alt="Open Graph Tags for SEO"></p>

<p>This is what happens when there is no Open Graph data and the site can&#8217;t be crawled properly. It makes for an unattractive link with little or no information. Not just on Facebook, but all the major social media sites.</p>

<blockquote><p>The Open Graph tags are essential to getting you more clicks, and more shares. Your site needs them. Period.</p></blockquote>

<p>Even if your site isn&#8217;t one that gets shared socially much it still provides a more professional appearance. Not to mention sites like LinkedIn are now using them as well.</p>

<h3>Implementing Open Graph Tags</h3>

<p>There are a myriad of ways to implement these, depending on your CMS. WordPress has several plugins and other ways to get them into your pages. Any CMS should be able to implement them because they&#8217;re only meta tags. How smoothly you can get the data to dynamically populate it might be trickier. Since that&#8217;s out of the scope of this article instead I&#8217;ll show you what tags you should have on all your pages:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;meta</span> <span class="na">itemprop=</span><span class="s">&quot;name&quot;</span> <span class="na">content=</span><span class="s">&quot;[ TITLE ]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">itemprop=</span><span class="s">&quot;image&quot;</span> <span class="na">content=</span><span class="s">&quot;[ LISTING IMAGE ]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">itemprop=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;[ ARTICLE DESCRIPTION ]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;[ ARTICLE DESCRIPTION ]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">content=</span><span class="s">&quot;[ AUTHOR FULL NAME ]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">&quot;article:author&quot;</span> <span class="na">content=</span><span class="s">&quot;[ GOOGLE+ AUTHOR URL ]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">&quot;article:published_time&quot;</span> <span class="na">content=</span><span class="s">&quot;[ PUBLISHED TIMESTAMP ]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">&quot;article:section&quot;</span> <span class="na">content=</span><span class="s">&quot;[ CATEGORY ]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">&quot;og:title&quot;</span> <span class="na">content=</span><span class="s">&quot;[ TITLE ]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">&quot;og:type&quot;</span> <span class="na">content=</span><span class="s">&quot;article&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">&quot;og:description&quot;</span> <span class="na">content=</span><span class="s">&quot;[ ARTICLE DESCRIPTION ]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">&quot;og:image&quot;</span> <span class="na">content=</span><span class="s">&quot;[ LISTING IMAGE ]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">&quot;og:url&quot;</span> <span class="na">content=</span><span class="s">&quot;[ CANONICAL URL OF ITEM ]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">&quot;og:site_name&quot;</span> <span class="na">content=</span><span class="s">&quot;[ WEBSITE NAME ]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;twitter:card&quot;</span> <span class="na">content=</span><span class="s">&quot;summary&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;twitter:title&quot;</span> <span class="na">content=</span><span class="s">&quot;[ TITLE ]&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;twitter:description&quot;</span> <span class="na">content=</span><span class="s">&quot;[ ARTICLE DESCRIPTION ]&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;twitter:image&quot;</span> <span class="na">content=</span><span class="s">&quot;[ LISTING IMAGE ]&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;twitter:url&quot;</span> <span class="na">content=</span><span class="s">&quot;[ CANONICAL URL OF ITEM ]&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>These are the tags I have implemented on my site. You may notice this violates DRY (Don&#8217;t Repeat Yourself) but the reason we repeat the information is because each service has their own name for the tags. These tags cover what&#8217;s needed for great presentation on Facebook, Google+, Twitter and LinkedIn.</p>

<p>If you can edit HTML in your CMS and put in dynamic values this should be fairly easy. In Octopress (what I use for this site) it only took a few minutes to implement. If you have a self built CMS I would highly reccomend putting it in.</p>

<h3>Summary</h3>

<p>Open Graph tags are definitely a &#8220;quick win&#8221;. They&#8217;re quickly implemented with a large benefit. Your links when posted on social media will be more attractive and professional. People will be much more likely to share the link because it will look good on their timeline.</p>

<p>It&#8217;s not something programmers generally think about, but it could give your blog a great boost, or get some extra traffic and customers for your company, for a small investment.</p>

<br />


<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://www.feedblitz.com/f?sub=339769"><strong>get the programmer newsletter</strong></a> 100% spam free!
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Blink an LED on a Raspberry Pi 2]]></title>
    <link href="https://www.jeremymorgan.com/tutorials/raspberry-pi/how-to-blink-led-raspberry-pi-2/"/>
    <updated>2015-03-17T18:55:00-07:00</updated>
    <id>https://www.jeremymorgan.com/tutorials/raspberry-pi/blink-an-led-on-a-raspberry-pi-2-with-python</id>
    <content type="html"><![CDATA[<p>The blinking LED is the &#8220;hello world&#8221; of the maker community, and today I&#8217;ll show you how easy it is to do with the Raspberry Pi 2 (or Model B)! We&#8217;re going to use Python and WiringPi for this project.</p>

<!-- more -->


<h3>What you&#8217;ll need</h3>

<p>For this article I&#8217;m using a Raspberry Pi 2, but you can also use a Raspberry Pi Model B. You will also need:</p>

<p><img class="right" src="https://www.jeremymorgan.com/images/blink-led-rpi-2-python/raspberry-pi-2-blink-led-1.jpg" title="&#34;Blink an LED Raspberry Pi 2&#34;" alt="&#34;Blink an LED Raspberry Pi 2&#34;"></p>

<ul>
<li>A GPIO Adapter</li>
<li>Breadboard</li>
<li>Resistor</li>
<li>LED</li>
</ul>


<p>What I am using for this project is highly recommended the <a href="http://www.amazon.com/gp/offer-listing/B008XVAVAW/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B008XVAVAW&linkCode=am2&tag=webfootcentra-20&linkId=VF3GTBAGOAKMKG2S" target="_new">Canakit for Raspberry Pi</a> which contains everything in the list above. (This is an Amazon affiliate link).</p>

<p>Any decent breadboard or even a set of jumpers will work for this project.</p>

<h2>How to Blink an LED with Python</h2>

<p>The quickest way to get that LED to blink is to take a look at the <a href="http://pi.gadgetoid.com/pinout" target="_new">pins of the GPIO</a> and decide which one to tie to. Then you can use Python and the <a href="https://pypi.python.org/pypi/RPi.GPIO" target="_blank" rel="nofollow">Raspberry Pi GPIO Library</a> to create a script to light it up.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">RPi.GPIO</span> <span class="kn">as</span> <span class="nn">GPIO</span>             <span class="c">## Import GPIO Library</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>                         <span class="c">## Import &#39;time&#39; library (for &#39;sleep&#39;)</span>
</span><span class='line'>
</span><span class='line'><span class="n">blue</span> <span class="o">=</span> <span class="mi">7</span>                            <span class="c">## These are our LEDs</span>
</span><span class='line'><span class="n">ourdelay</span> <span class="o">=</span> <span class="mi">1</span>                        <span class="c">## Delay</span>
</span><span class='line'><span class="c"># pins 4,17,18,21,22,23,24,25</span>
</span><span class='line'>
</span><span class='line'><span class="n">GPIO</span><span class="o">.</span><span class="n">setmode</span><span class="p">(</span><span class="n">GPIO</span><span class="o">.</span><span class="n">BOARD</span><span class="p">)</span>            <span class="c">## Use BOARD pin numbering</span>
</span><span class='line'><span class="n">GPIO</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span><span class="n">pin</span><span class="p">,</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">OUT</span><span class="p">)</span>        <span class="c">## set output</span>
</span><span class='line'>
</span><span class='line'><span class="c">## function to save code</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">activateLED</span><span class="p">(</span> <span class="n">pin</span><span class="p">,</span> <span class="n">delay</span> <span class="p">):</span>
</span><span class='line'>  <span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="n">pin</span><span class="p">,</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">HIGH</span><span class="p">)</span>      <span class="c">## set HIGH (LED ON)</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">delay</span><span class="p">)</span>                <span class="c">## wait</span>
</span><span class='line'>  <span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="n">pin</span><span class="p">,</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">LOW</span><span class="p">)</span>       <span class="c">## set LOW (LED OFF)</span>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">activateLED</span><span class="p">(</span><span class="n">blue</span><span class="p">,</span><span class="n">ourdelay</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">GPIO</span><span class="o">.</span><span class="n">cleanup</span><span class="p">()</span>                      <span class="c">## close down library</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see in the code above, it doesn&#8217;t take much to get things working. But I&#8217;ll explain the code a little deeper.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">RPi.GPIO</span> <span class="kn">as</span> <span class="nn">GPIO</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following code imports the Python GPIO library, and the time library. The GPIO library, as you probably guessed is the library for interacting with the GPIO in Python. It does an amazing job of simplifying the process. The time library is there so we can put a delay in, otherwise the blink might be too fast to notice.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">blue</span> <span class="o">=</span> <span class="mi">7</span>
</span><span class='line'><span class="n">ourdelay</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I created a variable named &#8220;blue&#8221; (the color of the LED) and assigned it &#8220;7&#8221; which is the pin number we want. If I wanted to add multiple LEDs I could name it something like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">blue</span> <span class="o">=</span> <span class="mi">7</span>
</span><span class='line'><span class="n">red</span> <span class="o">=</span> <span class="mi">13</span>
</span><span class='line'><span class="n">green</span> <span class="mi">14</span>
</span></code></pre></td></tr></table></div></figure>


<p>I then created a &#8220;delay&#8221; variable of one second. This way I can change the delay of the lights blinking however I want.</p>

<p>You can name the variables anything you want, but this was just to make it easy to see which LED is which if I wanted to do some fancy light show.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">GPIO</span><span class="o">.</span><span class="n">setmode</span><span class="p">(</span><span class="n">GPIO</span><span class="o">.</span><span class="n">BOARD</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, we set the GPIO mode to &#8220;Board&#8221; which means we&#8217;ll use the numbering of the pin by board instead of GPIO. This makes it a little easier to understand when using a bread board.</p>

<p>With this line of code we set the pin to be an output:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">GPIO</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span><span class="n">pin</span><span class="p">,</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">OUT</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are 2 main commands to turn the LED on then off:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="n">pin</span><span class="p">,</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">HIGH</span><span class="p">)</span>
</span><span class='line'><span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="n">pin</span><span class="p">,</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">LOW</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you wanted to blink an LED twice you would have to repeat the last two lines each time. So I decided to put this in a function and put the pin and delay as parameters. This way making a particular LED blink is as simple as:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">activateLED</span><span class="p">(</span><span class="n">blue</span><span class="p">,</span><span class="n">ourdelay</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is repeatable and saves code when doing larger programs.</p>

<p>To close everything down, we need to run the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">GPIO</span><span class="o">.</span><span class="n">cleanup</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s that easy! You could easily write a nice Python script that do some pretty cool stuff with just a few lines of code.</p>

<h2>How to Blink an LED with WiringPi</h2>

<p>For this step we&#8217;ll install <a href="http://wiringpi.com/" target="_blank">WiringPi</a> for the libraries to interact with the GPIO. This allows us to do what we just did, but from the command line. We&#8217;ll need to install WiringPi:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/sources
</span><span class='line'>git clone git://git.drogon.net/wiringPi
</span><span class='line'>cd wiringPi
</span><span class='line'>git pull origin
</span><span class='line'>./build</span></code></pre></td></tr></table></div></figure>


<p>If successful you should see a screen like this:</p>

<p><img src="https://www.jeremymorgan.com/images/blink-led-rpi-2-python/raspberry-pi-2-blink-led-2.jpg" title="&#34;Blink an LED Raspberry Pi 2&#34;" alt="&#34;Blink an LED Raspberry Pi 2&#34;"></p>

<p>Now we can light up the LED from the command line. Remember the pin 7 in the example above? We can now light up like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gpio mode 7 out
</span><span class='line'>gpio mode 7 1</span></code></pre></td></tr></table></div></figure>


<p>This will light up the LED. You can turn it off by entering:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gpio mode 7 0</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.jeremymorgan.com/images/blink-led-rpi-2-python/raspberry-pi-2-blink-led-3.jpg" title="&#34;Blink an LED Raspberry Pi 2&#34;" alt="&#34;Blink an LED Raspberry Pi 2&#34;"></p>

<p>This makes it super easy to light up LEDs from the command line. You could create a pretty neat BASH script to do this, and do some neat things, or call this from other languages.</p>

<h2>Summary</h2>

<p>I hope this has helped in showing how easy it is to blink an LED on the Raspberry Pi 2/B. Of course as you progress on you&#8217;ll want to do far more than just blink an LED, but the GPIO libraries make it very easy to create some neat stuff. If you&#8217;ve experimented with this and done something cool, leave me a comment!!</p>

<p>Special Thanks to the folks in <a href="http://www.reddit.com/r/raspberry_pi/comments/30iiq7/for_beginners_how_to_blink_an_led_on_a_raspberry/" target="_new">this thread on Reddit</a> who helped with some corrections to this article.</p>

<br />


<div class="subscribefooter">
<h4>Do you like my Rasbperry Pi Tutorials? </h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff with the Raspberry Pi. If you want to get notified every time I post a new article <a href="http://feeds.feedburner.com/JeremyMorganRaspberryPi"><strong>subscribe to my Raspberry Pi feed</strong></a> here, or you can <a href="http://www.feedblitz.com/f?sub=883810"><strong>Sign up for the Raspberry Pi Newsletter</strong></a> spam free!  
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi 2 has arrived!]]></title>
    <link href="https://www.jeremymorgan.com/tutorials/raspberry-pi/raspberry-pi-2-has-arrived/"/>
    <updated>2015-03-01T00:01:00-08:00</updated>
    <id>https://www.jeremymorgan.com/tutorials/raspberry-pi/raspberry-pi-2-introduced</id>
    <content type="html"><![CDATA[<p>So my Raspberry Pi 2 has finally arrived, and I got to take a quick look at it. Pretty impressive so far, though I haven&#8217;t done much with it. If you don&#8217;t know what&#8217;s so great about the Raspberry Pi 2 I&#8217;ll give you a quick rundown by comparing it to the others.</p>

<!-- more -->


<p></p>

<h2>Original Raspberry Pi (Model A/A+)</h2>

<p>The original Model A Raspberry Pi models were pretty limited. They didn&#8217;t have an ethernet chip, and were mostly used for robotics and similar experiments due to their low weight and power usage.</p>

<p><img src="https://www.jeremymorgan.com/images/raspberry/raspberry-pi-model-a.jpg" alt="Raspberry Pi Model A" /></p>

<p>The model A+ had an Ethernet port at least, and this was the first model I used.
It has:</p>

<ul>
<li>Broadcom BCM2835</li>
<li>256MB SDRAM</li>
<li>SoC full HD</li>
<li>SDCard Port</li>
<li>2x USB Ports</li>
<li>26 Pin GPIO</li>
</ul>


<p>It wasn&#8217;t a bad machine at all, and well worth the price at the time. It was a pioneer of the pocket computers and I had a lot of fun with it.</p>

<h2>Raspberry Pi Model B+</h2>

<p><img src="https://www.jeremymorgan.com/images/raspberry/raspberry-pi-model-b.jpg" alt="Raspberry Pi Model B+" /></p>

<p>This was a vast improvement over the previous model. The biggest thing for me was:</p>

<ul>
<li>512MB SDRAM</li>
<li>4x USB Ports</li>
<li>MicroUSB Port</li>
<li>40 Pin GPIO</li>
</ul>


<p>This model also draws more power, but performs very well. And if you want to use for an actual desktop machine the extra USB ports are helpful.</p>

<h2>Raspberry Pi 2</h2>

<p>This is a drastic change for the Pi. While the form factor is identical to the Raspberry Pi B+, it has a lot more power.</p>

<p><img src="https://www.jeremymorgan.com/images/raspberry/raspberry-pi-2.jpg" alt="Raspberry Pi 2" /></p>

<ul>
<li>Broadcom BCM2836 ARMv7 Quad Core Processor (900mhz)</li>
<li>1024MB SDRAM</li>
</ul>


<p>This is rumored to be 6x faster. And in addition you&#8217;ll be able to run Windows 10 on it. I am very excited about this. If you&#8217;d like to join the Microsoft IoT early adopter program, <a href="https://www.windowsondevices.com/signup.aspx">here is the signup form</a>.</p>

<h2>Initial impressions</h2>

<p><img src="https://www.jeremymorgan.com/images/raspberry/raspberry-pi-2-desktop.jpg" alt="Raspberry Pi Model B+" /></p>

<p>I haven&#8217;t been able to tinker with it much yet, but it is definitely faster. The Model A/B machines have been able to be a decent, usable Linux Desktop. Its not something you&#8217;d ever want to do real work on, but it&#8217;s usable.</p>

<p>The Raspberry Pi 2 on the other hand is quite snappy. It&#8217;s enough to be a real internet machine. If you could get a decent browser it would be unstoppable.</p>

<p>The real benefit of course isn&#8217;t going to be using it as a desktop machine, but continuing to to use for IoT and other Maker Projects with increased memory and power. 900mhz and 1 Gig of Ram? I had a home computer with those specs not so long ago. It&#8217;s exciting!</p>

<h3>Ideas</h3>

<p>I am batting around a few ideas of things to build with the Pi, including a stereo/GPS setup and a media center, and a robot. But maybe you have another better idea? Send me your ideas and maybe I&#8217;ll set it up and write about it!</p>

<p><a href="http://www.mcmelectronics.com/product/83-16530?green=46991FB6-EF99-5EAE-B725-4A375A3908DD">Want to buy a Raspberry Pi 2? Get it here! </a></p>

<br />


<div class="subscribefooter">
<h4>Do you like my Rasbperry Pi Tutorials? </h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff with the Raspberry Pi. If you want to get notified every time I post a new article <a href="http://feeds.feedburner.com/JeremyMorganRaspberryPi"><strong>subscribe to my Raspberry Pi feed</strong></a> here, or you can <a href="http://www.feedblitz.com/f?sub=883810"><strong>Sign up for the Raspberry Pi Newsletter</strong></a> spam free!  
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developer Predictions for 2015]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/2015-tech-predictions/"/>
    <updated>2015-01-01T19:45:00-08:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/developer-predictions-for-2015</id>
    <content type="html"><![CDATA[<p>Here I will outline my tech predictions for 2015. Specifically in the developer world. While I would never call myself an &#8220;authority&#8221; or &#8220;expert&#8221; on development trends I am passionate about this stuff and to my credit I do read Hacker News, Lobsters and Proggit every day. Yes, even on weekends and holidays. So there&#8217;s that.</p>

<!-- more -->


<h3>Things that will blow up in 2015</h3>

<p>As ambitious it sounds I&#8217;m going to try to predict what&#8217;s going to blow up in 2015. This is the most exciting stuff, right? Not the obvious stuff, like &#8220;herp derp mobile will be huge in 2015&#8221;. Let&#8217;s get a bit more granular.</p>

<h4>Internet of Things</h4>

<p>2014 was the year IoT really took off. In 2015 it&#8217;s going to blast into the mainstream. All this stuff we&#8217;ve been talking about since the 1980s or earlier is within our reach. Want something to monitor the items in your refrigerator to tell you what&#8217;s expiring and help you build a shopping list? Yeah, it&#8217;s coming. The coolest part about this stuff is the entry price. You can shell out less than $100 and read a book on Python and start creating some insanely cool stuff.</p>

<h4>Pocket Sized Computing</h4>

<p>Ok this directly ties into IoT because these devices are commonly used. But IoT isn&#8217;t their only use. Miniaturized computers are red hot and will continue to get smaller and faster in 2015. Here are some pretty awesome ones:</p>

<ul>
<li><a href="http://amzn.to/1DecYwi">Raspberry Pi Model B</a> (Complete Kit!) - $69.95</li>
<li><a href="http://amzn.to/1D21T4m">Intel Galileo</a> - $49.99</li>
<li><a href="http://amzn.to/1vFDb0X">Arduino Uno Ultimate Starter Kit</a> - $54.99</li>
<li><a href="http://amzn.to/1I7cucp">Parallella 16 Desktop Computer</a> - $149.99</li>
</ul>


<p>What&#8217;s really cool about this is it&#8217;s a full functional computer on a tiny card. You can use it for IoT projects or just low power computing stuff, and learning to program. Give them to your kids and watch them go wild. It&#8217;s just too amazing to pass up.</p>

<h4>Cross Platform Mobile Frameworks</h4>

<p>Nobody needs to be told that mobile is already huge, and will continue to get bigger. But how we&#8217;re developing apps is changing rapidly. The biggest idea is developing applications once time that can be pushed out to the three major platforms (IOS, Android, Windows).</p>

<p>The leader of the pack by far is <a href="http://xamarin.com/">Xamarin</a>. It&#8217;s the most mature and feature packed cross platform out there, and integrates with Visual Studio. You can write your apps in anything you want and push them out to the big 3 with an awesome workflow.</p>

<p>Xamarin comes at a price though (up to $1899 a year) and if you&#8217;re making a profit this is a no brainer purchase. But if you&#8217;re goofing around and not making any money <a href="http://phonegap.com/">PhoneGap</a> is an awesome alternative. In fact, there are tons of free / open source platforms for this.</p>

<p>This will be big in 2015 for obvious reasons. Develop it once and publish as opposed to building it 3 times, or skipping out on entire platforms? The choice is clear.</p>

<h3>Golang, RUST, and other server languages.</h3>

<p>Google Go (golang) has been growing in popularity for a while, but it&#8217;s really starting to mature. Languages like Go and RUST are great for high performance server tasks and they&#8217;re getting quite the following, mostly because they aren&#8217;t C or C++. I see these making a huge splash in 2015.</p>

<h3>Functional Languages.</h3>

<p>This is extremely controversial. I would not say <a href="http://en.wikipedia.org/wiki/Functional_programming">Functional Programming</a> will kill OOP in 2015 (or ever) but I am certain the trends are going to continue to push for it. It&#8217;s a different mindset and it&#8217;s no silver bullet but there are solutions that are just better done with a functional pattern.</p>

<p>F#, Haskell, Erlang, Lisp, etc are things to keep an eye on and maybe start busting out some small stuff with.</p>

<h3>JavaScript as ByteCode</h3>

<p>We&#8217;ve just about reached peak wheel reinvention with JavaScript and I think we&#8217;re going to see an extra push towards JavaScript being generated with other languages. I&#8217;m talking about CoffeeScript or TypeScript, but transpilers also are getting a lot of attention.</p>

<p>The idea is apps should be written in a clean, sane language then have it pump out JavaScript browsers and devices can interpret. It&#8217;s like bytecode.. nobody should be editing JavaScript much soon. I think this is the year we&#8217;ll see some changes.</p>

<h3>PHP (Yeah Really)</h3>

<p>While PHP may be the most hated language on the planet besides Perl, Facebook has adopted it and their work on the <a href="http://hhvm.com/">HHVM</a> (Hip Hop Virtual Machine) has been going very strong and showing huge performance gains. There are millions of PHP applications out there, and about as many PHP developers so why not utilize it?</p>

<p>I think language changes and the continued advancement of HHVM will make a huge splash.</p>

<h3>Conclusion</h3>

<p>These are just some of the things that I think will blow up in 2015. I could be wrong, but I&#8217;m sure each of them will at least be more popular a year from now than they are as you read this.</p>

<p>Questions? Leave a comment below with your predictions.</p>

<br />


<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://www.feedblitz.com/f?sub=339769"><strong>get the programmer newsletter</strong></a> 100% spam free!
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building C#/ASP.NET apps on a Mac with vNext]]></title>
    <link href="https://www.jeremymorgan.com/tutorials/vnext/how-to-build-c-sharp-on-mac-osx/"/>
    <updated>2014-11-16T13:39:00-08:00</updated>
    <id>https://www.jeremymorgan.com/tutorials/vnext/building-c-number-apps-on-a-mac</id>
    <content type="html"><![CDATA[<p>In case you&#8217;ve been away from the internet for the last week, you&#8217;ve probably heard the big news from the ASP.Net team. They&#8217;re embracing open source in a major way. Scott Hanselman wrote <a href="http://www.hanselman.com/blog/">a fantastic post about the news</a> that nearly broke the internet (and certainly tested his hosting provider). Microsoft is really backing up their claims that they are committed to Open Source in a major way.</p>

<!-- more -->


<p>Up until now the only ASP/C# development I do on my Mac is under a Virtual Machine. I have a couple &#8220;bleeding edge&#8221; VMs I use for CTP versions of the framework and Visual Studio. But I never truly develop things on the platform and thought I&#8217;d give it a try.</p>

<h3>You need Sublime Text</h3>

<p>Ok, so this one goes without saying but you probably already have <a href="http://www.sublimetext.com/">Sublime Text</a> on your machine. It&#8217;s a fantastic editor that works well on all three platforms, and well worth $70. Having the same interface on Mac, Windows and Linux was what first attracted me to Sublime, and after using it a while I do nearly everything in it. I naturally decided to use it for this experiment. It&#8217;s not <a href="https://www.jetbrains.com/webstorm/">a true IDE like WebStorm</a> (which also runs on all three) but it will work great for what we&#8217;re doing here.</p>

<h3>1. Getting Started</h3>

<p>First we need to get Mono and the K version manager set up. We can install this with Homebrew:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew tap aspnet/k
</span><span class='line'>brew install kvm</span></code></pre></td></tr></table></div></figure>


<p>This will install K and pull down Mono if you don&#8217;t have it installed. You will want to add a line to your .bashrc file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nano ~/.bashrc</span></code></pre></td></tr></table></div></figure>


<p>and add</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source kvm.sh</span></code></pre></td></tr></table></div></figure>


<p>and save it the file.</p>

<p>Next you&#8217;ll want to install the K Runtime environment (KRE). To do that, you type in</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kvm upgrade</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;re now ready to start running ASP.NET vNext on your machine.</p>

<h3>2. Running a Sample App</h3>

<p>Just to try it out, let&#8217;s run a sample application from the vNext GitHub.</p>

<p>create a project folder, and from the command line run</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/aspnet/Home.git</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s go to /Home/samples/HelloWeb. You&#8217;ll see a file in there called Startup.cs, let&#8217;s open that up in Sublime.</p>

<p>It looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">Microsoft.AspNet.Builder</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">KWebStartup</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">app</span><span class="p">.</span><span class="n">UseStaticFiles</span><span class="p">();</span>
</span><span class='line'>          <span class="n">app</span><span class="p">.</span><span class="n">UseWelcomePage</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, this is extremely simple file. It uses the IApplicationBuilder interface to build a simple app, and build a Welcome page.</p>

<p>Also we have a project.json file that&#8217;s pretty important. You use this to configure the application and load in dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Kestrel&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0-beta1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Microsoft.AspNet.Diagnostics&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0-beta1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Microsoft.AspNet.Hosting&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0-beta1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Microsoft.AspNet.Server.WebListener&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0-beta1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Microsoft.AspNet.StaticFiles&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0-beta1&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;commands&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;web&quot;</span><span class="p">:</span> <span class="s2">&quot;Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5001&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;kestrel&quot;</span><span class="p">:</span> <span class="s2">&quot;Microsoft.AspNet.Hosting --server Kestrel --server.urls http://localhost:5004&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;frameworks&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;aspnet50&quot;</span><span class="p">:</span> <span class="p">{},</span>
</span><span class='line'>      <span class="nt">&quot;aspnetcore50&quot;</span><span class="p">:</span> <span class="p">{}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty straightforward stuff. To run our application we&#8217;re going to need to pull in these packages, to do that run</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kpm restore</span></code></pre></td></tr></table></div></figure>


<p>Once you do that you&#8217;ll see it start to pull down packages from NuGet for your application. Let&#8217;s run the application. Since this a web app we&#8217;ll use Kestrel to serve it,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>k kestrel</span></code></pre></td></tr></table></div></figure>


<p>You should see this:</p>

<p><img src="https://www.jeremymorgan.com/images/dotnet-on-mac/dotnet-on-mac-osx-1.jpg" alt="image" /></p>

<p>This means you have a server running. Load up a web browser and point it to: http://localhost:5004/</p>

<p><img src="https://www.jeremymorgan.com/images/dotnet-on-mac/dotnet-on-mac-osx-2.jpg" alt="image" /></p>

<p>ASP.NET vNext on your Mac Desktop! Pretty sweet, right? Actually you&#8217;ve been able to do this for about 6 months now, and it&#8217;s not first class yet, but they&#8217;re working on it every day.</p>

<h3>3. Set up Sublime Text for C# Coding.</h3>

<p>Now we&#8217;re going to get Sublime Text set up for C#/ASP.Net development. First we&#8217;ll install <a href="https://github.com/ligershark/Kulture">Kulture</a>, a Sublime extention for ASP.Net vNext.</p>

<ul>
<li>Bring up the Command Palette (Cmd + Shift + P)</li>
<li>Select Package Control: Install Package</li>
<li>Select Kulture when the list appears.</li>
</ul>


<p>With Kulture we&#8217;ll be able to run K commands from within Sublime.</p>

<p>We&#8217;re also going to install <a href="https://github.com/OmniSharp/omnisharp-sublime">OmniSharp</a> for Sublime.</p>

<ul>
<li>Bring up the Command Palette (Cmd + Shift + P)</li>
<li>Select Package Control: Install Package</li>
<li>Select OmniSharp when the list appears.</li>
</ul>


<p>With OmniSharp you can build, run and refactor C# code with vNext, within sublime. Check the <a href="https://github.com/OmniSharp/omnisharp-sublime">Readme</a> for more details.</p>

<p>Let&#8217;s set our C# language-specific settings. (This is also outlined in the Readme)</p>

<p>Go to Sublime Text -> Preferences -> Settings - More -> Syntax Specific - User</p>

<p><img src="https://www.jeremymorgan.com/images/dotnet-on-mac/dotnet-on-mac-osx-3.jpg" alt="image" /></p>

<p>And paste in the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;auto_complete&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;auto_complete_selector&quot;</span><span class="p">:</span> <span class="s2">&quot;source - comment&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;auto_complete_triggers&quot;</span><span class="p">:</span> <span class="p">[</span> <span class="p">{</span><span class="nt">&quot;selector&quot;</span><span class="p">:</span> <span class="s2">&quot;source.cs&quot;</span><span class="p">,</span> <span class="nt">&quot;characters&quot;</span><span class="p">:</span> <span class="s2">&quot;.&lt;&quot;</span><span class="p">}</span> <span class="p">],</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, lets open up that startup.cs file we opened earlier (The sample web app)</p>

<p>Now open the command pallette (Cmd + Shift + P)</p>

<p>Type a &#8220;K&#8221; and you&#8217;ll see &#8220;run k commands&#8221; come up.</p>

<p>You now see a list of selections:</p>

<p><img src="https://www.jeremymorgan.com/images/dotnet-on-mac/dotnet-on-mac-osx-4.jpg" alt="image" /></p>

<p>After a while, this will save you save you some time.</p>

<p>To get Intellisense working, you need to create a project file (again this is from the Readme)</p>

<p>To get intellisense with ASP.Net vNext projects you need to create a project file in Sublime. Go to Project - Save Project As and enter in a name for your project. OmniSharpSublime will use this to know what files and assemblies it needs to provide intellisense for (TIP : Close &amp; Re-Open Sublime if you do not see intellisense, it may take 10 secs for the intellisense server OmniSharpServer to start once Sublime has loaded all the plugins)</p>

<p>Once OmniSharpSublime is installed and you have a project file you should be able to see intellisense.</p>

<p>Hint: There&#8217;s also a <a href="https://sublime.wbond.net/packages/C%23%20Snippets">C# Snippets Extension</a> worth looking at.</p>

<h3>4. Let&#8217;s build a console app</h3>

<p>Here I will show you how to do a console application, and we&#8217;ll do it a little differently. We&#8217;re going to use the fantastic <a href="http://yeoman.io/">Yeoman generator</a> for this. If you&#8217;ve never used Yeoman you should try it out, it&#8217;s pretty awesome.</p>

<p>This assumes you have Node.JS and NPM installed. If you don&#8217;t, <a href="http://howtonode.org/how-to-install-nodejs">You can follow these quick steps here</a>.</p>

<p>So first we&#8217;ll install the generator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">npm</span> <span class="err">install</span> <span class="err">-g</span> <span class="err">generator-aspnet</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you don&#8217;t have Yeoman it will install it for you.</p>

<p>Then, we create a folder we want the project in, and type</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">yo</span> <span class="err">aspnet</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll be greeted with a screen like this:</p>

<p><img src="https://www.jeremymorgan.com/images/dotnet-on-mac/dotnet-on-mac-osx-5.png" alt="image" /></p>

<p>You can select between the types of application it can generate. Let&#8217;s select Console Application. I named mine &#8220;HelloWorld&#8221; because I lack creativity today.</p>

<p>After it generates, you&#8217;ll see it has created some files:</p>

<p><img src="https://www.jeremymorgan.com/images/dotnet-on-mac/dotnet-on-mac-osx-6.jpg" alt="image" /></p>

<p>These files should look pretty familiar, but we now have a global JSON config as well as our project config.</p>

<p>Modify this file a little if you want, and bring up the command pallete, type k to run K commands and select K run:</p>

<p><img src="https://www.jeremymorgan.com/images/dotnet-on-mac/dotnet-on-mac-osx-7.jpg" alt="image" /></p>

<p>Pretty cool huh? For some reason I&#8217;ve always been a huge fan of Console applications. I&#8217;m also a huge fan of C#. For years throughout my career I&#8217;ve built tons of awesome console apps, and the idea that soon I&#8217;ll be able to build first class C# console apps in Linux is pretty exciting to me.</p>

<h3>Conclusion</h3>

<p>This is pretty exciting stuff for so many reasons. I am a fanboy of all three operating environments (Windows, OSX, Linux) depending on what I&#8217;m doing. When I&#8217;m working with Python, PHP, or JS stuff I really like working in Linux. When I&#8217;m building graphic intense web pages / CSS or video editing I use OSX. When I build .Net stuff I use Windows. My Mac is the most powerful machine I own, so the idea that I can soon build anything I want in that environment is pretty awesome to me. As I said C# is one of my favorite languages to work in, and the ASP.Net architecture is awesome for building larger websites. The idea that it&#8217;s all coming together is awesome.</p>

<p>I&#8217;m just scratching the surface here, and this article focused on Web/Command Line stuff. But the Mobile development world is also being disrupted right now with work from the Xamarin Team, and vNext. The potential to develop great software has never been better, and it&#8217;s a great time to be a developer.</p>

<p>I think it&#8217;s great that Microsoft is &#8220;putting their money where their mouth is&#8221;. There has been a lot of talk the last couple years about the ASP.NET team embracing open source, and they&#8217;re taking a very serious approach to it. This is not a half hearted attempt at lip service, they&#8217;re opening all of it, and they&#8217;re working with everyone. In the end we as developers will be reaping the benefits from this latest push.</p>

<p>I&#8217;ll create some more vNext stuff in the future and write about some of the &#8220;gotchas&#8221; I&#8217;ve already run into building stuff. The vNext stuff is not &#8220;first class&#8221; yet, but it will be soon. Stay tuned, and be sure to comment if you&#8217;re working on any of this cutting edge stuff.</p>

<br />


<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://www.feedblitz.com/f?sub=339769"><strong>get the programmer newsletter</strong></a> 100% spam free!
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to set up the MEAN stack on Digital Ocean]]></title>
    <link href="https://www.jeremymorgan.com/tutorials/angularjs/how-to-mean-stack/"/>
    <updated>2014-10-26T01:07:00-07:00</updated>
    <id>https://www.jeremymorgan.com/tutorials/angularjs/how-to-set-up-the-mean-stack-on-digital-ocean</id>
    <content type="html"><![CDATA[<p>If you haven&#8217;t heard of the MEAN stack, it&#8217;s a combination of technologies for serving up fast websites, using a set of technologies paired very well together. They consist of MongoDB, Express.JS, Angular.JS, and Node.JS. For more information check out <a href="http://meanjs.org/" target="_blank">MeanJS website</a> for more details.</p>

<!-- more -->


<p>This is not to be confused with Mean.IO. This is also a MEAN stack, but the original creator forked it and started MeanJS instead. I find it to be less error prone and a bit more organized.</p>

<h3>How to set up a MEAN stack on Digital Ocean.</h3>

<p><a href="https://www.digitalocean.com/?refcode=ca6f81fa42b4">Digital Ocean</a> is one of the greatest services for a developer. You can spin up virtualized Linux servers for as little as $5 a month, and it&#8217;s a great cheap way to host your projects.</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/mean-stack-how-to-1.jpg" title="How to install MEAN Stack&#34;" alt="How to install MEAN Stack&#34;"></p>

<p>I know what some of you are thinking, &#8220;why not just press the MEAN app button on the console?&#8221;. This is a great way to set up a MEAN stack, but I am a firm believer in doing stuff like this manually. It&#8217;s important to know what you&#8217;re installing and how to do it, rather than rely on GUI tools for everything. You don&#8217;t really learn unless you do it.</p>

<p>That being said this article isn&#8217;t really specific to Digital Ocean, you can follow these steps on any Ubuntu machine. <a href="https://www.digitalocean.com/?refcode=ca6f81fa42b4">Digital Ocean</a> just happens to be a good platform to try it on.</p>

<h3>Get Started</h3>

<p>To get started we&#8217;re going to create a droplet. For this tutorial I created an Ubuntu 14.04 x64 version.</p>

<p>The first thing you&#8217;ll want to do once you log in, is update it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update</span></code></pre></td></tr></table></div></figure>


<p>And we&#8217;ll need to install Git, as it will be needed later.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install git</span></code></pre></td></tr></table></div></figure>


<h3>Install Node.JS</h3>

<p>Before we can install Node we&#8217;ll need some packages brought in:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install python-software-properties python g++ make</span></code></pre></td></tr></table></div></figure>


<p>Then we&#8217;ll add a new repo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:chris-lea/node.js</span></code></pre></td></tr></table></div></figure>


<p>And update again.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install nodejs</span></code></pre></td></tr></table></div></figure>


<p>Then we should update NPM:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g npm</span></code></pre></td></tr></table></div></figure>


<p>And once that&#8217;s done we&#8217;ll install Bower and Grunt:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo npm i -g bower
</span><span class='line'>sudo npm install -g grunt-cli</span></code></pre></td></tr></table></div></figure>


<h3>Install MongoDB</h3>

<p>MongoDB will be the backend for the website. This is a relatively quick install, but must be done before the MEAN stack is installed.</p>

<p>First we need to import the public key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10</span></code></pre></td></tr></table></div></figure>


<p>Then we need to create a list file for Mongo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list</span></code></pre></td></tr></table></div></figure>


<p>Then run another update:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update</span></code></pre></td></tr></table></div></figure>


<p>And then we can install MongoDB:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install -y mongodb-org</span></code></pre></td></tr></table></div></figure>


<p>Now, check to see if MongoDB has started:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tail /var/log/mongodb/mongod.log</span></code></pre></td></tr></table></div></figure>


<p>You should see this message:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/mean-stack-how-to-2.jpg" title="How to install MEAN Stack&#34;" alt="How to install MEAN Stack&#34;"></p>

<p>And your MongoDB is up and running!</p>

<h3>Install MEAN.JS stack</h3>

<p>You&#8217;re almost done! This part is quick and easy. Just clone the latest repo into a folder (I used meanjs)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/meanjs/mean.git meanjs</span></code></pre></td></tr></table></div></figure>


<p>install it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo npm install</span></code></pre></td></tr></table></div></figure>


<p>and run it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grunt</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;re done! You should see the following screen:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/mean-stack-how-to-3.jpg" title="How to install MEAN Stack&#34;" alt="How to install MEAN Stack&#34;"></p>

<p>And just like that you&#8217;re ready to go.</p>

<h3>If you want to run it as a full time server</h3>

<p>When you run Grunt it starts your server, but as soon as you exit SSH it drops. Also NodeJS is a single threaded application so a single failure can bring down the service. This is why we use forever to run the server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install forever</span></code></pre></td></tr></table></div></figure>


<p>Now start it up:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>forever start server.js</span></code></pre></td></tr></table></div></figure>


<p>and you&#8217;ve got a full time server running.</p>

<h3>Conclusion</h3>

<p>I hope this helps illustrated the steps for getting a MEAN stack set up. This is just the beginning, in future tutorials we&#8217;ll build some stuff.</p>

<p>This stack is pretty awesome, and really important. I can definitely see this replacing PHP as a go-to quick web development technology for open source platforms. It&#8217;s advancing rapidly, offers incredible performance and reduced development time.</p>

<br />


<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://www.feedblitz.com/f?sub=339769"><strong>get the programmer newsletter</strong></a> 100% spam free!
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Great Unicorn Hunt]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/the-great-unicorn-hunt/"/>
    <updated>2014-10-08T20:04:00-07:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/the-great-unicorn-hunt</id>
    <content type="html"><![CDATA[<p>When talking with people in the Portland, Oregon tech scene I hear the same thing all the time. &#8220;We are always looking for developers. We are hiring and can&#8217;t find anyone. If you know anyone looking&#8230;.&#8221;. Folks claim there are more jobs than developers in this town, but is that entirely accurate? Is it as bad as it seems?</p>

<!-- more -->


<h3>The Portland Tech Scene</h3>

<p>First I should probably tell you about my impressions of the Portland tech scene. It&#8217;s not representative of the industry in general, nor is it even applicable to other parts of the country but merely my observation of what&#8217;s happening here in Portland, Oregon.</p>

<p><img class="right" src="https://www.jeremymorgan.com/images/portland-tech.jpg" title="&#34;Portland Oregon Tech Scene&#34;" alt="&#34;Portland Oregon Tech Scene&#34;"></p>

<ul>
<li>We have a lot of talent here.</li>
<li>Our startup scene is exploding.</li>
<li>Our &#8220;Old school&#8221; businesses are thriving.</li>
<li>Companies are migrating here.</li>
<li>Innovation is happening here.</li>
<li>Both open source and proprietary system developers are in demand.</li>
</ul>


<p>All of these points are hard to argue and they point to a potential talent shortage, I don&#8217;t argue that there is one. We&#8217;re clearly in the middle of a bubble as well, like most of the world. But is it as bad as it seems? I don&#8217;t think so.</p>

<p>I would argue that the talent shortage in Portland is not nearly what some people would make it out to be, and suspect it&#8217;s like that in other parts of the country and even the world.</p>

<h3>Why can&#8217;t you find good talent?</h3>

<p>If you ask most people around here why they can&#8217;t find good talent, the answers are generally the same, depending on who you ask. The most common one of course is:</p>

<blockquote><p>There simply aren&#8217;t enough developers in Portland.</p></blockquote>

<p>Which is not entirely true. There are lots of developers in Portland, and many of them are out of work, or freelancing. Here are some other more realistic reasons companies aren&#8217;t finding developers:</p>

<ol>
<li>They aren&#8217;t offering enough money (not always the company&#8217;s fault)</li>
<li>The company environment sucks. (Not the recruiter&#8217;s fault)</li>
<li>You have an idiot making the hiring decisions. (The company&#8217;s fault)</li>
</ol>


<p>Out of all of these possibilities, which one do you think happens the most? I&#8217;m going to guess it&#8217;s number 3, and I&#8217;ll explain why.</p>

<p>I won&#8217;t go into a lot of detail about the first two because there are companies that can&#8217;t afford to offer programmers six figure salaries, so they pay what they can and attract whatever talent they can. There&#8217;s not a lot they can do about it.</p>

<p>Company environment is another thing that&#8217;s not something a recruiter or even manager can control much of the time, so they&#8217;re stuck. If your environment sucks, you have to live with the fact that much of your talent will decline to work for you in this economy.</p>

<h3>Who is making the hiring decision?</h3>

<p>This is a big one, because it&#8217;s something a company can control for very little cost. Many companies have what I call &#8220;Unicorn Hunters&#8221; and they&#8217;re people who simply have unrealistic expectations about the person they&#8217;re going to hire. They&#8217;re looking for someone they are never going to find. Recruiters spend weeks or months looking for people, and spend enormous amounts of time and money looking for a &#8220;perfect candidate&#8221; while their competition is adding features to their website or product and leaving them in the dust.</p>

<p>Who makes the hiring decisions will greatly influence the results you get in any company, in any economy. But right now in Portland Oregon (and likely anywhere in the tech industry) this person holds the ultimate power over the bottom line. And this person could very well be an idiot, which is why you can&#8217;t find the talent you&#8217;re looking for.</p>

<h3>The types of unicorn hunters</h3>

<p>Here is a brief list of the type of people you shouldn&#8217;t have hiring your developers. They shouldn&#8217;t be making the final decision and their input probably shouldn&#8217;t even be considered.</p>

<h4>1. The Brogrammer Manager</h4>

<p>Generally a manager who has never developed anything, or dabbled just enough that they think they know something about it. They are in the industry because &#8220;there&#8217;s money there&#8221;. This manager only hires cool, fashionable, sports loving, everyday average people like themselves. Has a hidden (or not so hidden) contempt for &#8220;nerds&#8221; and social outcasts. This manager will disregard a candidate&#8217;s technical skill set, usually because they don&#8217;t understand it anyway. Dismisses skilled candidates by saying they have poor social skills or won&#8217;t fit in.</p>

<h4>2. Big Fish in a Small Pond</h4>

<p>This one is the top coder in the company or team who must stay that way. Anyone that could possibly steal their thunder or show them up in some way are shown the door quickly. They will usually come up with some silly tricks and puzzles to make the candidate seem aloof in front of the decision maker. Happens frequently with smaller companies and teams because they have convinced non technical management how irreplaceable they are.</p>

<p>The only way to truly overcome this one is by having them demonstrate things they&#8217;ve built, and see how it compares with what your company is working on.</p>

<h4>3. The Bullet Point Seeker</h4>

<p>This is the one who has a long list of bullet points, and every single one must be met. They have a long list of technologies that may not even be related, or used in your company. It doesn&#8217;t matter that their list is so long no reasonable programmer could ever master them all in 4 careers, they just need every one checked off. These managers generally have a pedestrian knowledge of development in general and couldn&#8217;t tell you a single thing about any of their bullet points.</p>

<h4>4. The Bigot</h4>

<p>This requires little explanation. These are the folks who still think talent and intelligence favor a certain race or gender. They&#8217;ll spend the entire interview looking for a reason to disqualify a candidate that doesn&#8217;t fit their profile, and veto them completely. This is just one of the reasons you should work to purge this person from your organization.</p>

<h4>5. The Hipster</h4>

<p>This is the manager who requires the developer to be just like them. If you don&#8217;t have the tight flannel, skinny jeans, black rimmed glasses and taste in obscure music you won&#8217;t be hired. This is very similar to the brogrammer manager, because they&#8217;re just trying to find someone that mirrors themselves rather than looking at actual talent or ability. Certain companies that value their image will hire in this way, but should be aware of the fact that the quality and quantity of work may suffer for it. As long as you&#8217;re willing to make that trade off, you&#8217;re ok.</p>

<h4>6. The Gatekeeper</h4>

<p>All of the managers fit into this list, but there are some people who really take joy in becoming a gatekeeper. They pride themselves on how tough of an interviewer they are, and take joy in rejecting people. These people are a danger to your organization, and they&#8217;re easy to spot. Did they want high fives after showing someone the door? Are they overjoyed at stumping people, or making disrespectful remarks about the person after they left? These are signs of a low self esteem and if someone bases their self worth on rejecting others, they shouldn&#8217;t be allowed into the process because they are rejecting good candidates and harming your company.</p>

<h3>Conclusion</h3>

<p>This post just scratches the surface of some of the problems companies face in getting good talent. As I said, I do believe there is a talent shortage in development but I don&#8217;t think it&#8217;s quite as bad as some make it out to be. The important things I&#8217;ve learned in the last 10+ years of interviewing and hiring is this:</p>

<ul>
<li>The best candidates are passionate, and it&#8217;s the first thing you should look for.</li>
<li>Years of experience and bullet points are not as important as you think they are.</li>
<li>Education level is not as important as you think it is.</li>
<li>Talent and intelligence are not limited to a single race or gender.</li>
<li>Personality fit is very important, but should not be the only criteria.</li>
<li>Trivia questions and puzzles are ineffective.</li>
<li>Make them show you instead of tell you.</li>
<li>You are going to have bad hires. If it becomes a trend, re-evaluate what you&#8217;re doing.</li>
</ul>


<p>This is a small summary of my experience, but one of the best books I&#8217;ve ever read on hiring is a quick read, and well worth it. It&#8217;s called <a href="http://amzn.to/1tnlmc3" target="_blank">Smart and Gets Things Done: Joel Spolsky&#8217;s Concise Guide to Finding the Best Technical Talent</a>. If you&#8217;re reading this blog and you&#8217;re any kind of a programmer you already know who Joel Spolsky is. He covers some great theories in this book and will open your eyes and get you to look into your hiring process a bit more.</p>

<p>Also, if you live in the Portland, Oregon area (or want to move here) and you&#8217;re looking to change careers, there is one company who I recommend you talk to. They are <a href="http://www.itmotives.com/" target="_blank">IT Motives</a>, and they have some of the best gigs in town, whether it&#8217;s contract or full time. It&#8217;s run by a group of people I know personally who have passion and integrity that can&#8217;t be matched. <a href="http://www.itmotives.com/open-positions" target="_blank">Check out some of their open positions</a>.</p>

<br />


<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://www.feedblitz.com/f?sub=339769"><strong>get the programmer newsletter</strong></a> 100% spam free!
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tech News September 5th 2014]]></title>
    <link href="https://www.jeremymorgan.com/blog/tech-news/tech-news-9-05-2014/"/>
    <updated>2014-09-04T22:04:00-07:00</updated>
    <id>https://www.jeremymorgan.com/blog/tech-news/tech-news-september-5th-2014</id>
    <content type="html"><![CDATA[<h3>New Stuff</h3>

<p>Here&#8217;s some tech news for September 5th, 2014. Cool stuff I found on the web, and decided to share.</p>

<!-- more -->


<p><strong>Miriam Minds</strong> - <a href="http://www.marianminds.com/">Practice Verb Conjugators for People Studying French, Latin, or Italian</a></p>

<p><strong>Tetris in ClojureScript</strong> - <a href="http://shaunlebron.com/t3tr0s-slides/#0">This is pretty cool</a>.</p>

<p><strong>Mjolnir</strong> - <a href="http://mjolnir.io/">An automation/productivity app for OS X</a></p>

<p><strong>Angular-Permission</strong> - <a href="https://github.com/Narzerus/angular-permission">simple access control for your routes in AngularJS</a></p>

<p><strong>Pythonpy</strong> – <a href="https://github.com/Russell91/pythonpy">The swiss army knife of the command line</a></p>

<p><strong>PojoViz</strong> – <a href="http://maurizzzio.github.io/PojoViz/public/vulcanize.html#readme">Visualize the structure of any JavaScript library, framework</a></p>

<p><strong>Pixelapse</strong> - T<a href="https://toolbelt.pixelapse.com/inspector">he most powerful image inspector on the web</a></p>

<p><strong>LLVM &amp; Clang</strong> - <a href="http://llvm.org/releases/3.5.0/docs/ReleaseNotes.html">Version 3.5 released </a></p>

<p><strong>Visual Studio 2013</strong> - <a href="http://visualstudiomagazine.com/articles/2014/09/04/vs-and-tfs-2013-4-ctp.aspx">Update 4 CTP 1 Offers Web-Based Code Review</a></p>

<p><strong>Serena Deployment Automation</strong> - <a href="http://www.serena.com/index.php/en/products/featured-products/serena-deployment-automation/overview">Free Community Edition released</a>.</p>

<p><strong>MEAN Development Stack</strong> - <a href="https://developers.google.com/cloud/mean/">MEAN development stack on Google Compute Engine</a></p>

<h3>Articles</h3>

<p>I found this cool link on Hacker News, <a href="http://wp.sigmod.org/?p=688">Fifty Years of Databases</a> and it&#8217;s a heck of a read. Very interesting to see how far we&#8217;ve come.</p>

<p>And in a funny case of history repeating itself, <a href="http://paleofuture.gizmodo.com/uber-is-currently-fighting-the-battle-that-jitneys-lost-1629552478">Uber Is Currently Fighting the Battle That Jitneys Lost 100 Years Ago</a>. I still don&#8217;t know how I feel about the Uber thing, but it&#8217;s an interesting read none the less.</p>

<p>Check out <a href="http://blog.urx.com/urx-blog/2014/9/4/the-science-of-crawl-part-1-deduplication-of-web-content">The Science of Crawl Part 1: Deduplication of Web Content</a> if you&#8217;re interested in stuff like that (I am).</p>

<p>In sad news, <a href="http://blog.twitpic.com/2014/09/twitpic-is-shutting-down/">Twitpic is shutting down</a>. Yet another ridiculous show of greed by Twitter, rather than acquiring them, or working out some kind of deal, they just felt they needed to kill it. It&#8217;s not a new tactic for Twitter, but upsetting anyway.</p>

<h3>Meetups</h3>

<p>The next Portland Meetup I&#8217;ll be attending is the <a href="http://www.meetup.com/pdxSass/events/200404332/">Portland SASS Meetup</a> at Puppet Labs. This meetup has grown considerably, and for good reason. The organizers have done a great job of creating awesome, useful presentations.</p>

<p>Another good one I might check out is <a href="http://www.meetup.com/pdxnode/events/190140022/">NodeJS Code &amp; Learn night</a>, I&#8217;ve been to a couple before and it&#8217;s always pretty interesting.</p>

<p>Ideas? comments? Feedback? Hit me up on <a href="http://www.twitter.com/jeremycmorgan">Twitter</a> or one of the <a href="https://www.jeremymorgan.com/contact">contact methods here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tech News August 27 2014]]></title>
    <link href="https://www.jeremymorgan.com/blog/tech-news/tech-news-8-27-2014/"/>
    <updated>2014-08-27T12:49:00-07:00</updated>
    <id>https://www.jeremymorgan.com/blog/tech-news/tech-news-august-27-2014</id>
    <content type="html"><![CDATA[<p>I&#8217;ve decided to start writing posts bringing my blog back to a magazine style format, and share some of the cool stuff I find here instead of emailing or IMing to all my friends. I have no idea if I&#8217;ll stick with it or not we&#8217;ll see how much the readers like it.</p>

<!-- more -->


<h3>New Stuff</h3>

<p><a href="https://github.com/mattgreen/hython" target="_blank"><strong>Hython</strong></a> - This is kind of a cool project on Github, it&#8217;s basically a Python 3 interpreter written in Haskell. I don&#8217;t know what the advantages of this would be, but as he states it&#8217;s a project to help him learn Haskell, which is respectable. Who knows what might come out of something like this.</p>

<p><a href="http://c3js.org/" target="_blank"><strong>C3.Js</strong></a> - This is a reuseable chart library based on D3. One of the selling points is that it should be an easier and more customizable way to build charts with D3. I haven&#8217;t tried it out yet, but working with D3 was pretty awesome so I hope they&#8217;re improving on that.</p>

<p><a href="http://sportyapp.com/" target="_blank"><strong>Sporty</strong></a> - This is a new app to find people nearby to play sports with. This is one of those ideas that&#8217;s so obvious you would have thought someone came up with it years ago. But it&#8217;s an excellent example of using technology to improve real life activities as opposed to helping other technology.</p>

<h3>Articles</h3>

<p>Here&#8217;s a good article talking about the <a href="http://glamour.tweakblogs.net/blog/10747/the-significance-of-the-33%24-firefox-os-smartphone.html">Significance of the $33 Firefox OS Smartphone</a>. Excellent food for thought if you&#8217;ve been watching this.</p>

<p>What is Idempotence? The word is thrown around a lot when talking about APIs and Unit testing, but it&#8217;s actually an incredibly simple concept, but <a href="http://www.embeddedrelated.com/showarticle/629.php">this article</a> covers it well.</p>

<p>If you aren&#8217;t excited about Microsoft&#8217;s Katana Web Server you should be. <a href="http://www.infoq.com/news/2014/08/Katana-3">Katana just hit version 3</a> and if it catches on it&#8217;s going to be a big game changer. Big bloated web server software is a thing of the past.</p>

<h3>Meetups</h3>

<p>Are you on <a href="http://www.meetup.com/">Meetup</a> yet? It&#8217;s a great way to meet other enthusiasts in your area and has been catching on big here in Portland. Tonight I&#8217;ll be heading to the <a href="http://www.meetup.com/Portland-JavaScript-Admirers/events/190140432/">Portland JavaScript Admirers</a> meeting where they&#8217;re going to be talking about ReactJS. Should be good stuff.</p>

<p>Ideas? comments? Feedback? Hit me up on <a href="http://www.twitter.com/jeremycmorgan">Twitter</a> or one of the <a href="https://www.jeremymorgan.com/contact">contact methods here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Write Better Unit Tests]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/how-to-write-better-unit-tests/"/>
    <updated>2014-08-24T21:02:00-07:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/unit-testing-guidelines</id>
    <content type="html"><![CDATA[<p>In working with some unit testing fairly extensively lately, I&#8217;ve gathered some guidelines I&#8217;ve tried to stick with over the years for writing better tests. Remember poorly written tests are a waste of time, and cause major problems down the road. It&#8217;s best to keep some of these guidelines in mind.</p>

<!-- more -->


<ul>
<li><strong>Unit tests should not be written to pass</strong> - They should be written to fail. You can make any set of tests pass in minutes but you&#8217;re only cheating yourself.</li>
<li><strong>Tests should only test one thing</strong> - You should be testing a single method with a single function. If not you may be violating the <a href="https://www.jeremymorgan.com/blog/programming/single-responsibility-principle/" target="_blank">Single Responsibility Principle</a></li>
<li><strong>Readability in your tests </strong>- make sure they&#8217;re commented and easy to understand, just like any other code.</li>
<li><strong>Good Naming conventions</strong> - Again tests should be just like any other code - easy for humans to understand.</li>
<li><strong>Asserts are separated from actions</strong> - Your assert should be looking for a result, and not performing logical operations</li>
<li><strong>Use concrete inputs </strong>- Don&#8217;t use any dynamic data for inputs, things like date() can introduce variance.</li>
<li><strong>Group locations of tests</strong> - from a logical standpoint this makes things easier to find when there aren&#8217;t errors pointing towards the problem.</li>
<li><strong>Good tests are isolated from everything</strong> - You should have no reliance on other tests, environment settings, etc. This creates multiple points of failure.</li>
<li><strong>Do not include private methods</strong> - They are implementation and should not be included in Unit Tests</li>
<li><strong>Don&#8217;t connect to databases or data sources</strong> - This is unreliable because you cannot be certain the data served will always be the same, and can create points of failure.</li>
<li><strong>No more than one mock per test</strong> - Again we&#8217;re trying to eliminate points of failure and inconsistenties.</li>
<li><strong>Unit tests are not integration tests</strong> - You want to test results, not implmentation with Unit Tests.</li>
<li><strong>Tests must be deterministic</strong> - You need a solid predictable result, so if it only passes sometimes, it&#8217;s not done.</li>
<li><strong>Keep your tests idempotent</strong> - you should be able to run it multiple times without changing any outcomes, and it should not change any data or increment anything. One time or a million times should have the same effect.</li>
<li><strong>Classes only test one class at a time, methods only test one method at a time.</strong> - An organizational method to pinpoint problems when they arise and help you identify dependencies in testing.</li>
<li><strong>Include exceptions in your tests </strong>- You&#8217;re going to have exceptions so don&#8217;t ignore them, use them.</li>
<li><strong>Don&#8217;t test functionality of 3rd party libraries with your own tests</strong> - Most quality libraries should have their own tests. If not consider mocks to produce consistent results</li>
<li><strong>Always limit values</strong> - When working with values be mindful of your limits and set them (min max) for maximum consistency.</li>
<li><strong>Tests should not require configuration or custom setup</strong> - Anyone should be able to jump in and make your tests work. &#8220;Works on my machine&#8221; should never apply here.</li>
</ul>


<p>I hope this helps some of you out there learning and working with Unit Tests.</p>

<br />


<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://www.feedblitz.com/f?sub=339769"><strong>get the programmer newsletter</strong></a> 100% spam free!
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common C# Interview Questions]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/c-sharp-interview-questions/"/>
    <updated>2014-08-03T21:50:00-07:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/common-c-number-interview-questions</id>
    <content type="html"><![CDATA[<p>I was reading a post about some common C# interview questions, and thought I&#8217;d share some of mine. These are questions that I asked in interviews, or was asked in past interviews. Try them out and see you how you do! I&#8217;m not going to post the answers here, if you don&#8217;t know them, find out!</p>

<!-- more -->


<p></p>

<h3>Common C# (and .Net) Interview Questions</h3>

<ul>
<li>What are the different types of collections in .Net?</li>
<li>What are the benefits offered by generics as opposed to other collections?</li>
<li>What is the difference between a class and a struct?</li>
<li>When calling a function, are parameters passed by value or by reference?</li>
<li>What are the different ways to pass a parameter by reference?</li>
<li>What are the mechanisms for maintaining state in an asp.net application?</li>
<li>Describe inheritance. Describe different ways you can implement inheritance.</li>
<li>What is dependency injection?</li>
<li>How do you override a static method?</li>
<li>Name some of the parts of the page life cycle in ASP.NET.</li>
<li>Where I would validate something like an email address?</li>
<li>What is the difference between public, static and void?</li>
<li>What are Jagged Arrays?</li>
<li>What is serialization?</li>
<li>Can &#8220;this&#8221; be used within a static method?</li>
<li>What is the difference between Array and Arraylist?</li>
<li>Can a private virtual method be overridden?</li>
<li>Describe the accessibility modifier &#8220;protected internal&#8221;.</li>
<li>What are the differences between System.String and System.Text.StringBuilder?</li>
<li>What&#8217;s the difference between the System.Array.CopyTo() and System.Array.Clone()?</li>
<li>What&#8217;s the difference between an interface and abstract class?</li>
<li>What is the difference between Finalize() and Dispose() methods?</li>
<li>What&#8217;s an object pool?</li>
<li>What is the difference between method overriding and method overloading?</li>
<li>What is the difference between a Struct and a Class?</li>
<li>What are Indexers?</li>
</ul>


<h3>MS SQL</h3>

<ul>
<li>What are the different ways for storing behaviors in SQL?</li>
<li>What are the different kinds of SQL joins? When would you use each?</li>
<li>If you have a slow running query that looks at seldom changed data, how might you speed it up?</li>
<li>Describe the different types of joins?</li>
<li>What is the no-lock feature?</li>
<li>How do you make sure you maintain your referential integrity?</li>
<li>He asked me to describe the Controller?</li>
<li>What is a clustering index?</li>
<li>How do you handle an error in a SQL query?</li>
</ul>


<h3>Exercises</h3>

<ul>
<li>Name the 3 language features that make a programming language object-oriented.</li>
<li>Write a C# method that takes an array of integers and returns the largest integer in the array</li>
<li>Explain the difference between pass by value and pass by reference?</li>
<li>Write a C# method that will reverse a string (e.g. &#8220;abcd&#8221; -> &#8220;dcba&#8221;). Make sure that it works.</li>
<li>Write a function that tests if a string is a Palindrome</li>
<li>Write this same function recursively</li>
<li>Write a function that acts as a telegraph, that has a set limit of characters per line (for example only 20 characters per line) and break it up so you don&#8217;t split any words.</li>
</ul>


<h3>Summary</h3>

<p>These are just a few I had stored over the years for interviews, but I&#8217;ll come up with some more. It&#8217;s always good to keep brushed up on this stuff to make sure your skill level is where you think it should be.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to set up a LEMP Server in Ubuntu 14.04]]></title>
    <link href="https://www.jeremymorgan.com/tutorials/linux/how-to-setup-lemp-server-ubuntu/"/>
    <updated>2014-06-16T21:07:00-07:00</updated>
    <id>https://www.jeremymorgan.com/tutorials/linux/how-to-set-up-a-lemp-server-in-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<p>Today I&#8217;m going to show you how to set up a LEMP server (Linux NginX MariaDB PHP)  on an Ubuntu 14.04. It&#8217;s a relatively easy process once you&#8217;ve done it a few times, but there are some things that can trip you up, so I thought I&#8217;d document it and present it here.</p>

<p>For this tutorial I used a <a href="https://www.digitalocean.com/?refcode=ca6f81fa42b4" target="_new">Digital Ocean Droplet</a>, but any Ubuntu 14.04 server should work the same way.</p>

<!-- more -->


<h2>Set up a privileged user</h2>

<p>This assumes you&#8217;re using a fresh install of Ubuntu 14.04, and it&#8217;s not a crucial step in the process if your server is already set up. But we want to create an environment with a privileged user and prevent people from being able to login as root over SSH. This is just an extra precaution I like to do on servers I set up.</p>

<p>Log in to your user as root, and type in the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adduser web</span></code></pre></td></tr></table></div></figure>


<p>It doesn&#8217;t have to be &#8220;web&#8221; you can call it anything you want.</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/how-to-lemp-ubuntu.jpg" title="&#34;How to set up a LEMP Server on Ubuntu 14.04&#34;" alt="&#34;How to set up a LEMP Server on Ubuntu 14.04&#34;"></p>

<p>Add a password and there will be some prompts where you can add as much or as little information as you want for the account.</p>

<p>Then run the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>visudo</span></code></pre></td></tr></table></div></figure>


<p>look for</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>User privilege specification</span></code></pre></td></tr></table></div></figure>


<p>and add the new account:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root    ALL=(ALL:ALL) ALL
</span><span class='line'>web     ALL=(ALL:ALL) ALL</span></code></pre></td></tr></table></div></figure>


<p>It should look like this:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/how-to-lemp-ubuntu-2.jpg" title="&#34;How to set up a LEMP Server on Ubuntu 14.04&#34;" alt="&#34;How to set up a LEMP Server on Ubuntu 14.04&#34;"></p>

<p>Ctrl + X to exit, Y to save the file</p>

<p>Now we want to edit the SSH settings:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nano /etc/ssh/sshd_config</span></code></pre></td></tr></table></div></figure>


<p>Change the Port to something between  1025 and 65536. This just adds an extra step for attackers, and bots that scan for open port 22 won&#8217;t find your connection immediately.</p>

<p>Look for this line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PermitRootLogin yes</span></code></pre></td></tr></table></div></figure>


<p>and change it to</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PermitRootLogin no</span></code></pre></td></tr></table></div></figure>


<p>This prevents people from logging into SSH as root.</p>

<p>As an additional step, let&#8217;s add the line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AllowUsers web</span></code></pre></td></tr></table></div></figure>


<p>so only the web user is allowed to log on to the server.</p>

<p>Restart the ssh server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service ssh restart</span></code></pre></td></tr></table></div></figure>


<p>Now before we log out, we want to test and make sure we can get back in.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -p 4400 web@YourIPADDRESS</span></code></pre></td></tr></table></div></figure>


<p>4400 is the port shown here, but it can be whatever you choose.</p>

<p>If you can log in fine, then you&#8217;ll be safe to exit out of your main session, and log back in as &#8220;web&#8221; (or whatever you used as a username).</p>

<h2>Install the Web Server</h2>

<p>first type in</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update</span></code></pre></td></tr></table></div></figure>


<p>to update the system.</p>

<p>To install NginX:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install nginx</span></code></pre></td></tr></table></div></figure>


<p>In Ubuntu 14.04 it will automatically start up the service, and you should see this startup page:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/how-to-lemp-ubuntu-3.jpg" title="&#34;How to set up a LEMP Server on Ubuntu 14.04&#34;" alt="&#34;How to set up a LEMP Server on Ubuntu 14.04&#34;"></p>

<p>Now your NginX server is set up so we&#8217;ll move on and modify it later.</p>

<h2>Install the Web Server</h2>

<p>We&#8217;re going to install MySQL on the server, but we&#8217;ll be using the <a href="https://mariadb.org/">MariaDB</a> fork instead of the MySQL distribution, because it&#8217;s better in many ways.</p>

<p>For our install we&#8217;re using Ubuntu 14.04 and I want MariaDB 10, so here is how I set it up:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install software-properties-common
</span><span class='line'>sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db
</span><span class='line'>sudo add-apt-repository 'deb http://sfo1.mirrors.digitalocean.com/mariadb/repo/10.0/ubuntu trusty main'</span></code></pre></td></tr></table></div></figure>


<p>If you want to use something different or are working with a different OS, <a href="https://downloads.mariadb.org/mariadb/repositories/#mirror=digitalocean-sfo" target="_new" ref="nofollow">check here to see which repo to use</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install mariadb-server</span></code></pre></td></tr></table></div></figure>


<p>Now we want to secure up our install a bit:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mysql_secure_installation</span></code></pre></td></tr></table></div></figure>


<p>enter your root password and answer &#8220;Y&#8221; to all the things you want to remove for security purposes.</p>

<p>Now you have a (MySQL compatible) MariaDB instance set up!</p>

<h2>Install and configure PHP</h2>

<p>Now we want to install PHP and get it set up with NginX.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install php5-fpm php5-mysql php5-cli php5-mcrypt git</span></code></pre></td></tr></table></div></figure>


<p>Now, we need to configure PHP:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nano /etc/php5/fpm/php.ini</span></code></pre></td></tr></table></div></figure>


<p>Look for the following in the php.ini file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;cgi.fix_pathinfo=1</span></code></pre></td></tr></table></div></figure>


<p>remove the semicolon and set it to 0:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cgi.fix_pathinfo=0</span></code></pre></td></tr></table></div></figure>


<p>Quit and save the file.</p>

<p>Now we need to make a small change to the PHP-FPM config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nano /etc/php5/fpm/pool.d/www.conf</span></code></pre></td></tr></table></div></figure>


<p>look for the listen directive and make sure it says:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>listen = /var/run/php5-fpm.sock</span></code></pre></td></tr></table></div></figure>


<p>Quit and save the file, then restart PHP5-FPM:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service php5-fpm restart</span></code></pre></td></tr></table></div></figure>


<p>Now you&#8217;re set up!</p>

<h2>Configure NginX</h2>

<p>Create a folder where your web files will be stored. I generally set up something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mkdir /var/www/yourdomain.com/public</span></code></pre></td></tr></table></div></figure>


<p>Now open up this file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nano /etc/nginx/sites-available/default</span></code></pre></td></tr></table></div></figure>


<p>The default server setup looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>          listen 80 default_server;
</span><span class='line'>          listen [::]:80 default_server ipv6only=on;
</span><span class='line'>
</span><span class='line'>          root /usr/share/nginx/html;
</span><span class='line'>          index index.html index.htm;
</span><span class='line'>
</span><span class='line'>          server_name localhost;
</span><span class='line'>
</span><span class='line'>          location / {
</span><span class='line'>              try_files $uri $uri/ =404;
</span><span class='line'>          }
</span><span class='line'>      }</span></code></pre></td></tr></table></div></figure>


<p>Make the following changes to the config so it looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>          listen 80 default_server;
</span><span class='line'>          listen [::]:80 default_server ipv6only=on;
</span><span class='line'>
</span><span class='line'>          root /var/www/yourdomain.com/public;
</span><span class='line'>          index index.php index.html index.htm;
</span><span class='line'>
</span><span class='line'>          server_name server_domain_name_or_IP;
</span><span class='line'>
</span><span class='line'>          location / {
</span><span class='line'>              try_files $uri $uri/ /index.php$is_args$args;
</span><span class='line'>          }
</span><span class='line'>
</span><span class='line'>          error_page 404 /404.html;
</span><span class='line'>          error_page 500 502 503 504 /50x.html;
</span><span class='line'>          
</span><span class='line'>          location = /50x.html {
</span><span class='line'>              root /var/www/yourdomain.com/public;
</span><span class='line'>          }
</span><span class='line'>
</span><span class='line'>          # pass the PHP scripts to FastCGI server listening on /var/run/php5-fpm.sock
</span><span class='line'>          location ~ \.php$ {
</span><span class='line'>                try_files $uri /index.php =404;
</span><span class='line'>                fastcgi_pass unix:/var/run/php5-fpm.sock;
</span><span class='line'>                fastcgi_index index.php;
</span><span class='line'>                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
</span><span class='line'>                include fastcgi_params;
</span><span class='line'>          }
</span><span class='line'>      }</span></code></pre></td></tr></table></div></figure>


<p>Replace /var/www/yourdomain.com/public  with whatever folder you&#8217;d like to use for your website (what you created earlier), and replace <em>server_domain_name_or_IP</em> with your server domain name or IP.</p>

<p>Now restart your web services:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service php5-fpm restart
</span><span class='line'>sudo service nginx restart</span></code></pre></td></tr></table></div></figure>


<p>Now we can create a test file to check your PHP configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nano /var/www/yourdomain.com/public/phpinfo.php</span></code></pre></td></tr></table></div></figure>


<p>Add the following:</p>

<figure class='code'><figcaption><span>lang: php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php phpinfo();</span></code></pre></td></tr></table></div></figure>


<p>Now bring up the page in a browser and you should see this:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/how-to-lemp-ubuntu-4.jpg" title="&#34;How to set up a LEMP Server on Ubuntu 14.04&#34;" alt="&#34;How to set up a LEMP Server on Ubuntu 14.04&#34;"></p>

<p>And you&#8217;re done!! Now you can add in your files and start building websites or applications. In future articles I&#8217;ll show some good deployment methods for your new website.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Book Every PHP Developer Should Read]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/the-book-every-php-dev-should-read/"/>
    <updated>2014-06-12T21:07:00-07:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/the-book-every-php-developer-should-read</id>
    <content type="html"><![CDATA[<p>PHP has gotten a bad rap over the years. There is plenty of discussion around it&#8217;s &#8220;Fractal of Bad Design&#8221; and syntactical inconsistencies but the chief complaint is generally security. Lots of PHP sites get hacked by the minute, and even some experienced and knowledgeable programmers will say that the language is inherently insecure.</p>

<!-- more -->


<p>I have always argued against this because there is a common sense reason there are so many security breaches of PHP.</p>

<p><a href="http://buildingsecurephpapps.com/?coupon=jmorgan" target="_new"><img class="right" src="https://www.jeremymorgan.com/images/php-security-howto-1.jpg" title="&#34;PHP Security how to&#34;" alt="&#34;PHP Security how to&#34;"></a>
PHP applications are hacked frequently because:</p>

<ol>
<li>There are so many PHP applications.</li>
<li>It&#8217;s very easy to learn and write PHP.</li>
<li>It&#8217;s easy to write bad PHP.</li>
</ol>


<p>It’s that simple. PHP is popular and has been for many years. The more PHP out in the wild the more it will it&#8217;s exploited. Few of these hacks exploit flaws in the PHP processing engine itself, and are usually vulnerabilities of the scripts themselves.</p>

<p>This means, of course that it&#8217;s mostly the programmer&#8217;s fault when a PHP application is hacked. Sorry folks, but that&#8217;s the truth.</p>

<p>You can write PHP that&#8217;s just as secure (or more so) than other web languages out there. It&#8217;s time we started really striving towards that.</p>

<h3>Your Best Defense against PHP Hacks</h3>

<p>Writing secure PHP code is not a secret black art hidden away from PHP developers. But the information is so scattered it would take you weeks or months (or longer) to gather good PHP security practices into some sort of checklist or formula. Even then only true experience would tell you how much of it is true.</p>

<p>Thankfully Ben Edmunds has already done that for you. He recently released &#8221;<a href="http://buildingsecurephpapps.com/?coupon=jmorgan">Building Secure PHP Apps - a Practical Guide</a>&#8221; and it&#8217;s one of the best security related books I&#8217;ve ever read, and certainly the best covering PHP. In this review I&#8217;ll go over why I think every PHP developer should be reading this.</p>

<p>The book is a very concise guide that will bring to the next level as a developer and have you building better, more secure scripts.</p>

<h4>Introduction</h4>

<p>The book quickly jumps right in with a common sense rule about web development: Never Trust Your Users and Sanitize ALL Input. It starts by painting a small scenario and and jumps right into the technical ways that users can enter your system. In the first chapter it jumps right into topics like:</p>

<ul>
<li>SQL Injection</li>
<li>Mass Assignable Fields</li>
<li>Typecasting</li>
<li>Sanitizing Input / Output</li>
</ul>


<p>These are items that new PHP programmers (and some experienced ones) neglect all the time. Sanitizing input is seen as an optional step by many, and this chapter talks a lot about.</p>

<p>In reading it I was reminded of my first day on a job many years ago when I was digging into the existing code and found the following in the new user creation script:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s2">&quot;isadmin&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// code to set to admin in database </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I panicked when seeing this as it was a VERY active script and there was much to be gained by a malicious user who could have guessed this and inserted a simple form variable and accessed around 5,000 credit card numbers and other personal info.</p>

<p>Digging deeper I found stuff like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$sql</span> <span class="o">=</span> <span class="s2">&quot;INSERT INTO database (id,name,...) VALUES (&quot;</span> <span class="o">.</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s2">&quot;Name&quot;</span><span class="p">]</span> <span class="o">.</span> <span class="s2">&quot;);&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I almost walked out of that job on the first day because of this terrible stuff they were relying on. This stuff is out there and it&#8217;s up to you to change it, and definitely avoid creating more of it.</p>

<p>This chapter talks about why code like this is a terrible risk and how you can fix it.</p>

<h4>HTTPS and Certificates</h4>

<p>This is another area Ben covers with scenarios, stories and a little humor but also clearly explains some concepts of HTTPS that can be unclear. He explains it in a way that even your boss can understand it.</p>

<p>The book is very thorough in describing how certificates work, types of certificates and how they&#8217;re implemented, and even how to set them up in Apache or Nginx.</p>

<h4>Passwords</h4>

<p>In this book some careful explanation of passwords, hashes, lookup tables and salts is included that is incredibly helpful for developers creating a user login system.</p>

<p>Folks, this is one area that is extremely lacking even in 2014. I still run across applications that store plain text passwords or something silly like a <a href="http://en.wikipedia.org/wiki/ROT13">ROT13</a> cipher to protect them. Please, for the sake of the people using your app and your good reputation don’t do this.</p>

<p>Passwords and other sensitive should be very difficult to obtain even if someone has full access to the database. This is covered pretty thoroughly here and will give you great direction for designing better systems.</p>

<h4>Authentication and Access Control</h4>

<p>The book covers this topic very thoroughly. When you’re building a new PHP application some of the first considerations are:</p>

<ul>
<li>Who can access what resources?</li>
<li>Who can control other users access?</li>
</ul>


<p>These are crucial things to think about for applications, especially ones handling sensitive data. A good portion of development in the enterprise world is devoted to this. If you set up authentication and access control improperly the best that can happen is you annoy your users and create more work. The worst than can happen is a severe data breach and / or data destruction.</p>

<p>In this book the basics are covered well, then it deep dives a little more into things like controlling access to files and individual pages of an application, and has plenty of code samples to look at.</p>

<h4>Specific Exploits</h4>

<p>The book covers some common exploits that are used to breach systems and goes into very good detail about Cross Site Scripting, arguably the most common way attackers exploit applications. It explains different types of attacks and how to protect yourself.</p>

<p><a href="http://buildingsecurephpapps.com/?coupon=jmorgan"><h3>Sound Good? You can get this book at a discount using this link!</h3></a></p>

<h3>What I liked the most about this book</h3>

<p>In reading this book I really enjoyed how information is presented in a way that&#8217;s useful for both beginners and experienced programmers. There is a set of concepts presented, what they are and how to protect yourself against it. There are plenty of code samples without &#8220;filler code&#8221; that some technical books suffer from.</p>

<p>You can go through this book fairly quickly because there isn&#8217;t a lot of fluff. Newer developers can go through this book and examine each topic and start looking at their code and making revisions to how they do things. Remember in this business you need to constantly change. If you look back and are ashamed of code you wrote 6 months ago you&#8217;re doing it right.</p>

<p>More advanced and experienced programmers can use this guide to fill in their weak spots (admit it no matter how long you&#8217;ve been in the game, you have them) and learn more about systems they&#8217;ve been using in their work. For instance I have used certificates like crazy over the years but never thought about things down to the level presented in this book.</p>

<p>No matter who you are, you&#8217;ll learn something. So stop reading this post and pick up a copy already! Use this link to purchase it for a discount!!</p>

<h3>Disclaimer</h3>

<p>I don&#8217;t do many reviews on my blog so you may have a few questions. To be clear, I am not being paid or compensated for this review. The coupon code above is to give my blog readers $4 off the price of the book, and I receive none of that. I did receive a promotional copy of the book for reviewing purposes of course.</p>

<p>Also I know the author personally and that&#8217;s one of the reasons I trust the information in this book and have full faith in it&#8217;s guidance. <a href="http://benedmunds.com/">Ben Edmunds</a> has been a huge influence in the PHP community over the years, he has over 10 years experience with PHP is one of the leaders of the Portland area PHP users group, and has made significant <a href="http://benedmunds.com/code.html">contributions to open source PHP projects</a> over the years. It&#8217;s pretty safe to say he knows his stuff and you can trust the information presented here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a self hosted API for Local Development]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/how-to-create-asp-self-hosted-api/"/>
    <updated>2014-05-13T20:20:00-07:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/create-a-self-hosted-api-for-local-development</id>
    <content type="html"><![CDATA[<p>If you&#8217;ve ever worked in an overly restrictive environment, you know you have to come up with some workarounds to get your job done. I worked in such and environment and ran into a problem developing some front end pages to work with an API, but I didn&#8217;t want to use live data. Here&#8217;s a solution I came up with and I decided to write it out and explain it in hopes it will help others.</p>

<!-- more -->


<p>
Tools Needed for this Tutorial (both free of charge):</p>

<ul>
<li><a href="http://www.microsoft.com/en-us/download/details.aspx?id=40787" rel="nofollow" target="_new">Microsoft Visual Studio 2013 Express for Desktop</a></li>
<li><a href="http://www.telerik.com/download/fiddler" rel="nofollow" target="_new">Telerik Fiddler</a></li>
</ul>


<h3>Why a self hosted API?</h3>

<p>When you&#8217;re developing front end stuff its always nice to have a development environment to work against rather than live data, as I explain in <a href="http://www.jeremymorgan.com/blog/programming/smell-it-before-you-eat-it/">smell it before you eat it.</a> But what if a development environment isn&#8217;t available? What if you can&#8217;t install IIS on your machine either? In that case you make a self hosted API to send fake calls to, and try to replicate the behavior.</p>

<p>You don&#8217;t need anything other than Visual Studio to do this, and it gives you a good starting point, and since everything is stored in memory you don&#8217;t have to worry about breaking anything important. There are some other cool uses for a self hosted API but today we&#8217;ll focus on using it to test your JavaScript front end stuff.</p>

<p>For this tutorial I&#8217;m going to assume you already know all about REST and some ASP.Net API basics.</p>

<h3>Find out what you need.</h3>

<p>First you need to find out which API functions you&#8217;ll need and map them out, because you&#8217;re going to have replicate them here, on a small scale. For the demo, we&#8217;re going to make something that stores a listing of books.</p>

<blockquote><p>/API/Book</p></blockquote>

<p>We want to be able to have some basic CRUD methods for it, so let&#8217;s set it up. For this you will need a copy of Visual Studio Professional, or Express 2013 for Windows Desktop. That&#8217;s what I&#8217;ll use for this demo.</p>

<h3>1. Create the Project</h3>

<p>Select File -> New Project</p>

<p>Choose &#8220;Console Application&#8221;</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/how-to-self-host-asp-web-api-1.jpg" title="How to build self hosted Web API in ASP.Net&#34;" alt="How to build self hosted Web API in ASP.Net&#34;"></p>

<p>Right click on your project and select &#8220;Manage NuGet Packages&#8221;</p>

<p>Search the Online Packages for &#8220;Microsoft ASP.Net Web API Self Host&#8221; and install the assemblies.</p>

<h3>2. Set up the executable</h3>

<p>Next we&#8217;ll want to add configuration data, so in Program.cs add the following using statements:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">using</span> <span class="n">System</span><span class="p">.</span><span class="n">Web</span><span class="p">.</span><span class="n">Http</span><span class="p">;</span>
</span><span class='line'><span class="n">using</span> <span class="n">System</span><span class="p">.</span><span class="n">Web</span><span class="p">.</span><span class="n">Http</span><span class="p">.</span><span class="n">SelfHost</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then inside in the static void Main() function add:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">var</span> <span class="n">config</span> <span class="o">=</span> <span class="n">new</span> <span class="n">HttpSelfHostConfiguration</span><span class="p">(</span><span class="s">&quot;http://localhost:31337&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the port can be anything you want it to be.</p>

<p>Now create an instance of the HttpSelfHostServer passing in your config object as the parameter:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">var</span> <span class="n">server</span> <span class="o">=</span> <span class="n">new</span> <span class="n">HttpSelfHostServer</span><span class="p">(</span><span class="n">config</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now create a task that calls the OpenAsync method and set the task to Wait:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">var</span> <span class="n">task</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">OpenAsync</span><span class="p">();</span>
</span><span class='line'><span class="n">task</span><span class="p">.</span><span class="n">Wait</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we&#8217;ll want to output something to console to let you know it&#8217;s started, and put a Console.ReadLine in there to make sure it stays open until you want it to quit.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Server Up&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>Note:</strong> At this time you can have a running service, but you must be running Visual Studio as an administrator. Now, if you&#8217;re in a restricted environment like I was you can&#8217;t do that, so you just have to code it with blind faith that it will work. You can run the finished product once it&#8217;s done, but if you are allowed to run as admin you can debug and test better.</p></blockquote>

<h3>3. Set up routing</h3>

<p>Ok, so much of this doesn&#8217;t do you a lot of good until you can route your requests.</p>

<p>Open up the package manager again (<em>Right click on your project and select &#8220;Manage NuGet Packages&#8221;</em>)
and search for &#8221;<strong>Attribute Routing Self-Hosted</strong>&#8221;. Install the AttributeRouting(Self-Hosted Web API) package.</p>

<p>Now, open up Program.cs and add the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">config</span><span class="p">.</span><span class="n">Routes</span><span class="p">.</span><span class="n">MapHttpRoute</span><span class="p">(</span><span class="s">&quot;Default&quot;</span><span class="p">,</span> <span class="s">&quot;api/{controller}/{id}&quot;</span><span class="p">,</span> <span class="n">new</span> <span class="p">{</span> <span class="n">id</span> <span class="o">=</span> <span class="n">RouteParameter</span><span class="p">.</span><span class="n">Optional</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will handle the routing for your application.</p>

<h3>4. Create a Model</h3>

<p>In this tutorial we&#8217;re going to create a storage space for some books. Create a class that looks like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">public</span> <span class="n">class</span> <span class="n">Book</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="n">get</span><span class="p">;</span> <span class="n">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">public</span> <span class="n">string</span> <span class="n">Title</span> <span class="p">{</span> <span class="n">get</span><span class="p">;</span> <span class="n">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">public</span> <span class="n">string</span> <span class="n">Author</span> <span class="p">{</span> <span class="n">get</span><span class="p">;</span> <span class="n">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">public</span> <span class="n">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="n">get</span><span class="p">;</span> <span class="n">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will obviously store some simple attributes for our books.</p>

<h3>5. Create a Controller</h3>

<p>Let&#8217;s create a class called BookController that extends the ApiController:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="n">BookController</span> <span class="o">:</span> <span class="n">ApiController</span>
</span></code></pre></td></tr></table></div></figure>


<p>In that class we&#8217;ll want to create a few demo books every time it starts. We do this by creating a List of type book, and adding a few instances into it to start out:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="n">ourbooks</span> <span class="o">=</span> <span class="n">InitBooks</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">private</span> <span class="k">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="n">InitBooks</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">booklist</span> <span class="o">=</span> <span class="n">new</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">booklist</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">new</span> <span class="n">Book</span> <span class="p">{</span> <span class="n">Id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">Title</span> <span class="o">=</span> <span class="s">&quot;Microsoft Visual C# 2012&quot;</span><span class="p">,</span> <span class="n">Author</span> <span class="o">=</span> <span class="s">&quot;John Sharp&quot;</span><span class="p">,</span> <span class="n">Price</span> <span class="o">=</span> <span class="mf">29.99</span><span class="n">M</span> <span class="p">});</span>
</span><span class='line'>    <span class="n">booklist</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">new</span> <span class="n">Book</span> <span class="p">{</span> <span class="n">Id</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">Title</span> <span class="o">=</span> <span class="s">&quot;C# 5.0 in a nutshell&quot;</span><span class="p">,</span> <span class="n">Author</span> <span class="o">=</span> <span class="s">&quot;Joseph Albahari&quot;</span><span class="p">,</span> <span class="n">Price</span> <span class="o">=</span> <span class="mf">19.99</span><span class="n">M</span> <span class="p">});</span>
</span><span class='line'>    <span class="n">booklist</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">new</span> <span class="n">Book</span> <span class="p">{</span> <span class="n">Id</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">Title</span> <span class="o">=</span> <span class="s">&quot;C# in Depth, 3rd Edition&quot;</span><span class="p">,</span> <span class="n">Author</span> <span class="o">=</span> <span class="s">&quot;Jon Skeet&quot;</span><span class="p">,</span> <span class="n">Price</span> <span class="o">=</span> <span class="mf">29.99</span><span class="n">M</span> <span class="p">});</span>
</span><span class='line'>    <span class="n">booklist</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">new</span> <span class="n">Book</span> <span class="p">{</span> <span class="n">Id</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">Title</span> <span class="o">=</span> <span class="s">&quot;Pro ASP.NET MVC 5&quot;</span><span class="p">,</span> <span class="n">Author</span> <span class="o">=</span> <span class="s">&quot;Adam Freeman&quot;</span><span class="p">,</span> <span class="n">Price</span> <span class="o">=</span> <span class="mf">34.01</span><span class="n">M</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">booklist</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we&#8217;ll want to create a method to retrieve all books:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="n">public</span> <span class="n">IEnumerable</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="n">Get</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ourbooks</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will return all the books in our list. Let&#8217;s open up fiddler and see what that looks like:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/how-to-self-host-asp-web-api-2.png" title="How to build self hosted Web API in ASP.Net&#34;" alt="How to build self hosted Web API in ASP.Net&#34;"></p>

<p>So as you can see, a list of our items is returned with a GET request. This may be all you need, but if you need REST services, continue on.</p>

<h3>6. Setting up REST actions</h3>

<p>in our BookController, you&#8217;ll want to add a few more methods to add update and delete items.</p>

<h5>Retrieve a book by ID (GET)</h5>

<p>Let&#8217;s make it so we can select a book by it&#8217;s Id. Add a method to the controller that looks like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="n">public</span> <span class="n">Book</span> <span class="nf">Get</span><span class="p">(</span><span class="kt">int</span> <span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">var</span> <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">from</span> <span class="n">b</span> <span class="n">in</span> <span class="n">ourbooks</span>
</span><span class='line'>                          <span class="n">where</span> <span class="n">b</span><span class="p">.</span><span class="n">Id</span> <span class="o">==</span> <span class="n">Id</span>
</span><span class='line'>                          <span class="n">select</span> <span class="n">b</span><span class="p">).</span><span class="n">FirstOrDefault</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">null</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">var</span> <span class="n">resp</span> <span class="o">=</span> <span class="n">new</span> <span class="n">HttpResponseMessage</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">NotFound</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">Content</span> <span class="o">=</span> <span class="n">new</span> <span class="n">StringContent</span><span class="p">(</span><span class="n">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;No book with ID = {0}&quot;</span><span class="p">,</span> <span class="n">Id</span><span class="p">)),</span>
</span><span class='line'>                    <span class="n">ReasonPhrase</span> <span class="o">=</span> <span class="s">&quot;Book ID Not Found&quot;</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>                <span class="n">throw</span> <span class="n">new</span> <span class="n">HttpResponseException</span><span class="p">(</span><span class="n">resp</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This overrides the Get method, so if you pass it an Id, it will return some details for that book. As you can see if it does not find an ID it returns a 404 error, with a custom response.</p>

<h4>Add a new book (POST)</h4>

<p>To add a new book, we want to create a method that takes a POST command, and gets the JSON object from the body of the request. To that, add the following method:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="kt">void</span> <span class="nf">Post</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span><span class="n">Book</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">b</span><span class="p">.</span><span class="n">Id</span> <span class="o">=</span> <span class="n">ourbooks</span><span class="p">.</span><span class="n">Count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ourbooks</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">resp</span> <span class="o">=</span> <span class="n">new</span> <span class="n">HttpResponseMessage</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">Created</span><span class="p">);</span>
</span><span class='line'>    <span class="n">throw</span> <span class="n">new</span> <span class="n">HttpResponseException</span><span class="p">(</span><span class="n">resp</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to add a new item to our list, we&#8217;ll need to change the request in Fiddler to a POST, and set the Content-Type:</p>

<blockquote><p>Content-Type: application/json</p></blockquote>

<p>And we&#8217;ll need to send it a JSON object, like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">{</span><span class="s">&quot;Id&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&quot;Title&quot;</span><span class="o">:</span><span class="s">&quot;One More Book!&quot;</span><span class="p">,</span><span class="s">&quot;Author&quot;</span><span class="o">:</span><span class="s">&quot;Jeremy Morgan&quot;</span><span class="p">,</span><span class="s">&quot;Price&quot;</span><span class="o">:</span><span class="mf">1.99</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your composer should look like this:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/how-to-self-host-asp-web-api-3.png" title="How to build self hosted Web API in ASP.Net&#34;" alt="How to build self hosted Web API in ASP.Net&#34;"></p>

<p>Once you submit, run another GET request, and you&#8217;ll see the new object:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/how-to-self-host-asp-web-api-4.png" title="How to build self hosted Web API in ASP.Net&#34;" alt="How to build self hosted Web API in ASP.Net&#34;"></p>

<p>It&#8217;s that easy! The next are even easier.</p>

<h4>Update a book (PUT)</h4>

<p>In this method we&#8217;re going to update a book using the PUT command.</p>

<p>Add the following method to your controller:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="kt">void</span> <span class="nf">Put</span><span class="p">(</span><span class="kt">int</span> <span class="n">Id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span><span class="n">Book</span> <span class="n">book</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">from</span> <span class="n">b</span> <span class="n">in</span> <span class="n">ourbooks</span>
</span><span class='line'>                    <span class="n">where</span> <span class="n">b</span><span class="p">.</span><span class="n">Id</span> <span class="o">==</span> <span class="n">Id</span>
</span><span class='line'>                    <span class="n">select</span> <span class="n">b</span><span class="p">).</span><span class="n">FirstOrDefault</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">result</span><span class="p">.</span><span class="n">Title</span> <span class="o">=</span> <span class="n">book</span><span class="p">.</span><span class="n">Title</span><span class="p">;</span>
</span><span class='line'>    <span class="n">result</span><span class="p">.</span><span class="n">Author</span> <span class="o">=</span> <span class="n">book</span><span class="p">.</span><span class="n">Author</span><span class="p">;</span>
</span><span class='line'>    <span class="n">result</span><span class="p">.</span><span class="n">Price</span> <span class="o">=</span> <span class="n">book</span><span class="p">.</span><span class="n">Price</span><span class="p">;</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">resp</span> <span class="o">=</span> <span class="n">new</span> <span class="n">HttpResponseMessage</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">Accepted</span><span class="p">);</span>
</span><span class='line'>    <span class="n">throw</span> <span class="n">new</span> <span class="n">HttpResponseException</span><span class="p">(</span><span class="n">resp</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, if you run a GET in Fiddler, you should see a set of results as they are set by default:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/how-to-self-host-asp-web-api-5.png" title="How to build self hosted Web API in ASP.Net&#34;" alt="How to build self hosted Web API in ASP.Net&#34;"></p>

<p>Since it&#8217;s a new instance the one we added will not be there.</p>

<p>In Fiddler (or whatever program you&#8217;re using) change the request to a PUT, and add an ID at the end (for the record you want to change). Then set the Content-Type to application/json and send the JSON string we used earlier. It should look like this:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/how-to-self-host-asp-web-api-6.png" title="How to build self hosted Web API in ASP.Net&#34;" alt="How to build self hosted Web API in ASP.Net&#34;"></p>

<p>Once you send the put request, now send a GET and you&#8217;ll see the updated information:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/how-to-self-host-asp-web-api-7.png" title="How to build self hosted Web API in ASP.Net&#34;" alt="How to build self hosted Web API in ASP.Net&#34;"></p>

<h4>Remove a book (DELETE)</h4>

<p>This one is really easy:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="kt">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">Id</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">from</span> <span class="n">b</span> <span class="n">in</span> <span class="n">ourbooks</span>
</span><span class='line'>                    <span class="n">where</span> <span class="n">b</span><span class="p">.</span><span class="n">Id</span> <span class="o">==</span> <span class="n">Id</span>
</span><span class='line'>                    <span class="n">select</span> <span class="n">b</span><span class="p">).</span><span class="n">FirstOrDefault</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ourbooks</span><span class="p">.</span><span class="n">Remove</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">resp</span> <span class="o">=</span> <span class="n">new</span> <span class="n">HttpResponseMessage</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">OK</span><span class="p">);</span>
</span><span class='line'>    <span class="n">throw</span> <span class="n">new</span> <span class="n">HttpResponseException</span><span class="p">(</span><span class="n">resp</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, just set fiddler to delete an id and send it:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/how-to-self-host-asp-web-api-8.png" title="How to build self hosted Web API in ASP.Net&#34;" alt="How to build self hosted Web API in ASP.Net&#34;"></p>

<p>And it&#8217;s deleted!</p>

<h3>7. Build and use it!</h3>

<p>So now that your application is ready, you can build and executable and use it for development.</p>

<p>Just build it, then look in your /bin/release folder and run it from there!</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/how-to-self-host-asp-web-api-9.jpg" title="How to build self hosted Web API in ASP.Net&#34;" alt="How to build self hosted Web API in ASP.Net&#34;"></p>

<p>Whenever it&#8217;s running you can connect to it like a standard web service.</p>

<h3>So what&#8217;s the point of all this?</h3>

<p>After reading this it might seem like a lot of work, but after you&#8217;ve done it a few times it&#8217;s really quick to whip it up. You might be asking, what&#8217;s the point?</p>

<p>The best use of this is to test the functionality of your application on a sample set of data. You can use this with a plain HTML/JavaScript page, asp page, or even another application. It&#8217;s a good way to test and develop your apps without using live data, or even accessing a live database.</p>

<p>Since you control what data is seeded in, you can write better unit tests for it knowing exactly what to expect. Since it&#8217;s only stored in memory, it&#8217;s really fast and resets as soon as you restart the executable. This can drastically speed up the development time and create better test cases.</p>

<p>Let me know if you use this, the <a href="https://github.com/JeremyMorgan/ASP-Self-Hosted-API" target="_new">code is on GitHub</a> feel free to fork it and expand on it!</p>

<br />


<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://www.feedblitz.com/f?sub=339769"><strong>get the programmer newsletter</strong></a> 100% spam free!
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Properties vs Fields in C#]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/properties-vs-fields/"/>
    <updated>2014-05-04T11:25:00-07:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/properties-vs-fields-in-c-number</id>
    <content type="html"><![CDATA[<p>One of the areas that causes a lot of confusion for new C# developers is the idea of properties and fields. It&#8217;s an easy thing to mess up and there aren&#8217;t really any solid rules on it, but here are some general guidelines to help you decide how to use these members in your project.</p>

<!-- more -->


<h3>Definitions</h3>

<p>Here are some quick definitions of what I&#8217;ll be talking about:</p>

<p><strong>Properties</strong> - A property is a member that provides a flexible mechanism to read, write or compute the data of a private field. (<a href="http://msdn.microsoft.com/en-us/library/x9fsa0sw.aspx">From MSDN</a>)</p>

<p><strong>Fields</strong> - The private members of a class that contain values specific to the object</p>

<p><strong>Methods</strong> - Methods are behaviors of an object, or &#8220;a code block that contains a series of statements&#8221; (<a href="http://msdn.microsoft.com/en-us/library/ms173114.aspx">From MSDN</a>)</p>

<p>These are core parts of Object Oriented Programming as it relates to C#.</p>

<h3>When should I use a property?</h3>

<p>In general you should use properties if you need them to look and behave like a variable. Properties give you a level of abstraction so you can change the fields while not affecting how they&#8217;re used by a class.</p>

<p>Here are some basic rules:</p>

<ul>
<li><strong>Should be quick to read</strong> - reading a property should be just as fast as if it were reading a variable. If there are heavy calculations involved or you need to go to a database every time it&#8217;s needed, this isn&#8217;t the best way to use a property.</li>
<li><strong>Client code should be able to read it&#8217;s value.</strong> - Write only properties are best reserved for methods.</li>
<li><strong>Reading and writing to a property should not have any side effects</strong> - You should have no unexpected actions or side affects when working with this value. Changing this value should produce the results expected (like a color on a web page for instance) but changes should not be able to break the functionality of your program.</li>
<li><strong>Properties should require an order</strong> - You should be able to set the properties in any order, you should not have any errors in a property if another property has not been set. This creates a dependency chain that can make your program unpredictable.</li>
<li><strong>Validation and other logic is fine</strong> - you can encapsulate logic in properties, and adding an additional level of validation here is fine, if not recommended in some cases.</li>
<li><strong>Read it a million times with the same result</strong> - You should be able to read the property multiple times with the same result. If you have a value that&#8217;s constantly changing like how much gas in the gas tank, a GetGasLevel() method would be better. If you want to store values that don&#8217;t change often like the amount of gallons the tank holds, use a property.</li>
</ul>


<h3>When do you I use a field?</h3>

<p>Fields should nearly always be private members of a class, so you don&#8217;t expose internal implementation. They can be constants if necessary. Fields are used for data hiding, which is a best practice for Object Oriented Design:</p>

<blockquote><p>In computer science, information hiding is the principle of segregation of the design decisions in a computer program that are most likely to change, thus protecting other parts of the program from extensive modification if the design decision is changed. The protection involves providing a stable interface which protects the remainder of the program from the implementation (the details that are most likely to change). (<a href="http://en.wikipedia.org/wiki/Information_hiding">Wikipedia Definition</a>)</p></blockquote>

<p>You can perform any internal operations on a field, so long as it&#8217;s private and you can expose it&#8217;s value with a property. Here&#8217;s an example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="n">Person</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// name field</span>
</span><span class='line'>   <span class="n">private</span> <span class="n">string</span> <span class="n">ourname</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// name property</span>
</span><span class='line'>   <span class="n">public</span> <span class="n">string</span> <span class="n">Name</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">get</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">ourname</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">set</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">_name</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see in this code we have the inner field named &#8220;ourname&#8221; and a Name property that&#8217;s available to the outside world. While in the code example above it looks like pointless ceremony but if you wanted to perform operations on the name, such as making it title case this would be a great place to do it.</p>

<p>If you don&#8217;t have any logic to perform you can use AutoProperties (C# 3.0 or later):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="n">Person</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// name property</span>
</span><span class='line'>   <span class="n">public</span> <span class="n">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="n">get</span><span class="p">;</span> <span class="n">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is much more concise and simple, if you need to apply logic to the value later you can always come back and expand it.</p>

<h3>Summary</h3>

<p>I hope that clears up the name vs property question when dealing with objects. Remember there are no hard rules here so if you really need to violate these guidelines you can, but remember some changes may make extension or interfacing difficult.</p>

<p>If you have any questions leave a comment!</p>

<br />


<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://www.feedblitz.com/f?sub=339769"><strong>get the programmer newsletter</strong></a> 100% spam free!
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smell it Before You Eat it]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/smell-it-before-you-eat-it/"/>
    <updated>2014-04-29T20:51:00-07:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/smell-it-before-you-eat-it</id>
    <content type="html"><![CDATA[<p>Whether you&#8217;re developing for a personal project, small business or Fortune 100, you should take the time to make sure your changes aren&#8217;t going to break things. In times past this usually meant spending lots of money. These days the only thing you&#8217;ll need to spend for quality is time, and not much of it.</p>

<!-- more -->


<p></p>

<h3>How the web commando publishes a web page</h3>

<p>We all know how the web commando works. You have a website with files on it, and you download them  via FTP (gotta have that latest copy!) edit it in a text editor and push it back up. .Net folks: edit and quick publish. You open up the browser and check it to make sure it looks good, and move on.</p>

<p>When I first started developing websites I did this too. At one time it was a reasonable thing to do, though still not a good practice. If you were on a small budget you couldn&#8217;t afford multiple servers, testing was pretty much unheard of and continuous integration was years away. So we did it, and we got away with it.</p>

<h3>How a professional publishes a web page</h3>

<p>In 2014, there is no excuse for being a web commando. Shooting from the hip is the product of laziness or sloppiness. These days a professional has the following things set up:</p>

<ul>
<li>Development Environment</li>
<li>Staging Environment</li>
<li>Production Environment</li>
</ul>


<p>Some even have a preview environment for managers. Here are a few things these environments must have:</p>

<ul>
<li>The same operating system</li>
<li>The same version of engine (PHP, Python, Ruby, .Net, etc)</li>
<li>The same version of database back end</li>
<li>The same database schemas</li>
<li>The same configuration (sans Development)</li>
</ul>


<p>I mention development should have a different configuration, that&#8217;s because you should turn error reporting on in development, but have it turned off in staging and live. This way you can catch your errors quickly in development, and see what it will &#8220;really look like&#8221; on stage.</p>

<blockquote><p>Staging and Live environment should be identical. There should be no differences in configuration.</p></blockquote>

<p>If you don&#8217;t want your staging accessing live data in the database, make a reasonable copy of sample data. The schema should be exactly the same however. You want completely predictable behavior from Staging so a push to to the live environment is seamless and worry free.</p>

<blockquote><p>Note: I am not including continuous integration (CI) in this setup. That&#8217;s better tackled with it&#8217;s own article.</p></blockquote>

<p>Here&#8217;s a diagram of an optimal setup for web development:</p>

<p><img src="https://www.jeremymorgan.com/images/dev-stage-live.jpg" title="&#34;Development Environment&#34;" alt="&#34;Development Environment&#34;"></p>

<p>This is optimal, but not always possible.</p>

<h3>The Workflow</h3>

<p>So here is how the workflow goes in the diagram set up above.</p>

<ol>
<li>Developers create code and made changes.</li>
<li>They push (with git or something similar) changes to dev.</li>
<li>They run tests</li>
<li>After they like the results, they push to the staging branch.</li>
<li>Manager is notified &#8220;check this&#8221;</li>
<li>Manager either approves or does not approve changes.</li>
<li>If approved, Manager pushes to live (through git or other custom mechanism)</li>
<li>Once live, the public or users can see the changes.</li>
</ol>


<p>In an optimal situation the developers can pull down code to their local machine and connect to the development database. Some business rules don&#8217;t allow that, so we&#8217;ll assume they&#8217;re using a development server exclusively.</p>

<p>This is a great setup for small or large businesses as a baseline, to make sure you can see if how changes will affect the site, before your customers or users do (smell it before you eat it). While it seems simple, many organizations avoid this model entirely.</p>

<p>This model can be set up for little expense. You can actually have all three of these environments on the same server if you wish. You don&#8217;t have to have three physical servers to do this, due to virtualization.</p>

<h3>Advantages to This Model</h3>

<p>By using this model you have the following advantages:</p>

<ul>
<li>Developers are able to &#8220;go wild&#8221; with changes, knowing that the live site will not be broken.</li>
<li>Managers can view the changes as if they were live, even though they arent.</li>
<li>If something breaks, you&#8217;ll see it before the customer does.</li>
<li>Management is given a good chance to evaluate everything. If they don&#8217;t like, they can cancel it and the end user will never know the difference.</li>
</ul>


<p>There are some downsides however, but well worth it:</p>

<ul>
<li>This setup will add to development time.</li>
<li>Multiple servers will have to be set up.</li>
</ul>


<p>For most companies, a little extra time is a small price to pay to not have egg on your face when a live site goes down.</p>

<h3>What do I Need?</h3>

<p>At a minimum you&#8217;ll need a production server with two Virtual Machines. Whether you&#8217;re developing in a Linux Environment or Windows, virtualization is the way to go here. With Linux environments you don&#8217;t have the licensing hurdles so separate physical machines may be a better option.</p>

<p>You also need a deployment solution. I would recommend git for deployment, but SVN could work. Also using rysnc between stage and live isn&#8217;t a terrible idea. The reason you want to use these systems over FTP is simply for version control. If you don&#8217;t like something you can roll it back, also you can track changes much better. If you use Git from development to staging you can see exactly what was pushed when, and what changes were made. Using something like Rsync between staging and live ensures fast deployment of changes.</p>

<h3>What Kind of Testing Should I Do?</h3>

<p>In the next article I will describe methods of testing. At a minimum you need integration testing, and some kind of acceptance testing but optimally you should use:</p>

<ul>
<li>Unit Testing</li>
<li>Integration Testing</li>
<li>Smoke Testing</li>
<li>Regression Testing</li>
<li>Acceptance Testing</li>
</ul>


<p>I will describe these in full in a future article and show you some good software to use for this. I will also show some great tools to use for this.</p>

<h3>Summary</h3>

<p>In over a decade of development I have seen a lot of changes, and one of the least sexiest seems to be testing and deployment, yet they are the most important. Good quality software is a must for your organization. Most of the time you can&#8217;t reach the &#8220;ivory tower&#8221; level of testing and integration for your projects but the closer you can get the better. We live in a time where you don&#8217;t have to spend a lot of money and a little time invested has huge payoffs when your software works correctly as expected.</p>

<br />


<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://www.feedblitz.com/f?sub=339769"><strong>get the programmer newsletter</strong></a> 100% spam free!
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is Heartbleed?]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/what-is-heartbleed/"/>
    <updated>2014-04-13T19:34:00-07:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/what-is-heartbleed</id>
    <content type="html"><![CDATA[<p>On April 7th a security advisory was released titled &#8220;TLS heartbeat read overrun&#8221; (CVE-2014-0160) and it&#8217;s received a lot of attention in the IT community and the general public. Here&#8217;s a quick explanation of what Heartbleed is, and what it means for you.</p>

<!-- more -->


<h3>Why are so many people talking about this?</h3>

<p><img class="right" src="https://www.jeremymorgan.com/images/what-is-heartbleed.png" title="&#34;What is Heartbleed?&#34;" alt="&#34;What is Heartbleed?&#34;">
There are several reasons Heartbleed has received so much press. It&#8217;s a security exploit with a very wide reach, which means a lot of people are affected. It was also given a cool but somewhat scary name and a logo.</p>

<p>In other words it&#8217;s an exploit with marketing. This is a good thing because it gets the non technical public involved and that&#8217;s usually a great challenge.</p>

<p>According to the OpenSSL security advisory, Heartbleed is:</p>

<blockquote><p>A missing bounds check in the handling of the TLS heartbeat extension can be
used to reveal up to 64k of memory to a connected client or server.</p></blockquote>

<p>Which doesn&#8217;t mean a lot to most people. Heartbleed is a bug with OpenSSL software, which is open source software used to secure communications on the internet. It allows an attacker to read chunks of memory on a web server they couldn&#8217;t otherwise read.</p>

<h3>The Heartbeat Process</h3>

<p>In short, here is how the heartbeat process works. A message is sent between the client (you) and a web server. It specifies the size and content of a message, and if the second server is functioning, it will return that same message back. This is done to make sure the connection is still present.</p>

<p>Here is an illustration of that process and how it theoretically operates:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/what-is-heartbleed-2.png" title="&#34;What is Heartbleed?&#34;" alt="&#34;What is Heartbleed?&#34;"></p>

<p>In heartbeat process Server A prepares a message it expects to get in return and specifies the size of the message. If Server B does not respond, then the &#8220;heartbeat&#8221; is lost and it&#8217;s assumed the server is down. If it does respond it will send back the same message so Server A knows everything is ok.</p>

<p>Under an ideal situation Server B would send back the original message and nothing else.</p>

<h3>The Heartbleed bug</h3>

<p>Where the bug comes in is the size specification of the original message. If an attacker alters that size, they can send a message and receive back whatever size they asked for up to 65,536 bytes. This information is leaked from the Web Server&#8217;s memory, so it can contain RSA keys, usernames passwords or any other sensitive information.</p>

<p>Here&#8217;s a diagram of an attack:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/what-is-heartbleed-3.png" title="&#34;What is Heartbleed?&#34;" alt="&#34;What is Heartbleed?&#34;"></p>

<p>It&#8217;s not exactly this simple, but similar. If the attacker finds encrypted information they can also find the keys, and a well executed attack can garner large amounts of information.</p>

<h3>Who is Affected?</h3>

<p>This affects any server using OpenSSL 1.0.1 and 1.0.2-beta. Since this exploit has been around for a couple years its unclear how many machines are truly affected. The safest bet is to change any password you can.</p>

<p>Here&#8217;s a list of <a href="http://mashable.com/2014/04/09/heartbleed-bug-websites-affected/" target="_blank">passwords you should change right now</a>.</p>

<h3>Should I Panic?</h3>

<p>No. This bug is being patched quickly and as long as you change your passwords you should be fine. Your personal computer is unlikely to be affected by this.</p>

<br />


<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://www.feedblitz.com/f?sub=339769"><strong>get the programmer newsletter</strong></a> 100% spam free!
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Learn Computer Programming]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/how-to-start-programming-for-free/"/>
    <updated>2014-03-02T11:54:21-08:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/how-to-start-programming-for-free</id>
    <content type="html"><![CDATA[<p>So you want to be a computer programmer? Want to write software? Here is how you can get started with this awesome hobby / profession right away, for next to nothing. I first wrote this article back in 2008 and a lot has changed since then, so I decided to start it over completely.</p>

<!-- more -->


<h2>Tips for getting started</h2>

<p><img class="right" src="https://www.jeremymorgan.com/images/computer-programming-1.jpg" title="&#34;how to learn computer programming&#34;" alt="&#34;how to learn computer programming&#34;">
If I were to narrow down the two things that will ultimately determine your success here it&#8217;s this:</p>

<p><strong>1. Don&#8217;t get into it for the money</strong>. We all know that software jobs pay well. I&#8217;m not saying you shouldn&#8217;t try to get the best pay possible once you&#8217;ve built your skills but if this is the primary reason you want to get into it, don&#8217;t bother. There are two approaches to programming:</p>

<ol>
<li>I want to learn how to write software to build (blank) or solve (blank) and maybe someday be paid to do it.</li>
<li>I want to make more money by becoming a software developer.</li>
</ol>


<p>The first one is really the only way to go. Be honest with yourself about this. Being a developer takes intense commitment, beyond what you imagine going in. There are many skilled professions where you reach &#8220;mastery&#8221; and you remain employable for decades, even the rest of your life. Software is not one of them. Your base knowledge of development grows and lasts decades, but applicable skills have a much smaller shelf life and you must study and improve your craft on your own time. This takes dedication and passion that money simply won&#8217;t provide.</p>

<p>Those who get into it purely for money tend to get disgruntled, fail to keep up with trends or new technologies, and burn out eventually. They also have to constantly compete with those who are truly passionate.</p>

<p><strong>2. Learn from a text editor.</strong></p>

<p>Whether it&#8217;s HTML or Assembler writing plain text is the only way to learn and understand what&#8217;s going on with the program. You must break out the development environment and start hacking away.</p>

<p><img class="left" src="https://www.jeremymorgan.com/images/computer-programming-2.jpg" title="&#34;how to learn computer programming&#34;" alt="&#34;how to learn computer programming&#34;">
When you learn coding through an IDE (Integrated Development Environment) there are too many shortcuts and auto-completes that mask what&#8217;s really going on. You can build things quickly, but you don&#8217;t really know what&#8217;s happening with it.</p>

<blockquote><p>Write it out by hand, watch it break, and fix it when it does. It&#8217;s worth the time.</p></blockquote>

<p>I even recommend this for C#/ASP learning. While <a href="http://www.visualstudio.com" rel="nofollow" target="_blank">Visual Studio</a> is arguably the best IDE ever created, it doesn&#8217;t help beginners. I learned C# with Notepad++ and csc.exe. Now that I have the experience I use Visual Studio every day, but as a beginner it would have hampered my learning.</p>

<p>Use a text editor first! Then learn the IDE. You&#8217;ll thank me later.</p>

<h2>What do you want to build?</h2>

<p>This is the first choice you must make when approaching development. You don&#8217;t have to stick with this choice forever but you have to start somewhere. Here are some of the categories of software development, and you should start with which ever one you&#8217;re most excited about:</p>

<ul>
<li>Web Development</li>
<li>Desktop Development</li>
<li>Mobile Development</li>
<li>Server Development</li>
</ul>


<p>These can be broken down even further, and there are always niche categories such as BIOS programming, data processing and other specializations. But these are the areas I&#8217;m going to tackle in this series.</p>

<h2>Part 1: Web Development</h2>

<p><img class="right" src="https://www.jeremymorgan.com/images/computer-programming-3.jpg" title="&#34;how to learn computer programming&#34;" alt="&#34;how to learn computer programming&#34;">
Ok, time to make another decision! There are a few basic routes you can go. You&#8217;ll need to decide which stack you&#8217;ll be going for (at least at first)</p>

<ul>
<li>Linux Stack</li>
<li>Microsoft Stack</li>
</ul>


<p>There are advantages and disadvantages to both, which I will outline here.</p>

<p>Then you must decide which are of web development you want to focus on, at least at first.</p>

<ul>
<li>Frontend Web Development - Pages, Design, GUIs, the stuff you see</li>
<li>Backend Web Development - Databases, APIs, behind the scenes stuff.</li>
</ul>


<p>There&#8217;s no reason you can&#8217;t learn Frontend and Backend on Linux and Microsoft stacks, and in fact you should. But it will take a considerable amount of time to accomplish this so it&#8217;s best if you pick one area and focus on that first.</p>

<h2>Backend (Server Side) Web Development</h2>

<h3>Linux Stack</h3>

<p><img class="center" src="https://www.jeremymorgan.com/images/computer-programming-4.jpg" title="&#34;how to learn computer programming&#34;" alt="&#34;how to learn computer programming&#34;"></p>

<p>The Linux stack is a set of technologies generally used on the Linux operating system platform. Though these technologies will all run on Windows as well, they&#8217;re generally better supported on Linux hosting and have much better tooling and debugging in Linux environments.</p>

<p><strong>Note:</strong></p>

<blockquote><p>You don&#8217;t need to run Linux on your development machine to write software for it, but it does help. Give it a try!</p></blockquote>

<h3>Advantages of using the Linux Stack</h3>

<p><strong>Everything is free -</strong> Other than paying for hosting (which you may not even have to do that) these tools are free. Many of the tools you use to develop on them will also be free. This is great when you&#8217;re just getting your feet wet in programming.</p>

<p><strong>The Linux Developer Community-</strong> Linux is the OS of choice for many developers, and they are passionate about development and helping others. For those just starting out, you&#8217;ll find a ton of activity in this world and lots of help online.</p>

<p><strong>It&#8217;s open source-</strong> Most of the projects you&#8217;ll find on Linux are open source, meaning you can dig into the code and really see how it works. You can make changes to it, fix problems and share source code freely on the internet. This philosophy has drastically changed programming and made software far better.</p>

<p><strong>It&#8217;s Fun-</strong> Though I&#8217;m a Microsoft .Net developer for a living, I still use Linux all the time. I&#8217;m writing this in Arch Linux on my laptop. It&#8217;s because I&#8217;m a constant tinkerer at heart and I love to change and tweak everything. I also love to optimize my environment for peak results. You can squeeze a lot more performance out of your hardware with Linux.</p>

<h3>Disadvantages of the Linux Stack</h3>

<p><strong>Many large companies use the Microsoft Stack -</strong> The Microsoft .Net Framework is a robust, mature, and stable platform for development. It also meshes well with other Microsoft products, so it&#8217;s used heavily in the business world. If you work for one of these companies or want to work for them, if they&#8217;re primarily Microsoft your Linux skills won&#8217;t be very helpful. But don&#8217;t give up yet, there are many large companies using Linux as well, or a mix of both.</p>

<p><strong>Fragmentation -</strong> The downside of everyone doing their own thing is that it becomes fragmented. Certain technologies mesh well together, and some don&#8217;t. What might be a standard way of using a piece of software can be far different from others.</p>

<p><strong>Abandoned Projects -</strong> There are many abandoned projects in this realm because people will group together to work on something and get bored, there will be some infighting, or there will be a lack of interest by the community. When this happens, the software is dead. If something is useful and good someone may pick it up or fork it but there are no guarantees. Remember these people are working for free!</p>

<p><strong>Lack of Documentation -</strong> This is something that seems to be improving by the day. But there are some projects that lack good documentation and it&#8217;s a struggle to get things working. Again, these people are doing this for free and you didn&#8217;t pay anything so you can&#8217;t really expect support. You can help, however by sharing everything you learn about it.</p>

<p><strong>Sometimes things just don&#8217;t work -</strong> You&#8217;ll find software packages that don&#8217;t work or they are missing key features. Since there is no commercial backing, there may be less motivation to fix it. If you&#8217;re an edge case and you have a special need there may not be enough demand for anyone to care. This is an opportunity for you when you become a better developer, as you can pitch in to fix things or add features.</p>

<p>This includes too many platforms to list them all, but it&#8217;s mostly</p>

<ul>
<li><strong>PHP</strong></li>
<li><strong>Python</strong></li>
<li><strong>Ruby</strong></li>
</ul>


<p>These are the predominant web languages on the net, and they are all awesome in their own way. All of these languages are relatively easy to learn and have great resources for doing so. They also offer great frameworks when you&#8217;re ready to build large scale applications.</p>

<p><a id="phptutorials"></a></p>

<hr />


<h4>Where to learn PHP:</h4>

<p><img class="right" src="https://www.jeremymorgan.com/images/how-to-php-tutorials.jpg" title="&#34;How to Learn PHP&#34;" alt="&#34;How to Learn PHP&#34;"></p>

<ul>
<li><a href="http://www.php.net" rel="nofollow" title="PHP.Net" target="_blank"><strong>PHP.Net</strong></a></li>
<li><a href="http://www.tizag.com/phpT/" title="Tizag PHP Tutorials" target="_blank"><strong>Tizag PHP Tutorials</strong></a></li>
<li><a href="http://code.tutsplus.com/tutorials/the-best-way-to-learn-php--net-22287" title="Tuts+ PHP Tutorials"><strong>Tuts+ PHP Tutorials</strong></a></li>
<li><a href="http://www.pluralsight.com/training/Courses/Find?highlight=true&searchTerm=php" title="Pluralsight PHP Tutorials"><strong>Pluralsight PHP Tutorials</strong></a></li>
<li><a href="http://www.codecademy.com/tracks/php" title="CodeAcademy PHP Tutorials" rel="nofollow" target="_blank"><strong>CodeAcademy PHP Tutorials</strong></a></li>
</ul>


<br />


<p><a id="pythontutorials"></a></p>

<hr />


<h4>Where to learn Python:</h4>

<p><img class="right" src="https://www.jeremymorgan.com/images/how-to-python-tutorials.jpg" title="&#34;How to Learn Python&#34;" alt="&#34;How to Learn Python&#34;"></p>

<ul>
<li><a href="https://wiki.python.org/moin/BeginnersGuide/Programmers" title="Beginners Guide to Python" rel="nofollow" target="_blank"><strong>Beginners Guide to Python</strong></a></li>
<li><a href="http://learnpythonthehardway.org/" title="Learn Python the Hard Way" rel="nofollow" target="_blank"><strong>Learn Python the Hard Way</strong></a></li>
<li><a href="http://www.codecademy.com/tracks/python" title="CodeAcademy Python Tutorials" rel="nofollow" target="_blank"><strong>CodeAcademy Python Tutorials</strong></a></li>
<li><a href="http://www.pluralsight.com/training/Courses/Find?highlight=true&searchTerm=python" title="Pluralsight Python Courses" rel="nofollow" target="_blank"><strong>Pluralsight Python Courses</strong></a></li>
<li><a href="http://code.tutsplus.com/series/python-from-scratch--net-20566" title="Python From Scratch" rel="nofollow" target="_blank"><strong>Python from Scratch at Tuts+</strong></a></li>
</ul>


<br />


<p><a id="rubytutorials"></a></p>

<hr />


<h4>Where to learn Ruby:</h4>

<p><img class="right" src="https://www.jeremymorgan.com/images/how-to-ruby-tutorials.jpg" title="&#34;How to Learn Ruby&#34;" alt="&#34;How to Learn Ruby&#34;"></p>

<ul>
<li><a href="https://www.ruby-lang.org/en/documentation/quickstart/" title="Ruby in 20 minutes" rel="nofollow" target="_blank"><strong>Ruby in 20 minutes</strong></a></li>
<li><a href="https://rubymonk.com/" title="Ruby Monk" rel="nofollow" target="_blank"><strong>Ruby Monk</strong></a></li>
<li><a href="http://www.pluralsight.com/training/Courses/Find?highlight=true&searchTerm=Ruby" title="Pluralsight Ruby Courses" rel="nofollow" target="_blank"><strong>Pluralsight Ruby Courses</strong></a></li>
<li><a href="http://code.tutsplus.com/series/ruby-for-newbies--net-18166" title="Ruby for Newbies" rel="nofollow" target="_blank"><strong>Ruby for Newbies (Tuts +)</strong></a></li>
<li><a href="http://ruby.learncodethehardway.org/" title="Learn Ruby the Hard Way" rel="nofollow" target="_blank"><strong>Learn Ruby the Hard Way</strong></a></li>
</ul>


<br />


<hr />


<br />


<p>These are just a few of the languages in use, but the most common. Pick one you feel comfortable with and find something to build with it! The more you build, the more you&#8217;ll learn along the way and run into problems which will help you learn even more.</p>

<h3>Microsoft Stack</h3>

<p><img class="right" src="https://www.jeremymorgan.com/images/computer-programming-5.jpg" title="&#34;how to learn computer programming&#34;" alt="&#34;how to learn computer programming&#34;"></p>

<p>The Microsoft Stack is an organized ecosystem revolving around Microsoft products. But that&#8217;s not such a bad thing as I&#8217;ll explain. It is a true ecosystem in that everything is designed to work together, and for the most part it does. It consists of:</p>

<ul>
<li>The .Net Framework</li>
<li>C#</li>
<li>VB.Net</li>
<li>TypeScript</li>
<li>ASP.Net (combination of these technologies</li>
</ul>


<p>Note: While ASP.Net is now incorporating other languages, such as all the languages above (PHP, Python, Ruby) for the most part right now the majority of Microsoft web development still revolves around the technologies and languages listed above.</p>

<h3>Advantages of the Microsoft Stack</h3>

<p><strong>It&#8217;s backed by a large, successful company -</strong> We all know who Microsoft is, and whether you love them or hate them they&#8217;re pretty successful. That means they have a lot of resources and talent to throw at this stuff. In recent years there has been a huge push to get more developers in this realm and the improvements are astounding.</p>

<p><strong>It&#8217;s an ecosystem -</strong> many developers argue whether this is a good thing or not, but this environment is very interconnected and everything is designed to play well together. There are set standards and best practices, and an established way of doing things that you don&#8217;t find with a more fragmented environment.</p>

<p><strong>Big business loves it -</strong> Backing from Microsoft, solid standards, and reliable structure attract big business to the .Net ecosystem. Many companies like the fact that you can rely on this technology and help is a phone call away. They also like the fact that Microsoft&#8217;s reputation is liable when releasing a product so in most cases it tests things very thoroughly before they&#8217;re released into the wild.</p>

<p><strong>It&#8217;s very solid -</strong> There are faster and more scaleable platforms in the Linux world for the price, and development itself can be faster but .Net applications are rock solid when built correctly. Things like strong typing, excellent debugging and profiling tools, picky compilers, and a vast knowledgebase contribute to quality software that people can rely on. You can build just as solid software on Linux, but .Net development pushes you to build great code by default. You have to try harder to build sloppy software on this platform.</p>

<p><strong>The Tools</strong> - The tools are ridiculously good for .Net development. The Visual Studio IDE is unmatched in my opinion for a development environment. Debugging and profiling tools help you squeeze every bit of performance and security. And hobbyists can get express versions of these tools for free.</p>

<h3>Disdvantages of the Microsoft Stack</h3>

<p><strong>It&#8217;s backed by a large, successful company -</strong> There are disadvantages to an ecosystem being built around a company and some of those do surface here. Often times projects that don&#8217;t get adopted enough to generate numbers die a quick death. Some things are done in the company&#8217;s best interest and not every programmer agrees. Some think Microsoft is evil and it&#8217;s not as popular with the younger, hipper programming crowds.</p>

<p><strong>It can be expensive -</strong> Running a Microsoft shop has a lot of advantages, but it doesn&#8217;t come cheap. This can dissuade a lot of smaller companies and startups from using it. But this disadvantage is being rectified with a little known program: students can get software free through <a href="https://www.dreamspark.com/" target="_blank" rel="nofollow">Dream Spark</a> and startups can use <a href="http://www.microsoft.com/bizspark/" target="_blank" rel="_nofollow">BizSpark</a> to get software for free.</p>

<p><strong>Web Hosting is not as common -</strong> You can&#8217;t throw a rock without it hitting a Linux based web host, but good ASP hosts are much harder to find. If they do host ASP it&#8217;s either more expensive or outdated and neglected. I&#8217;ve been hosting with <a href="https://affiliates.arvixe.com/track.php?id=5348&tid1=homepage" target="_new" rel="_nofollow">Arvixe .Net Web Hosting</a> for over a year without any of those problems. But they are a diamond in the rough.</p>

<p><strong>It&#8217;s harder -</strong> You can grab a quick book on PHP and slap together a website in a couple days. That&#8217;s great for your personal blog or a recipe site. In ASP there is a lot more to learn and it&#8217;s lot more finicky. Not only is there a lot of aggregate things to learn, but the environment is much more strict, so you need to learn it well. Also you have to incorporate a lot more Computer Science related thinking to what you&#8217;re building. This isn&#8217;t exactly a bad thing but it can be daunting for beginners.</p>

<p>So you still want to do it? Keep reading!</p>

<h3>How to learn ASP.Net</h3>

<p><img class="center" src="https://www.jeremymorgan.com/images/how-to-asp-tutorials.jpg" title="&#34;How to Learn ASP.Net&#34;" alt="&#34;How to Learn ASP.Net&#34;"></p>

<p>ASP.Net is the combination of Microsoft languages and technologies related to the web. Funny enough, the website <a href="http://www.asp.net/" target="_blank" rel="_nofollow">ASP.Net</a> is a fantastic resource for learning the ropes. But here are a few other places you can go to learn more.</p>

<p>C# is the predominant language for .Net backend programming and I highly recommend learning it. VB.Net is easier to learn but it&#8217;s just not as well suited for scaling and object oriented programming as C# is. F# is Microsoft&#8217;s functional language that&#8217;s still in it&#8217;s beginning stages, but can be a great solution in some cases. TypeScript is Microsoft&#8217;s language for scaleable enterprise JavaScript.</p>

<p><a id="csharptutorials"></a></p>

<hr />


<h4>Where to learn C#:</h4>

<ul>
<li><a href="http://csharp-station.com/" target="_blank" rel="_nofollow"><strong>C# Station</strong></a></li>
<li><a href="http://www.dotnetperls.com/" target="_blank" rel="_nofollow"><strong>DotNet Pearls</strong></a></li>
<li><a href="http://www.pluralsight.com/training/Courses/Find?highlight=true&searchTerm=C%23" target="_blank" rel="_nofollow"><strong>C# Courses at Pluralsight</strong></a></li>
<li><a href="https://tutsplus.com/course/30-days-to-learn-c-sharp/" target="_blank" rel="_nofollow"><strong>30 days to learn C# at NetTuts</strong></a></li>
<li><a href="http://www.tutorialspoint.com/csharp/index.htm" target="_blank" rel="_nofollow"><strong>C# at TutorialsPoint</strong></a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/aa288436(v=vs.71).aspx" target="_blank" rel="_nofollow"><strong>C# Tutorials on MSDN</strong></a></li>
</ul>


<p><a id="fsharptutorials"></a></p>

<hr />


<h4>Where to learn F#:</h4>

<ul>
<li><a href="http://www.tryfsharp.org/" target="_blank" rel="_nofollow"><strong>Try F# Here ( By Microsoft )</strong></a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/dd233160.aspx" target="_blank" rel="_nofollow"><strong>Building your first F# Application</strong></a></li>
<li><a href="http://fsharp.org/about/learning.html" target="_blank" rel="_nofollow"><strong>Tutorials from the F# Foundation</strong></a></li>
<li><a href="http://www.pluralsight.com/training/Courses/Find?highlight=true&searchTerm=F%23" target="_blank" rel="_nofollow"><strong>F# Tutorials from Pluralsight</strong></a></li>
</ul>


<p><a id="typescripttutorials"></a></p>

<hr />


<h4>Where to learn TypeScript:</h4>

<ul>
<li><a href="http://www.typescriptlang.org/Tutorial/" target="_blank" rel="_nofollow"><strong>TypeScript Lang Tutorial</strong></a></li>
<li><a href="http://code.tutsplus.com/tutorials/getting-started-with-typescript--net-28890" target="_blank" rel="_nofollow"><strong>Getting Started with TypeScript at Tuts+</strong></a></li>
<li><a href="http://www.pluralsight.com/training/Courses/Find?highlight=true&searchTerm=TypeScript" target="_blank" rel="_nofollow"><strong>TypeScript Courses at Pluralsight</strong></a></li>
</ul>


<p><a id="vbnettutorials"></a></p>

<hr />


<h4>Where to learn VB.Net (If you must)</h4>

<ul>
<li><a href="http://www.dotnetperls.com/vb" target="_blank" rel="_nofollow"><strong>VB.Net Tutorials at DotNetPearls</strong></a></li>
<li><a href="http://www.tutorialspoint.com/vb.net/" target="_blank" rel="_nofollow"><strong>VB.Net Tutorials at Tutorials Point</strong></a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/2x7h1hfk.aspx" target="_blank" rel="_nofollow"><strong>Visual Basic at MSDN</strong></a></li>
</ul>


<hr>


<br />


<p>If you want to get started with Microsoft stack development for cheap, check out <a href="http://www.visualstudio.com" target="_blank" rel="nofollow">Visual Studio</a> and get an express edition for free. You can also sign up to <a href="https://www.windowsazure.com" target="_blank" rel="nofollow">Windows Azure</a> and get 10 free websites.</p>

<h2>Frontend (Client Side) Web Development</h2>

<p><img class="center" src="https://www.jeremymorgan.com/images/computer-programming-6.jpg" title="&#34;How to Learn HTML 5&#34;" alt="&#34;How to Learn HTML 5&#34;"></p>

<p>Anyone who says frontend development isn&#8217;t real programming hasn&#8217;t done it in a while. These days JavaScript and HTML5 are more robust and complex than ever, providing solid functionality to what used to be plain web pages. In fact, frontend development is the fastest growing arena and probably the best place to go in the future.</p>

<p>Here&#8217;s what you&#8217;ll need to know:</p>

<p><a id="html5tutorials"></a></p>

<hr />


<h4>Where to Learn HTML 5</h4>

<ul>
<li><a href="http://www.codecademy.com/courses/web-intermediate-en-R6bnc/0/1" target="_blank" rel="_nofollow"><strong>HTML 5 Course at CodeAcademy</strong></a></li>
<li><a href="http://www.pluralsight.com/training/Courses/Find?highlight=true&searchTerm=html+5" target="_blank" rel="_nofollow"><strong>HTML 5 Courses at Pluralsight</strong></a></li>
<li><a href="http://code.tutsplus.com/tutorials/html-5-and-css-3-the-techniques-youll-soon-be-using--net-5708" target="_blank" rel="_nofollow"><strong>HTML 5 and CSS 3 at Tuts+</strong></a></li>
<li><a href="http://www.html5rocks.com/en/tutorials/" target="_blank" rel="_nofollow"><strong>Tutorials at HTML5 Rocks</strong></a></li>
<li><a href="http://www.html5canvastutorials.com/" target="_blank" rel="_nofollow"><strong>HTML 5 Canvas Tutorials</strong></a></li>
</ul>


<p><a id="css3tutorials"></a></p>

<hr />


<h4>Where to Learn CSS 3</h4>

<ul>
<li><a href="http://www.codecademy.com/courses/css-coding-with-style/0/1" target="_blank" rel="_nofollow"><strong>CSS - Coding with Style</strong></a></li>
<li><a href="http://webdesignledger.com/tutorials/20-fresh-css3-tutorials" target="_blank" rel="_nofollow"><strong>20 Fresh CSS 3 Tutorials</strong></a></li>
<li><a href="http://www.onextrapixel.com/2012/10/22/css-toolbox-60-useful-and-specific-css3-tutorials/" target="_blank" rel="_nofollow"><strong>60 useful and specific CSS 3 Tutorials</strong></a></li>
</ul>


<p><a id="jstutorials"></a></p>

<hr />


<h4>Where to Learn JavaScript</h4>

<ul>
<li><a href="http://yuiblog.com/crockford/" target="_blank" rel="_nofollow"><strong>Douglas Crockford on JavaScript</strong></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript" target="_blank" rel="_nofollow"><strong>Great JavaScript Tutorial at MDN</strong></a></li>
<li><a href="http://eloquentjavascript.net/" target="_blank" rel="_nofollow"><strong>Eloquent JavaScript</strong></a></li>
<li><a href="http://code.tutsplus.com/categories/javascript-ajax" target="_blank" rel="_nofollow"><strong>NetTuts+ JavaScript Tutorials</strong></a></li>
<li><a href="http://www.codecademy.com/tracks/javascript" target="_blank" rel="_nofollow"><strong>Learn JavaScript at CodeAcademy</strong></a></li>
<li><a href="http://www.pluralsight.com/training/Courses/Find?highlight=true&searchTerm=JavaScript" target="_blank" rel="_nofollow"><strong>Pluralsight JavaScript Tutorials</strong></a></li>
</ul>


<hr />


<p>This just scratches the surface of what comprises frontend development. There are being strides made every day, and many frameworks are being developed to make frontend development for Web and mobile devices more powerful than ever.</p>

<br />


<h2>General Programming and Development</h2>

<p>For general programming and development knowledge, the following sites are great for getting a nice foundation in software development.</p>

<ul>
<li><a href="http://go.codeschool.com/G2kWkg" target="_blank" rel="_nofollow"><strong>Code School</strong></a></li>
<li><a href="http://www.codecademy.com/" target="_blank" rel="_nofollow"><strong>Code Academy</strong></a></li>
<li><a href="https://www.coursera.org/course/cs101" target="_blank" rel="_nofollow"><strong>Coursera</strong></a></li>
<li><a href="https://www.udacity.com/" target="_blank" rel="_nofollow"><strong>Udacity</strong></a></li>
<li><a href="http://teamtreehouse.com/" target="_blank" rel="_nofollow"><strong>Team Treehouse</strong></a></li>
<li><a href="http://www.pluralsight.com" target="_blank" rel="_nofollow"><strong>Pluralsight</strong></a></li>
<li><a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/" target="_blank" rel="_nofollow"><strong>MIT Open Courseware</strong></a></li>
<li><a href="https://tutsplus.com/" target="_blank" rel="_nofollow"><strong>Tuts +</strong></a></li>
<li><a href="http://code.org/" target="_blank" rel="_nofollow"><strong>Code.org</strong></a></li>
<li><a href="https://developer.mozilla.org/en-US/" target="_blank" rel="_nofollow"><strong>Mozilla Developer Network</strong></a></li>
<li><a href="http://thecodeplayer.com/" target="_blank" rel="_nofollow"><strong>The Code Player</strong></a></li>
<li><a href="https://www.khanacademy.org/cs/programming" target="_blank" rel="_nofollow"><strong>Khan Academy</strong></a></li>
</ul>


<br />


<h2>Summary</h2>

<p>I hope this has given you enough information for getting started in computer programming. I&#8217;ve been doing it since I was a teenager, and I get paid to do it now and it still seems like I&#8217;m just having fun. It&#8217;s a very rewarding and challenging field to get into.</p>

<p>You might be asking: why on earth are you doing this and creating competition for yourself? I&#8217;ve been asked that several times about this blog in general and the answer is simple: there aren&#8217;t enough of us. Developer jobs are increasing faster than than amount of people who can fill them. I see this as an opportunity for people to better their lives, especially in developing countries so if someone is interested in being a developer, I&#8217;m more than happy to help them out.</p>

<p>Let me know what you think in the comments, or contact me.</p>

<br />


<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://www.feedblitz.com/f?sub=339769"><strong>get the programmer newsletter</strong></a> 100% spam free!
</div>

]]></content>
  </entry>
  
</feed>
