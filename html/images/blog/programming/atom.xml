<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blog Category:  Programming | Jeremy's Programming Blog]]></title>
  <link href="https://www.jeremymorgan.com/blog/programming/atom.xml" rel="self"/>
  <link href="https://www.jeremymorgan.com/"/>
  <updated>2015-05-30T12:51:07-07:00</updated>
  <id>https://www.jeremymorgan.com/</id>
  <author>
    <name><![CDATA[Jeremy Morgan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Brief Introduction to REST]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/intro-restful-web-services/"/>
    <updated>2015-05-21T21:25:00-07:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/brief-introduction-to-rest</id>
    <content type="html"><![CDATA[<p>Perhaps you've seen the term REST being thrown around lately and have been a little curious what it's all about. If that's the case, or you know a little about it but never used it, this article is for you. Today I'm going to give a small overview of what REST services are, and why it's awesome.</p>

<h2>So long RPC, hello REST</h2>

<p>If you've been in the web game a while, you may remember when RPC took over the web about 10 years ago. I myself remember it being one of the most exciting things of it's time. Although the pattern has been around since the 80s it started popping up on the web in the early 2000s, and for it's time RPC was a great solution. In fact it's still in use all over the place.</p>

<p>RPC stands for Remote Procedure Call, and it is a way to execute a method on a separate address space such as a server, and consume the output if needed. Here's a rough diagram of what that looks like:</p>

<p><img src="/images/rest-services/intro-rest-services-1.jpg" title="&#34;Intro to REST Services&#34;" alt="&#34;Intro to REST Services&#34;"></p>

<p>As you can see the web server at www.yoursite.com submits and retrieves information from other servers, and uses that data to assemble a web page. RPC calls can provide services for just about anything, from messaging protocols, to stock quotes, weather reports, etc. WordPress uses it extensively for pinging other blogs and a multitude of communication services.</p>

<h3>XML RPC and SOAP</h3>

<p>There are generally two ways to perform RPC calls, with XML and SOAP. There are advantages to each, but back when I was building a lot of this stuff I preferred the XML-RPC methods which was an RPC call made to a server that returned XML. It's very simple and straightforward, and didn't require a lot of ceremony.</p>

<p><a href="http://tldp.org/HOWTO/XML-RPC-HOWTO/xmlrpc-howto-intro.html">How XML-RPC Works</a></p>

<p>SOAP (Simple Object Access Protocol) also uses XML for messaging, but provides an extensible and powerful messaging system. It requires a bit more work in exchange for more powerful features.</p>

<p><a href="https://msdn.microsoft.com/en-us/library/ms995800.aspx">How SOAP-RPC works</a></p>

<p>Neither of these systems were inherently bad and provided great solutions for the time. It's still prevalent all over the web and doing well. In 2008 Leonard Richardson introduced a model that's much more useful today.</p>

<p>If you want a more detailed explanation, check out this <a href="https://technet.microsoft.com/en-us/library/cc738291(v=ws.10).aspx" target="_new">Microsoft TechNet article on RPC.</a></p>

<h2>Key REST Principles</h2>

<p>In short, Rest is a set of principles to be adhered to when communicating from point to point. Here are some of those guidelines</p>

<ul>
<li>Deals with objects (resources) that have IDs</li>
<li>Links servers together</li>
<li>Provides an interface between spaces</li>
<li>Uses standard methods</li>
<li>is stateless</li>
</ul>


<p>These are some of the basic things that a make a service RESTful in nature. One of the important principles is that they are to be objects with an ID. These IDs will used in a URI to identify which resource we're reading or modifying.</p>

<blockquote><p>http://www.yoursite.com/api/products/1234</p></blockquote>

<p>Next we'll look at the model for determining if an API is "RESTful" and what level it conforms to.</p>

<h2>REST Maturity Model</h2>

<p>Richardson created the REST Maturity model which specifies whether an API is "fully RESTful". Most are not, and don't necessarily have to be. But here is a rundown:</p>

<h3>Level 0 - XML-RPC / SOAP</h3>

<ul>
<li>One URI</li>
<li>One HTTP Method</li>
</ul>


<p>Level 0 is a very basic model where you simply sent an RPI (Remote Procedure Invocation) at a web site and it returns some data. It can be in XML, JSON, or any format with key-value pairs.</p>

<h3>Level 1 - Add URIs</h3>

<ul>
<li>Many URIs / Resources</li>
<li>One HTTP Method</li>
</ul>


<p>Level 1 is similar except now there are multiple resources in use:</p>

<blockquote><p>http://www.yoursite.com/api/products/1234</p>

<p>http://www.yoursite.com/api/customers/0037</p></blockquote>

<h3>Level 2 - Add HTTP</h3>

<ul>
<li>Many URIs/Resources</li>
<li>Use of HTTP Verbs</li>
</ul>


<p>In level 2 we add HTTP verbs: GET,POST,PUT,DELETE. There are others, but these four I will describe later.</p>

<h3>Level 3 - Add HATEOAS</h3>

<ul>
<li>Many URIs/Resources</li>
<li>Use of HTTP verbs</li>
<li>Hypermedia</li>
</ul>


<p>In this level we add HATEOAS: Hypertext As The Engine Of Application State. This is how we send objects, but also some instructions in the reply describing what we can do next. For example, it may return something like this:</p>

<pre><code>&lt;?xml version="1.0"?&gt;
&lt;account&gt;
   &lt;account_number&gt;12345&lt;/account_number&gt;
   &lt;balance currency="usd"&gt;100.00&lt;/balance&gt;
   &lt;link rel="deposit" href="https://www.jeremymorgan.com/account/12345/deposit" /&gt;
   &lt;link rel="withdraw" href="https://www.jeremymorgan.com/account/12345/withdraw" /&gt; 
   &lt;link rel="transfer" href="https://www.jeremymorgan.com/account/12345/transfer" /&gt;
   &lt;link rel="close" href="https://www.jeremymorgan.com/account/12345/close" /&gt;
 &lt;/account&gt;
</code></pre>

<p>(from Wikipedia)</p>

<p>These hypermedia controls mean the REST client does not need to know how to use the service and instead can be guided by the responses. This is what is considered a "fully RESTful" service.</p>

<h2>HTTP Verbs</h2>

<p>The HTTP verbs are a standard interface for communicating via a REST service. There is "createobject" verb, or "modifyobject" so these actions are completed with a set of verbs:</p>

<ul>
<li>GET</li>
<li>POST</li>
<li>PUT</li>
<li>DELETE</li>
</ul>


<p>I'll try to explain these in the simplest way possible. Here we are working with "resources" that are similar to records in SQL (or may directly correlate with a record).</p>

<p><strong>GET</strong> - This retrieves a list of resources, and does not modify them. Equivalent to an SQL SELECT</p>

<p><strong>POST</strong> - Generally used to create a new resource. Equivalent to an SQL INSERT</p>

<p><strong>PUT</strong> - Replaces a resource with updated information. Equivalent to an SQL UPDATE</p>

<p><strong>DELETE</strong> - Removes a resource. Equivalent to an SQL DELETE</p>

<p>All of this is done through HTTP. There are more HTTP Verbs in use, but I mention these as they are the most commonly used for REST. In fact, some engineers only use GET and POST for all operations. Theoretically you can do everything with GET if you overload requests in the URIs, but generally it's good practice to use these verbs for your actions.</p>

<h3>Everything needs an ID</h3>

<p>All of these resources need to have an ID. This is especially true with PUT and DELETE as we need to know which resources to modify behind the scenes. The ID is generally passed in the URI:</p>

<blockquote><p>http://www.yoursite.com/api/customers/0037</p></blockquote>

<p>If we send a PUT to this URI, it will update the customer resource with an ID of 0037. If we send a DELETE to this URI, it will remove it.</p>

<h3>Verbs that must be Idempotent</h3>

<p>In theory the GET, PUT, and DELETE verbs should be idempotent, meaning you can call them over an over without any additional side effect. For example, you should be able to send a delete to a URI over and over without breaking the system. Even if the resource has been deleted you should send back a code, but not throw an exception or crash.</p>

<p>Often times when designing REST interfaces, I will send a 200(OK) when a resource is deleted. Then on subsequent deletes I will send a 204 or 404 so the caller knows the resource is no longer present. I don't do this with a PUT, however. Even if the caller sends a PUT with the same information over and over they'll get the same response because I'm not going to be checking if the data submitted is actually different. Instead I'll just blindly update the resource with whatever information is sent. We don't really care if the data is truly different and don't want to waste cycles checking for it unless we are doing some form of auditing.</p>

<h2>REST API Example</h2>

<p>Here's an example of a simple REST API using the information we've learned about above. We want to create an API to modify our customer information.</p>

<p><img src="/images/rest-services/intro-rest-services-2.png" title="&#34;Intro to REST Services&#34;" alt="&#34;Intro to REST Services&#34;"></p>

<p>As you can see sometimes the URI is the same but the verb being sent is different. This is crucial to know when building your application, because getting your verbs mixed up can give unexpected results. You may intend to update a resource and instead delete it.</p>

<h3>Communication between endpoints</h3>

<p>There are several ways you can communicate over REST and there is no right answer. The most common ways are XML and JSON. Here is a light comparison between the two.</p>

<p><strong>XML:</strong></p>

<p>Pros:</p>

<ul>
<li>Generalized markup, so you can create multiple formats and styles for custom purposes.</li>
<li>You can define Schema for custom datatypes and perform structure validation.</li>
<li>can use XPATH to extract information much easier than JSON</li>
</ul>


<p>Cons:</p>

<ul>
<li>Much more verbose than JSON, more data is being transferred and can be slower</li>
</ul>


<p><strong>JSON</strong></p>

<p>Pros:</p>

<ul>
<li>Easy integration with JavaScript (which is commonly used to interface with REST services)</li>
<li>Simple, easy to understand syntax</li>
<li>Less overhead, smaller sizes and better performance</li>
</ul>


<p>Cons:</p>

<ul>
<li>Less powerful and flexible, especially with different data types</li>
</ul>


<h2>Summary</h2>

<p>I hope this has provided a good overview of what REST services are and how they're structured. The trends in web technology have moved away from the common middleware web services that generate HTML for browsers and today people access the web from a variety of different devices, including phones, tablets and watches. REST is well suited for this as it gives a common interface to your data, giving you the freedom to use that data on a variety of platforms.</p>

<p>The same REST service can power a web page, mobile application or anything you can imagine. You can have synchronization between a web page and mobile device (think of Spotify) with ease. REST is the future of the web and something you should be using for your next project, if you aren't already.</p>

<p>I'd like to give a shout out to <a href="https://www.getpostman.com/" target="_blank">POSTman</a> which is an awesome interface for testing REST services. You can use it while designing your REST backend or your front end application. It's indispensable.</p>

<p><br />
<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I'm constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://www.feedblitz.com/f?sub=339769"><strong>get the programmer newsletter</strong></a> 100% spam free!
</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to install ASP.Net 5 on Ubuntu Linux]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/how-to-asp-5-linux/"/>
    <updated>2015-04-10T07:50:00-07:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/how-to-install-asp-dot-net-5-with-docker</id>
    <content type="html"><![CDATA[<p>One of the primary goals of the ASP.Net 5 (codenamed vNext) project is cross platform development, and it's become easier than ever to develop ASP.Net applications on Linux and OSX. Today we're going to take a look at how to do this with Ubuntu Linux server.</p>

<h3>1. Get Your System Ready</h3>

<p>Let's get our system started. For this tutorial I'm using a Digital Ocean droplet. These are only $5 per month, and <a href="https://www.digitalocean.com/?refcode=ca6f81fa42b4" target="_new">if you click this link to sign up</a> you'll get a $10 credit.</p>

<p>I installed a blank Ubuntu 14.04 64 bit server. First, run the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update&amp;&amp;sudo apt-get dist-upgrade</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will make sure we have the newest package lists and upgrade packages if they are available.</p>

<p>Next we'll need to install Mono. The current stable version for Ubuntu is 3.2.8, which won't run ASP.Net, so we will have to pull it directly from the Mono repositories:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
</span><span class='line'>echo "deb http://download.mono-project.com/repo/debian wheezy main" | sudo tee /etc/apt/sources.list.d/mono-xamarin.list
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install mono-complete</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To make sure it installed correctly, type in</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mono -V</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="https://www.jeremymorgan.com/images/asp-5-linux/how-to-asp-5-linux-1.jpg" title="how to install ASP.Net 5 on Docker" ></p>

<p>Next, we'll install some prerequisites that we'll need to fetch and build some items from source:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install -y autoconf build-essential git-core libtool unzip curl</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Also, to run web services we'll need to install libuv. We'll have to build it from source and link it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /opt
</span><span class='line'>sudo git clone https://github.com/libuv/libuv.git
</span><span class='line'>cd libuv
</span><span class='line'>sudo ./autogen.sh
</span><span class='line'>sudo ./configure
</span><span class='line'>sudo make
</span><span class='line'>sudo make install
</span><span class='line'>sudo ln -s /usr/local/lib/libuv.so /usr/lib/libuv.so.1</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now our system should be ready for ASP.Net 5.</p>

<h3>2. Set up ASP.Net 5</h3>

<p>Now that we've got that set up, let's put ASP.Net 5 on here. First we'll install KVM:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -sSL https://raw.githubusercontent.com/aspnet/Home/master/kvminstall.sh | sh &amp;&amp; source ~/.k/kvm/kvm.sh</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><b>Note:</b> if you want to go real bleeding edge, you can install DNVM instead, shich is the replacement for KVM:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -sSL https://raw.githubusercontent.com/aspnet/Home/dev/dnvminstall.sh | DNX_BRANCH=dev sh &amp;&amp; source ~/.dnx/dnvm/dnvm.sh</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, let's install DNX (the .Net execution environment)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kvm upgrade</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you downloaded DNVM above instead, run:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dnvm upgrade</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>3. Clone an ASP.Net Sample</h3>

<p>Now we'll clone the sample repositories:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir ~/aspnet
</span><span class='line'>cd ~/aspnet
</span><span class='line'>git clone https://github.com/aspnet/Home.git
</span><span class='line'>cd ~/aspnet/Home/samples/HelloMvc</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is the sample we'll choose to build. Type in the following to build the packages for it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kpm restore</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we can start it up:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>k kestrel</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You should see a screen that looks like this:</p>

<p><img src="https://www.jeremymorgan.com/images/asp-5-linux/how-to-asp-5-linux-2.jpg" title="how to install ASP.Net 5 on Docker" ></p>

<p>Congrats! You now have ASP.Net 5 running on Ubuntu Linux!</p>

<p>If you would like to run this as a background process, type in</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nohup k kestrel &amp;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note that this should not yet be used for production servers!</p>

<h3>Conclusion</h3>

<p>I have found several articles online about how to do this, but many of them seemed innaccurate, missing peices or out of date. This is common with bleeding edge stuff. I'll try to update this as much as possible.</p>

<p>This is a good way to set up cheap instances of ASP.Net for your projects. At only $5 a month you could have several application servers running for your project for very little. As I stated before you can <a href="https://www.digitalocean.com/?refcode=ca6f81fa42b4" target="_new">get a $10 credit from Digital Ocean by using this link</a> to sign up, or you can use some of the other low cost Linux hosts out there to set up some low cost, fast ASP.Net 5 servers.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developer Predictions for 2015]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/2015-tech-predictions/"/>
    <updated>2015-01-01T19:45:00-08:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/developer-predictions-for-2015</id>
    <content type="html"><![CDATA[<p>Here I will outline my tech predictions for 2015. Specifically in the developer world. While I would never call myself an "authority" or "expert" on development trends I am passionate about this stuff and to my credit I do read Hacker News, Lobsters and Proggit every day. Yes, even on weekends and holidays. So there's that.</p>

<!-- more -->


<h3>Things that will blow up in 2015</h3>

<p>As ambitious it sounds I'm going to try to predict what's going to blow up in 2015. This is the most exciting stuff, right? Not the obvious stuff, like "herp derp mobile will be huge in 2015". Let's get a bit more granular.</p>

<h4>Internet of Things</h4>

<p>2014 was the year IoT really took off. In 2015 it's going to blast into the mainstream. All this stuff we've been talking about since the 1980s or earlier is within our reach. Want something to monitor the items in your refrigerator to tell you what's expiring and help you build a shopping list? Yeah, it's coming. The coolest part about this stuff is the entry price. You can shell out less than $100 and read a book on Python and start creating some insanely cool stuff.</p>

<h4>Pocket Sized Computing</h4>

<p>Ok this directly ties into IoT because these devices are commonly used. But IoT isn't their only use. Miniaturized computers are red hot and will continue to get smaller and faster in 2015. Here are some pretty awesome ones:</p>

<ul>
<li><a href="http://amzn.to/1DecYwi">Raspberry Pi Model B</a> (Complete Kit!) - $69.95</li>
<li><a href="http://amzn.to/1D21T4m">Intel Galileo</a> - $49.99</li>
<li><a href="http://amzn.to/1vFDb0X">Arduino Uno Ultimate Starter Kit</a> - $54.99</li>
<li><a href="http://amzn.to/1I7cucp">Parallella 16 Desktop Computer</a> - $149.99</li>
</ul>


<p>What's really cool about this is it's a full functional computer on a tiny card. You can use it for IoT projects or just low power computing stuff, and learning to program. Give them to your kids and watch them go wild. It's just too amazing to pass up.</p>

<h4>Cross Platform Mobile Frameworks</h4>

<p>Nobody needs to be told that mobile is already huge, and will continue to get bigger. But how we're developing apps is changing rapidly. The biggest idea is developing applications once time that can be pushed out to the three major platforms (IOS, Android, Windows).</p>

<p>The leader of the pack by far is <a href="http://xamarin.com/">Xamarin</a>. It's the most mature and feature packed cross platform out there, and integrates with Visual Studio. You can write your apps in anything you want and push them out to the big 3 with an awesome workflow.</p>

<p>Xamarin comes at a price though (up to $1899 a year) and if you're making a profit this is a no brainer purchase. But if you're goofing around and not making any money <a href="http://phonegap.com/">PhoneGap</a> is an awesome alternative. In fact, there are tons of free / open source platforms for this.</p>

<p>This will be big in 2015 for obvious reasons. Develop it once and publish as opposed to building it 3 times, or skipping out on entire platforms? The choice is clear.</p>

<h3>Golang, RUST, and other server languages.</h3>

<p>Google Go (golang) has been growing in popularity for a while, but it's really starting to mature. Languages like Go and RUST are great for high performance server tasks and they're getting quite the following, mostly because they aren't C or C++. I see these making a huge splash in 2015.</p>

<h3>Functional Languages.</h3>

<p>This is extremely controversial. I would not say <a href="http://en.wikipedia.org/wiki/Functional_programming">Functional Programming</a> will kill OOP in 2015 (or ever) but I am certain the trends are going to continue to push for it. It's a different mindset and it's no silver bullet but there are solutions that are just better done with a functional pattern.</p>

<p>F#, Haskell, Erlang, Lisp, etc are things to keep an eye on and maybe start busting out some small stuff with.</p>

<h3>JavaScript as ByteCode</h3>

<p>We've just about reached peak wheel reinvention with JavaScript and I think we're going to see an extra push towards JavaScript being generated with other languages. I'm talking about CoffeeScript or TypeScript, but transpilers also are getting a lot of attention.</p>

<p>The idea is apps should be written in a clean, sane language then have it pump out JavaScript browsers and devices can interpret. It's like bytecode.. nobody should be editing JavaScript much soon. I think this is the year we'll see some changes.</p>

<h3>PHP (Yeah Really)</h3>

<p>While PHP may be the most hated language on the planet besides Perl, Facebook has adopted it and their work on the <a href="http://hhvm.com/">HHVM</a> (Hip Hop Virtual Machine) has been going very strong and showing huge performance gains. There are millions of PHP applications out there, and about as many PHP developers so why not utilize it?</p>

<p>I think language changes and the continued advancement of HHVM will make a huge splash.</p>

<h3>Conclusion</h3>

<p>These are just some of the things that I think will blow up in 2015. I could be wrong, but I'm sure each of them will at least be more popular a year from now than they are as you read this.</p>

<p>Questions? Leave a comment below with your predictions.</p>

<p><br />
<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I'm constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://www.feedblitz.com/f?sub=339769"><strong>get the programmer newsletter</strong></a> 100% spam free!
</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building C#/ASP.NET apps on a Mac with vNext]]></title>
    <link href="https://www.jeremymorgan.com/tutorials/vnext/how-to-build-c-sharp-on-mac-osx/"/>
    <updated>2014-11-16T13:39:00-08:00</updated>
    <id>https://www.jeremymorgan.com/tutorials/vnext/building-c-number-apps-on-a-mac</id>
    <content type="html"><![CDATA[<p>In case you've been away from the internet for the last week, you've probably heard the big news from the ASP.Net team. They're embracing open source in a major way. Scott Hanselman wrote <a href="http://www.hanselman.com/blog/">a fantastic post about the news</a> that nearly broke the internet (and certainly tested his hosting provider). Microsoft is really backing up their claims that they are committed to Open Source in a major way.</p>

<!-- more -->


<p>Up until now the only ASP/C# development I do on my Mac is under a Virtual Machine. I have a couple "bleeding edge" VMs I use for CTP versions of the framework and Visual Studio. But I never truly develop things on the platform and thought I'd give it a try.</p>

<h3>You need Sublime Text</h3>

<p>Ok, so this one goes without saying but you probably already have <a href="http://www.sublimetext.com/">Sublime Text</a> on your machine. It's a fantastic editor that works well on all three platforms, and well worth $70. Having the same interface on Mac, Windows and Linux was what first attracted me to Sublime, and after using it a while I do nearly everything in it. I naturally decided to use it for this experiment. It's not <a href="https://www.jetbrains.com/webstorm/">a true IDE like WebStorm</a> (which also runs on all three) but it will work great for what we're doing here.</p>

<h3>1. Getting Started</h3>

<p>First we need to get Mono and the K version manager set up. We can install this with Homebrew:</p>

<p><code>plain
brew tap aspnet/k
brew install kvm
</code></p>

<p>This will install K and pull down Mono if you don't have it installed. You will want to add a line to your .bashrc file:</p>

<p><code>plain
nano ~/.bashrc
</code></p>

<p>and add</p>

<p><code>plain
source kvm.sh
</code></p>

<p>and save it the file.</p>

<p>Next you'll want to install the K Runtime environment (KRE). To do that, you type in</p>

<p><code>plain
kvm upgrade
</code></p>

<p>You're now ready to start running ASP.NET vNext on your machine.</p>

<h3>2. Running a Sample App</h3>

<p>Just to try it out, let's run a sample application from the vNext GitHub.</p>

<p>create a project folder, and from the command line run</p>

<p><code>plain
git clone https://github.com/aspnet/Home.git
</code></p>

<p>Now let's go to /Home/samples/HelloWeb. You'll see a file in there called Startup.cs, let's open that up in Sublime.</p>

<p>It looks like this:</p>

<p>``` csharp
using Microsoft.AspNet.Builder;</p>

<p>namespace KWebStartup
{</p>

<pre><code>public class Startup
{
    public void Configure(IApplicationBuilder app)
    {
        app.UseStaticFiles();
        app.UseWelcomePage();
    }
}
</code></pre>

<p>}
```</p>

<p>As you can see, this is extremely simple file. It uses the IApplicationBuilder interface to build a simple app, and build a Welcome page.</p>

<p>Also we have a project.json file that's pretty important. You use this to configure the application and load in dependencies:</p>

<p>``` json
{</p>

<pre><code>"dependencies": {
    "Kestrel": "1.0.0-beta1",
    "Microsoft.AspNet.Diagnostics": "1.0.0-beta1",
    "Microsoft.AspNet.Hosting": "1.0.0-beta1",
    "Microsoft.AspNet.Server.WebListener": "1.0.0-beta1",
    "Microsoft.AspNet.StaticFiles": "1.0.0-beta1"
},
"commands": {
    "web": "Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5001",
    "kestrel": "Microsoft.AspNet.Hosting --server Kestrel --server.urls http://localhost:5004"
},
"frameworks": {
"aspnet50": {},
    "aspnetcore50": {}
}
</code></pre>

<p>}
```</p>

<p>Pretty straightforward stuff. To run our application we're going to need to pull in these packages, to do that run</p>

<p><code>plain
kpm restore
</code></p>

<p>Once you do that you'll see it start to pull down packages from NuGet for your application. Let's run the application. Since this a web app we'll use Kestrel to serve it,</p>

<p><code>plain
k kestrel
</code></p>

<p>You should see this:</p>

<p><img src="https://www.jeremymorgan.com/images/dotnet-on-mac/dotnet-on-mac-osx-1.jpg" alt="image" /></p>

<p>This means you have a server running. Load up a web browser and point it to: http://localhost:5004/</p>

<p><img src="https://www.jeremymorgan.com/images/dotnet-on-mac/dotnet-on-mac-osx-2.jpg" alt="image" /></p>

<p>ASP.NET vNext on your Mac Desktop! Pretty sweet, right? Actually you've been able to do this for about 6 months now, and it's not first class yet, but they're working on it every day.</p>

<h3>3. Set up Sublime Text for C# Coding.</h3>

<p>Now we're going to get Sublime Text set up for C#/ASP.Net development. First we'll install <a href="https://github.com/ligershark/Kulture">Kulture</a>, a Sublime extention for ASP.Net vNext.</p>

<ul>
<li>Bring up the Command Palette (Cmd + Shift + P)</li>
<li>Select Package Control: Install Package</li>
<li>Select Kulture when the list appears.</li>
</ul>


<p>With Kulture we'll be able to run K commands from within Sublime.</p>

<p>We're also going to install <a href="https://github.com/OmniSharp/omnisharp-sublime">OmniSharp</a> for Sublime.</p>

<ul>
<li>Bring up the Command Palette (Cmd + Shift + P)</li>
<li>Select Package Control: Install Package</li>
<li>Select OmniSharp when the list appears.</li>
</ul>


<p>With OmniSharp you can build, run and refactor C# code with vNext, within sublime. Check the <a href="https://github.com/OmniSharp/omnisharp-sublime">Readme</a> for more details.</p>

<p>Let's set our C# language-specific settings. (This is also outlined in the Readme)</p>

<p>Go to Sublime Text -> Preferences -> Settings - More -> Syntax Specific - User</p>

<p><img src="https://www.jeremymorgan.com/images/dotnet-on-mac/dotnet-on-mac-osx-3.jpg" alt="image" /></p>

<p>And paste in the following:</p>

<p>``` json</p>

<p> {</p>

<pre><code>"auto_complete": true,
"auto_complete_selector": "source - comment",
"auto_complete_triggers": [ {"selector": "source.cs", "characters": ".&lt;"} ],
</code></pre>

<p> }</p>

<p>```</p>

<p>Now, lets open up that startup.cs file we opened earlier (The sample web app)</p>

<p>Now open the command pallette (Cmd + Shift + P)</p>

<p>Type a "K" and you'll see "run k commands" come up.</p>

<p>You now see a list of selections:</p>

<p><img src="https://www.jeremymorgan.com/images/dotnet-on-mac/dotnet-on-mac-osx-4.jpg" alt="image" /></p>

<p>After a while, this will save you save you some time.</p>

<p>To get Intellisense working, you need to create a project file (again this is from the Readme)</p>

<p>To get intellisense with ASP.Net vNext projects you need to create a project file in Sublime. Go to Project - Save Project As and enter in a name for your project. OmniSharpSublime will use this to know what files and assemblies it needs to provide intellisense for (TIP : Close &amp; Re-Open Sublime if you do not see intellisense, it may take 10 secs for the intellisense server OmniSharpServer to start once Sublime has loaded all the plugins)</p>

<p>Once OmniSharpSublime is installed and you have a project file you should be able to see intellisense.</p>

<p>Hint: There's also a <a href="https://sublime.wbond.net/packages/C%23%20Snippets">C# Snippets Extension</a> worth looking at.</p>

<h3>4. Let's build a console app</h3>

<p>Here I will show you how to do a console application, and we'll do it a little differently. We're going to use the fantastic <a href="http://yeoman.io/">Yeoman generator</a> for this. If you've never used Yeoman you should try it out, it's pretty awesome.</p>

<p>This assumes you have Node.JS and NPM installed. If you don't, <a href="http://howtonode.org/how-to-install-nodejs">You can follow these quick steps here</a>.</p>

<p>So first we'll install the generator:</p>

<p><code>
npm install -g generator-aspnet
</code>
If you don't have Yeoman it will install it for you.</p>

<p>Then, we create a folder we want the project in, and type</p>

<p><code>
yo aspnet
</code></p>

<p>You'll be greeted with a screen like this:</p>

<p><img src="https://www.jeremymorgan.com/images/dotnet-on-mac/dotnet-on-mac-osx-5.png" alt="image" /></p>

<p>You can select between the types of application it can generate. Let's select Console Application. I named mine "HelloWorld" because I lack creativity today.</p>

<p>After it generates, you'll see it has created some files:</p>

<p><img src="https://www.jeremymorgan.com/images/dotnet-on-mac/dotnet-on-mac-osx-6.jpg" alt="image" /></p>

<p>These files should look pretty familiar, but we now have a global JSON config as well as our project config.</p>

<p>Modify this file a little if you want, and bring up the command pallete, type k to run K commands and select K run:</p>

<p><img src="https://www.jeremymorgan.com/images/dotnet-on-mac/dotnet-on-mac-osx-7.jpg" alt="image" /></p>

<p>Pretty cool huh? For some reason I've always been a huge fan of Console applications. I'm also a huge fan of C#. For years throughout my career I've built tons of awesome console apps, and the idea that soon I'll be able to build first class C# console apps in Linux is pretty exciting to me.</p>

<h3>Conclusion</h3>

<p>This is pretty exciting stuff for so many reasons. I am a fanboy of all three operating environments (Windows, OSX, Linux) depending on what I'm doing. When I'm working with Python, PHP, or JS stuff I really like working in Linux. When I'm building graphic intense web pages / CSS or video editing I use OSX. When I build .Net stuff I use Windows. My Mac is the most powerful machine I own, so the idea that I can soon build anything I want in that environment is pretty awesome to me. As I said C# is one of my favorite languages to work in, and the ASP.Net architecture is awesome for building larger websites. The idea that it's all coming together is awesome.</p>

<p>I'm just scratching the surface here, and this article focused on Web/Command Line stuff. But the Mobile development world is also being disrupted right now with work from the Xamarin Team, and vNext. The potential to develop great software has never been better, and it's a great time to be a developer.</p>

<p>I think it's great that Microsoft is "putting their money where their mouth is". There has been a lot of talk the last couple years about the ASP.NET team embracing open source, and they're taking a very serious approach to it. This is not a half hearted attempt at lip service, they're opening all of it, and they're working with everyone. In the end we as developers will be reaping the benefits from this latest push.</p>

<p>I'll create some more vNext stuff in the future and write about some of the "gotchas" I've already run into building stuff. The vNext stuff is not "first class" yet, but it will be soon. Stay tuned, and be sure to comment if you're working on any of this cutting edge stuff.</p>

<p><br />
<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I'm constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://www.feedblitz.com/f?sub=339769"><strong>get the programmer newsletter</strong></a> 100% spam free!
</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Great Unicorn Hunt]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/the-great-unicorn-hunt/"/>
    <updated>2014-10-08T20:04:00-07:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/the-great-unicorn-hunt</id>
    <content type="html"><![CDATA[<p>When talking with people in the Portland, Oregon tech scene I hear the same thing all the time. "We are always looking for developers. We are hiring and can't find anyone. If you know anyone looking....". Folks claim there are more jobs than developers in this town, but is that entirely accurate? Is it as bad as it seems?</p>

<!-- more -->


<h3>The Portland Tech Scene</h3>

<p>First I should probably tell you about my impressions of the Portland tech scene. It's not representative of the industry in general, nor is it even applicable to other parts of the country but merely my observation of what's happening here in Portland, Oregon.</p>

<p><img class="right" src="https://www.jeremymorgan.com/images/portland-tech.jpg" title="&#34;Portland Oregon Tech Scene&#34;" alt="&#34;Portland Oregon Tech Scene&#34;"></p>

<ul>
<li>We have a lot of talent here.</li>
<li>Our startup scene is exploding.</li>
<li>Our "Old school" businesses are thriving.</li>
<li>Companies are migrating here.</li>
<li>Innovation is happening here.</li>
<li>Both open source and proprietary system developers are in demand.</li>
</ul>


<p>All of these points are hard to argue and they point to a potential talent shortage, I don't argue that there is one. We're clearly in the middle of a bubble as well, like most of the world. But is it as bad as it seems? I don't think so.</p>

<p>I would argue that the talent shortage in Portland is not nearly what some people would make it out to be, and suspect it's like that in other parts of the country and even the world.</p>

<h3>Why can't you find good talent?</h3>

<p>If you ask most people around here why they can't find good talent, the answers are generally the same, depending on who you ask. The most common one of course is:</p>

<blockquote><p>There simply aren't enough developers in Portland.</p></blockquote>

<p>Which is not entirely true. There are lots of developers in Portland, and many of them are out of work, or freelancing. Here are some other more realistic reasons companies aren't finding developers:</p>

<ol>
<li>They aren't offering enough money (not always the company's fault)</li>
<li>The company environment sucks. (Not the recruiter's fault)</li>
<li>You have an idiot making the hiring decisions. (The company's fault)</li>
</ol>


<p>Out of all of these possibilities, which one do you think happens the most? I'm going to guess it's number 3, and I'll explain why.</p>

<p>I won't go into a lot of detail about the first two because there are companies that can't afford to offer programmers six figure salaries, so they pay what they can and attract whatever talent they can. There's not a lot they can do about it.</p>

<p>Company environment is another thing that's not something a recruiter or even manager can control much of the time, so they're stuck. If your environment sucks, you have to live with the fact that much of your talent will decline to work for you in this economy.</p>

<h3>Who is making the hiring decision?</h3>

<p>This is a big one, because it's something a company can control for very little cost. Many companies have what I call "Unicorn Hunters" and they're people who simply have unrealistic expectations about the person they're going to hire. They're looking for someone they are never going to find. Recruiters spend weeks or months looking for people, and spend enormous amounts of time and money looking for a "perfect candidate" while their competition is adding features to their website or product and leaving them in the dust.</p>

<p>Who makes the hiring decisions will greatly influence the results you get in any company, in any economy. But right now in Portland Oregon (and likely anywhere in the tech industry) this person holds the ultimate power over the bottom line. And this person could very well be an idiot, which is why you can't find the talent you're looking for.</p>

<h3>The types of unicorn hunters</h3>

<p>Here is a brief list of the type of people you shouldn't have hiring your developers. They shouldn't be making the final decision and their input probably shouldn't even be considered.</p>

<h4>1. The Brogrammer Manager</h4>

<p>Generally a manager who has never developed anything, or dabbled just enough that they think they know something about it. They are in the industry because "there's money there". This manager only hires cool, fashionable, sports loving, everyday average people like themselves. Has a hidden (or not so hidden) contempt for "nerds" and social outcasts. This manager will disregard a candidate's technical skill set, usually because they don't understand it anyway. Dismisses skilled candidates by saying they have poor social skills or won't fit in.</p>

<h4>2. Big Fish in a Small Pond</h4>

<p>This one is the top coder in the company or team who must stay that way. Anyone that could possibly steal their thunder or show them up in some way are shown the door quickly. They will usually come up with some silly tricks and puzzles to make the candidate seem aloof in front of the decision maker. Happens frequently with smaller companies and teams because they have convinced non technical management how irreplaceable they are.</p>

<p>The only way to truly overcome this one is by having them demonstrate things they've built, and see how it compares with what your company is working on.</p>

<h4>3. The Bullet Point Seeker</h4>

<p>This is the one who has a long list of bullet points, and every single one must be met. They have a long list of technologies that may not even be related, or used in your company. It doesn't matter that their list is so long no reasonable programmer could ever master them all in 4 careers, they just need every one checked off. These managers generally have a pedestrian knowledge of development in general and couldn't tell you a single thing about any of their bullet points.</p>

<h4>4. The Bigot</h4>

<p>This requires little explanation. These are the folks who still think talent and intelligence favor a certain race or gender. They'll spend the entire interview looking for a reason to disqualify a candidate that doesn't fit their profile, and veto them completely. This is just one of the reasons you should work to purge this person from your organization.</p>

<h4>5. The Hipster</h4>

<p>This is the manager who requires the developer to be just like them. If you don't have the tight flannel, skinny jeans, black rimmed glasses and taste in obscure music you won't be hired. This is very similar to the brogrammer manager, because they're just trying to find someone that mirrors themselves rather than looking at actual talent or ability. Certain companies that value their image will hire in this way, but should be aware of the fact that the quality and quantity of work may suffer for it. As long as you're willing to make that trade off, you're ok.</p>

<h4>6. The Gatekeeper</h4>

<p>All of the managers fit into this list, but there are some people who really take joy in becoming a gatekeeper. They pride themselves on how tough of an interviewer they are, and take joy in rejecting people. These people are a danger to your organization, and they're easy to spot. Did they want high fives after showing someone the door? Are they overjoyed at stumping people, or making disrespectful remarks about the person after they left? These are signs of a low self esteem and if someone bases their self worth on rejecting others, they shouldn't be allowed into the process because they are rejecting good candidates and harming your company.</p>

<h3>Conclusion</h3>

<p>This post just scratches the surface of some of the problems companies face in getting good talent. As I said, I do believe there is a talent shortage in development but I don't think it's quite as bad as some make it out to be. The important things I've learned in the last 10+ years of interviewing and hiring is this:</p>

<ul>
<li>The best candidates are passionate, and it's the first thing you should look for.</li>
<li>Years of experience and bullet points are not as important as you think they are.</li>
<li>Education level is not as important as you think it is.</li>
<li>Talent and intelligence are not limited to a single race or gender.</li>
<li>Personality fit is very important, but should not be the only criteria.</li>
<li>Trivia questions and puzzles are ineffective.</li>
<li>Make them show you instead of tell you.</li>
<li>You are going to have bad hires. If it becomes a trend, re-evaluate what you're doing.</li>
</ul>


<p>This is a small summary of my experience, but one of the best books I've ever read on hiring is a quick read, and well worth it. It's called <a href="http://amzn.to/1tnlmc3" target="_blank">Smart and Gets Things Done: Joel Spolsky's Concise Guide to Finding the Best Technical Talent</a>. If you're reading this blog and you're any kind of a programmer you already know who Joel Spolsky is. He covers some great theories in this book and will open your eyes and get you to look into your hiring process a bit more.</p>

<p>Also, if you live in the Portland, Oregon area (or want to move here) and you're looking to change careers, there is one company who I recommend you talk to. They are <a href="http://www.itmotives.com/" target="_blank">IT Motives</a>, and they have some of the best gigs in town, whether it's contract or full time. It's run by a group of people I know personally who have passion and integrity that can't be matched. <a href="http://www.itmotives.com/open-positions" target="_blank">Check out some of their open positions</a>.</p>

<p><br />
<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I'm constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://www.feedblitz.com/f?sub=339769"><strong>get the programmer newsletter</strong></a> 100% spam free!
</div></p>
]]></content>
  </entry>
  
</feed>
