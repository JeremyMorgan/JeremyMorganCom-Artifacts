<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jeremy's Programming Blog]]></title>
  <link href="https://www.jeremymorgan.com/atom.xml" rel="self"/>
  <link href="https://www.jeremymorgan.com/"/>
  <updated>2019-02-27T04:15:33+00:00</updated>
  <id>https://www.jeremymorgan.com/</id>
  <author>
    <name><![CDATA[Jeremy Morgan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using DISM to Create a Repeatable IIS Installation]]></title>
    <link href="https://www.jeremymorgan.com/blog/iis-devops/how-to-dism-repeatable-iis-install/"/>
    <updated>2018-09-28T23:20:00+00:00</updated>
    <id>https://www.jeremymorgan.com/blog/iis-devops/creating-a-repeatable-iis-install</id>
    <content type="html"><![CDATA[<p>Repeatable installs are all the rage in Devops these days. As developers we have this &#8220;automate everything&#8221; mentality, and for good reason. In this article I&#8217;ll show you how you can do that with IIS installation as well. There&#8217;s no reason to go hunting and pecking around the GUI every time you need to do this. This is the just one of many ways to automate IIS installs, which I&#8217;ll be covering in the next few weeks.</p>

<p>I also cover this in depth in <a href="https://pluralsight.pxf.io/c/1221983/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Finstalling-configuring-iis" target="_blank">my latest Pluralsight course</a> on Installing IIS.</p>

<h3>Why would I ever need to do this?</h3>

<p><img class="right" src="https://www.jeremymorgan.com/images/repeatable-iis-devops/repeatable-iis-devops.jpg" title="&#34;How To Create Repeatable Installs in IIS&#34;" alt="&#34;How To Create Repeatable Installs in IIS&#34;"></p>

<p>Most of the time administrators probably have a task like &#8220;throw IIS on the server and make sure the application works&#8221; and they do just that. That&#8217;s how I used to do it too. I was working on a project many years ago that required us to spin up VM servers on a virtual network as a &#8220;stack&#8221;.</p>

<p>This stack was a small snapshot of our production network, so to make sure our software worked with everyone&#8217;s updates, we had to build a new stack a few times a week.</p>

<p>A few times a week, we&#8217;d have to click through the GUI install and remember each box to check. Yeah, you can get good at it but it&#8217;s a waste of time.</p>

<p>Naturally I had to find a way to automate it, and break out some PowerShell. You do this, because you save time that can be spent doing fun stuff. So let&#8217;s learn how to create automated, repeatable IIS installations.</p>

<h3>Getting Started</h3>

<p>So you&#8217;re an administrator for ACME Widgets and you want to create a custom install of IIS and make it automated. You create a new server and are ready to go.</p>

<p>To find out if IIS is installed, we&#8217;ll run a command called <a href="https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/what-is-dism" target="_blank">DISM</a>. DISM is a tool to build and service Windows images, it&#8217;s mostly used to create and maintain images for Virtual Machines, it&#8217;s extremely powerful, but we&#8217;ll cover that in a future article. For now we&#8217;ll use it to check features on the machine.</p>

<p>Open up a command prompt, and run the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dism /online /get-featureinfo /featurename:IIS-WebServer </span></code></pre></td></tr></table></div></figure>


<p>As I run it on my virtual machine, I can see that IIS is not yet installed.</p>

<p><img src="https://www.jeremymorgan.com/images/repeatable-iis-devops/repeatable-iis-devops-01.jpg" alt="Repeatable Installs in IIS" /></p>

<p>You can also find a list of everything that&#8217;s enabled with this command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DISM /online /get-features /format:table | find "Enabled"</span></code></pre></td></tr></table></div></figure>


<p>And you&#8217;ll see something like this:</p>

<p><img src="https://www.jeremymorgan.com/images/repeatable-iis-devops/repeatable-iis-devops-02.jpg" alt="Repeatable Installs in IIS" /></p>

<p>by piping the output into find and searching for enabled we can get a full list of features that are already enabled on the server.</p>

<p>We can also quickly see if a single feature is enabled like we did before, but piping the results into find and checking the state:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dism /online /get-featureinfo /featurename:IIS-WebServer | find "State"</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.jeremymorgan.com/images/repeatable-iis-devops/repeatable-iis-devops-03.jpg" alt="Repeatable Installs in IIS" /></p>

<p>Here we can quickly and clearly see IIS is not installed.</p>

<h3>Creating a Batch File</h3>

<p>So now that we know we can get this type of output, we&#8217;re going to build a little batch file to do it, and we&#8217;ll run the command a little different this time. This is pretty light programming, but it will be a set of tests to see if particular items are installed.</p>

<p>Type in notepad webinstall.bat and let&#8217;s create a batch file. Add the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@ECHO OFF
</span><span class='line'>dism /online /get-featureinfo /featurename:IIS-WebServer | find "State : Disabled" &gt; nul</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re typing in dism, online, get-featureinfo, featurename, then piping that to find. We&#8217;ll look for state saying disabled, and if that phrase is found, that means IIS is disabled, or not installed. That will change our error level, which we&#8217;ll add next.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if %ERRORLEVEL% == 0 (
</span><span class='line'>echo "IIS Web Server is not installed"
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>If our error level is set to zero, that means the phrase state enabled was found in our output. Let&#8217;s test it out.</p>

<p><img src="https://www.jeremymorgan.com/images/repeatable-iis-devops/repeatable-iis-devops-04.jpg" alt="Repeatable Installs in IIS" /></p>

<p>Now in our batch file we can see that IIS is not installed, and we have a block inside the statement to install IIS.</p>

<p>We could do that with a block of code like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if %ERRORLEVEL% == 0 (
</span><span class='line'>echo "IIS Web Server is not installed"
</span><span class='line'>dism /online /enable-feature /featurename:IIS-WebServer /all
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>This is the first basic IIS install script. At the end we can put a check to see if it&#8217;s installed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dism /online /get-featureinfo /featurename:IIS-WebServer | find "State"</span></code></pre></td></tr></table></div></figure>


<p>The finished batch file <a href="https://gist.github.com/JeremyMorgan/5f5ca70db82bd645d891c1aedd4e1d2b" target="_blank">is available here</a>.</p>

<h3>Running the Script</h3>

<p>Now after we run the file, it should do the following set of steps:</p>

<ul>
<li>Check to see if IIS is installed</li>
<li>If it&#8217;s not installed, install it</li>
<li>Check again to see if it&#8217;s installed.</li>
</ul>


<p>So the end result is, if IIS is installed it does nothing, if it&#8217;s not installed then adds it, and looks like this:</p>

<p><img src="https://www.jeremymorgan.com/images/repeatable-iis-devops/repeatable-iis-devops-05.jpg" alt="Repeatable Installs in IIS" /></p>

<p>This small, simple script can make sure IIS is installed on the machine. And it&#8217;s repeatable.</p>

<h3>Customizing the Install</h3>

<p>Of course as you&#8217;re building your script, you may need to install other IIS modules, chances are it won&#8217;t be just a plain IIS install.</p>

<p>If you run the following command, you can see everything related to IIS that can be installed here:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dism /online /get-features | find "IIS"</span></code></pre></td></tr></table></div></figure>


<p>This is a good way to get a list of IIS features available:</p>

<p><img src="https://www.jeremymorgan.com/images/repeatable-iis-devops/repeatable-iis-devops-06.jpg" alt="Repeatable Installs in IIS" /></p>

<p>So, if you&#8217;d like to add more IIS features, it&#8217;s as easy as making more loops to check for them:</p>

<p>ASP.NET:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dism /online /get-featureinfo /featurename:IIS-ASPNET45 | find "State : Disabled" &gt; nul
</span><span class='line'>
</span><span class='line'>if %ERRORLEVEL% == 0 (
</span><span class='line'>echo "ASPNET is not installed. We should install it."
</span><span class='line'>dism /online /enable-feature /featurename:IIS-ASPNET45 /all
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>HTTP Redirect:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dism /online /get-featureinfo /featurename:IIS-HttpRedirect | find "State : Disabled" &gt; nul
</span><span class='line'>
</span><span class='line'>if %ERRORLEVEL% == 0 (
</span><span class='line'>echo "HTTP Redirect is not installed . We should install it."
</span><span class='line'>dism /online /enable-feature /featurename:IIS-HttpRedirect /all
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>HTTP Logging:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dism /online /get-featureinfo /featurename:IIS-HttpLogging | find "State : Disabled" &gt; nul
</span><span class='line'>
</span><span class='line'>if %ERRORLEVEL% == 0 (
</span><span class='line'>echo "HTTP Logging is not installed . We should install it."
</span><span class='line'>dism /online /enable-feature /featurename:IIS-HttpLogging /all
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>You get the idea. You can build a custom installation that can be run from a batch file, quickly and easily.</p>

<h3>Conclusion</h3>

<p>So now you&#8217;re set to create a neat little batch file you can run on any machine to install IIS to 100 different VMs if you want to. You can put this on an Azure stack, or run it on a development machine. As I stated I cover this and many other repeatable installations in <a href="https://pluralsight.pxf.io/c/1221983/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Finstalling-configuring-iis" target="_blank">my latest course on Pluralsight</a>. It covers ways to effectively install IIS at a large scale.</p>

<p>You can even run DISM remotely or on VM Images that aren&#8217;t even booted. It&#8217;s a great tool to get to know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing with dotnet core]]></title>
    <link href="https://www.jeremymorgan.com/tutorials/c-sharp/how-to-net-core-unit-test/"/>
    <updated>2018-03-29T23:48:00+00:00</updated>
    <id>https://www.jeremymorgan.com/tutorials/c-sharp/unit-testing-with-dotnet-core</id>
    <content type="html"><![CDATA[<p>So you&#8217;ve just started building .Net Core applications and really starting to gain some traction. You quickly learn how mature and thorough the .Net Core framework is becoming and think &#8220;I need to start writing some unit tests for this!&#8221;. As it turns out, it&#8217;s super easy and very intuitive, especially for C# developers.</p>

<!-- more -->


<blockquote><p>Note: I cover this topic and many others in my course, <a href="https://www.udemy.com/hands-on-asp-net-core-2/?couponCode=JMDOTCOMTUTORIAL" target="_blank"><strong>Hands on .Net Core</strong></a> at Udemy. Check it out!</p></blockquote>

<p>So let&#8217;s walk through building Unit Tests for .Net core apps.</p>

<h2>Let&#8217;s Build a Class Library</h2>

<p>For this tutorial we&#8217;ll build a simple class library called &#8220;string modifier&#8221;. As the name suggests, it will be used to modify strings. We&#8217;ll use the .NET Core CLI to create a new class library.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dotnet new classlib -o stringModifier </span></code></pre></td></tr></table></div></figure>


<p>You should see something that looks like this:</p>

<p><img src="https://www.jeremymorgan.com/images/how-to-unit-testing-net-core/how-to-unit-testing-net-core-01.jpg" alt="How to Unit Testing .Net Core" /></p>

<p>This uses the dotnet CLI to create a new class library in the folder named stringModifier. It creates an application that is essentially just a basic class. We&#8217;re going to name this something a bit more useful though.</p>

<p>rename your class to ChangeMyString. It should look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">using</span> <span class="n">System</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="n">stringModifier</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">class</span> <span class="n">ChangeMyString</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re going to create a library that modifies strings for us, so let&#8217;s add a couple methods to our string modifier library.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="k">static</span> <span class="n">string</span> <span class="nf">makeAllUppercase</span><span class="p">(</span><span class="n">string</span> <span class="n">inputString</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">inputString</span><span class="p">.</span><span class="n">ToUpper</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method will make any string you send it all uppercase.</p>

<p>The next method will reverse a string:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="k">static</span> <span class="n">string</span> <span class="nf">makeReverse</span><span class="p">(</span><span class="n">string</span> <span class="n">inputString</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">char</span><span class="p">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">inputString</span><span class="p">.</span><span class="n">ToCharArray</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Array</span><span class="p">.</span><span class="n">Reverse</span><span class="p">(</span><span class="n">arr</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">new</span> <span class="n">string</span><span class="p">(</span><span class="n">arr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now these are obviously for demo purposes and easy to see what they do, but let&#8217;s do a quick smoke test with them.</p>

<p>Let&#8217;s make sure the application builds. Run the following in the folder your project is located in:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dotnet build</span></code></pre></td></tr></table></div></figure>


<p>It should look like this:</p>

<p><img src="https://www.jeremymorgan.com/images/how-to-unit-testing-net-core/how-to-unit-testing-net-core-02.jpg" alt="How to Unit Testing .Net Core" /></p>

<p>And we can go into our BIN folder and verify the artifacts were generated:</p>

<p><img src="https://www.jeremymorgan.com/images/how-to-unit-testing-net-core/how-to-unit-testing-net-core-03.jpg" alt="How to Unit Testing .Net Core" /></p>

<p>Now you&#8217;re ready to go.</p>

<h2>Smoke Test</h2>

<p>Let&#8217;s build a quick console application that calls the class library just to do a quick visual test of functionality. Exit out of the project folder, and we want to use the dotnet CLI to create a runner for this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dotnet new console - smrunner</span></code></pre></td></tr></table></div></figure>


<p>This will create a simple &#8220;hello world&#8221; application for us. Open up Project.cs and add the following using:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>using stringModifier;</span></code></pre></td></tr></table></div></figure>


<p>then add the following into the Main method:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Hello World!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">ChangeMyString</span><span class="p">.</span><span class="n">makeAllUppercase</span><span class="p">(</span><span class="s">&quot;Hello World!&quot;</span><span class="p">));</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">ChangeMyString</span><span class="p">.</span><span class="n">makeReverse</span><span class="p">(</span><span class="s">&quot;Hello World!&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>The entire method should look this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">using</span> <span class="n">System</span><span class="p">;</span>
</span><span class='line'><span class="n">using</span> <span class="n">stringModifier</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="n">smrunner</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">class</span> <span class="n">Program</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">static</span> <span class="kt">void</span> <span class="n">Main</span><span class="p">(</span><span class="n">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Hello World!&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">ChangeMyString</span><span class="p">.</span><span class="n">makeAllUppercase</span><span class="p">(</span><span class="s">&quot;Hello World!&quot;</span><span class="p">));</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">ChangeMyString</span><span class="p">.</span><span class="n">makeReverse</span><span class="p">(</span><span class="s">&quot;Hello World!&quot;</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, back at the command line, let&#8217;s add a reference to our class library:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dotnet add reference "../stringModifer/stringModifier.csproj"</span></code></pre></td></tr></table></div></figure>


<p>This will add the reference to the class library automatically. You could also manually put in the following in the .csproj file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ItemGroup&gt;
</span><span class='line'>    &lt;ProjectReference Include="..\stringModifier\stringModifier.csproj" /&gt;
</span><span class='line'>&lt;/ItemGroup&gt;</span></code></pre></td></tr></table></div></figure>


<p>Either way is fine. Now we&#8217;re ready to run it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dotnet run</span></code></pre></td></tr></table></div></figure>


<p>You should see something that looks like this:</p>

<p><img src="https://www.jeremymorgan.com/images/how-to-unit-testing-net-core/how-to-unit-testing-net-core-04.jpg" alt="How to Unit Testing .Net Core" /></p>

<p>Now we can verify that the methods work as we expect them to. But we&#8217;ll add some unit tests to be sure.</p>

<blockquote><p>Remember: Unit tests are not just to check the individual functionality of a method. They also check the functionality does not change when other parts of the application change. This is part of what makes them so important.</p></blockquote>

<h2>Building the Unit Tests</h2>

<p>Let&#8217;s build a separate project for the unit tests. This is the project you&#8217;ll run after a build, or preferably automatically on a build server every time you deploy.</p>

<p>Exit out of the directory you were just in and let&#8217;s use the dotnet CLI to create yet another project. This will be an MSTEST Unit Test project.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dotnet new mstest -o libraryTester</span></code></pre></td></tr></table></div></figure>


<p>This creates a unit test project in the libraryTester directory. Now we open up UnitTest1.cs, and this should look really familiar to you if you&#8217;ve built unit tests before. This looks identical to tests in conventional .Net.</p>

<p><img src="https://www.jeremymorgan.com/images/how-to-unit-testing-net-core/how-to-unit-testing-net-core-05.jpg" alt="How to Unit Testing .Net Core" /></p>

<p>So let&#8217;s add a couple tests.</p>

<p>First we need to add a using statement to include the library.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>using stringModifier;</span></code></pre></td></tr></table></div></figure>


<p>The first tests we want to run are to make sure the test method returns a string. Now we know the return type of these methods, but we want to make a test to catch it if everyone ever changes that:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
</span><span class='line'><span class="n">public</span> <span class="kt">void</span> <span class="n">TestMUCReturnsString</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">sample</span> <span class="o">=</span> <span class="s">&quot;Test String&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">IsInstanceOfType</span><span class="p">(</span><span class="n">ChangeMyString</span><span class="p">.</span><span class="n">makeAllUppercase</span><span class="p">(</span><span class="n">sample</span><span class="p">),</span> <span class="n">typeof</span><span class="p">(</span><span class="n">string</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
</span><span class='line'><span class="n">public</span> <span class="kt">void</span> <span class="n">TestMRReturnsString</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">sample</span> <span class="o">=</span> <span class="s">&quot;Test String&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">IsInstanceOfType</span><span class="p">(</span><span class="n">ChangeMyString</span><span class="p">.</span><span class="n">makeReverse</span><span class="p">(</span><span class="n">sample</span><span class="p">),</span> <span class="n">typeof</span><span class="p">(</span><span class="n">string</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we want to test the actual functionality of the methods. So we have a couple test cases here to do that.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
</span><span class='line'><span class="n">public</span> <span class="kt">void</span> <span class="n">TestMakeAllUppercase</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">sample</span> <span class="o">=</span> <span class="s">&quot;Test String&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">ChangeMyString</span><span class="p">.</span><span class="n">makeAllUppercase</span><span class="p">(</span><span class="n">sample</span><span class="p">),</span> <span class="s">&quot;TEST STRING&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
</span><span class='line'><span class="n">public</span> <span class="kt">void</span> <span class="n">TestMakeReverse</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">sample</span> <span class="o">=</span> <span class="s">&quot;Test String&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">ChangeMyString</span><span class="p">.</span><span class="n">makeReverse</span><span class="p">(</span><span class="n">sample</span><span class="p">),</span> <span class="s">&quot;gnirtS tseT&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now what we are doing here is asserting what we expect the method to return, and then inserting test string in the method to see if it matches what we expect.</p>

<p>This is what the final file should look like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">using</span> <span class="n">Microsoft</span><span class="p">.</span><span class="n">VisualStudio</span><span class="p">.</span><span class="n">TestTools</span><span class="p">.</span><span class="n">UnitTesting</span><span class="p">;</span>
</span><span class='line'><span class="n">using</span> <span class="n">stringModifier</span><span class="p">;</span>
</span><span class='line'><span class="n">namespace</span> <span class="n">libraryTester</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">TestClass</span><span class="p">]</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">class</span> <span class="n">UnitTest1</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
</span><span class='line'>        <span class="n">public</span> <span class="kt">void</span> <span class="n">TestMUCReturnsString</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">string</span> <span class="n">sample</span> <span class="o">=</span> <span class="s">&quot;Test String&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">IsInstanceOfType</span><span class="p">(</span><span class="n">ChangeMyString</span><span class="p">.</span><span class="n">makeAllUppercase</span><span class="p">(</span><span class="n">sample</span><span class="p">),</span> <span class="n">typeof</span><span class="p">(</span><span class="n">string</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
</span><span class='line'>        <span class="n">public</span> <span class="kt">void</span> <span class="n">TestMRReturnsString</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">string</span> <span class="n">sample</span> <span class="o">=</span> <span class="s">&quot;Test String&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">IsInstanceOfType</span><span class="p">(</span><span class="n">ChangeMyString</span><span class="p">.</span><span class="n">makeReverse</span><span class="p">(</span><span class="n">sample</span><span class="p">),</span> <span class="n">typeof</span><span class="p">(</span><span class="n">string</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
</span><span class='line'>        <span class="n">public</span> <span class="kt">void</span> <span class="n">TestMakeAllUppercase</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">string</span> <span class="n">sample</span> <span class="o">=</span> <span class="s">&quot;Test String&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">ChangeMyString</span><span class="p">.</span><span class="n">makeAllUppercase</span><span class="p">(</span><span class="n">sample</span><span class="p">),</span> <span class="s">&quot;TEST STRING&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
</span><span class='line'>        <span class="n">public</span> <span class="kt">void</span> <span class="n">TestMakeReverse</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">string</span> <span class="n">sample</span> <span class="o">=</span> <span class="s">&quot;Test String&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">ChangeMyString</span><span class="p">.</span><span class="n">makeReverse</span><span class="p">(</span><span class="n">sample</span><span class="p">),</span> <span class="s">&quot;gnirtS tseT&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>These are some pretty basic tests, but should be good for now. Let&#8217;s try it out.</p>

<p>Now we&#8217;re in the library tester folder, and In order to build this, we&#8217;ll have to add a reference again.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dotnet add reference "../stringModifier/stringModifier.csproj"</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s test the build.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dotnet build</span></code></pre></td></tr></table></div></figure>


<p>It looks like we don&#8217;t have any failures here so we should be good to go.</p>

<p>To run the tests we&#8217;ll type in</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dotnet test</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.jeremymorgan.com/images/how-to-unit-testing-net-core/how-to-unit-testing-net-core-06.jpg" alt="How to Unit Testing .Net Core" /></p>

<p>And our tests are successful! We can see that 4 tests were run and everything is green.</p>

<p>Now, let&#8217;s break a test just to see what that looks like.</p>

<p>Let&#8217;s go back to our original library. Change this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="k">static</span> <span class="n">string</span> <span class="nf">makeAllUppercase</span><span class="p">(</span><span class="n">string</span> <span class="n">inputString</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">inputString</span><span class="p">.</span><span class="n">ToUpper</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>to this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="k">static</span> <span class="n">string</span> <span class="nf">makeAllUppercase</span><span class="p">(</span><span class="n">string</span> <span class="n">inputString</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">inputString</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s refactor the method to pass through the string instead of making it upper case. Save it and build it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dotnet build</span></code></pre></td></tr></table></div></figure>


<p>And go back into our library tester folder, and run a test again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dotnet test</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.jeremymorgan.com/images/how-to-unit-testing-net-core/how-to-unit-testing-net-core-07.jpg" alt="How to Unit Testing .Net Core" /></p>

<p>And now we have a failure. As you can see by the splash of red on the screen it threw an error. It expected test string to be in all caps, and it&#8217;s not.</p>

<p>This is a great feature of unit tests, if some yahoo goes in and refactors something and breaks the functionality, your test will pick it up right away.</p>

<p>This is how easy it is to build unit tests in .NET Core!!</p>

<h2>Conclusion</h2>

<p>Unit tests are super important. I&#8217;m not going to use this tutorial as a lecture, but they&#8217;re well worth your time and too frequently overlooked. Just because you&#8217;re developing .NET Core apps doesn&#8217;t mean they can&#8217;t be unit tested, MSTEST seems to work very well with everything I&#8217;ve done with it so far. So do it!!</p>

<p>And as I mentioned I cover this and many other topics in my course, <a href="https://www.udemy.com/hands-on-asp-net-core-2/?couponCode=JMDOTCOMTUTORIAL" target="_blank"><strong>Hands on .NET Core at Udemy</strong></a>. Click the link to check it out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set up easy file sharing with Samba]]></title>
    <link href="https://www.jeremymorgan.com/blog/linux/how-to-file-sharing-samba/"/>
    <updated>2018-03-18T14:43:00+00:00</updated>
    <id>https://www.jeremymorgan.com/blog/linux/set-up-easy-file-sharing-with-samba</id>
    <content type="html"><![CDATA[<p>In this tutorial, I&#8217;ll show you how easy it is to setup file sharing on your network using SAMBA. You can easily share files between Linux and Windows machines with a pretty minimal amount of setup.</p>

<!-- more -->


<h3>How I&#8217;m Using SAMBA File Sharing</h3>

<p>First, to give you little context, here&#8217;s how I am using Samba file sharing, with something I recently set up for course development.</p>

<p><img src="https://www.jeremymorgan.com/images/how-to-file-sharing-samba/how-to-file-sharing-samba-01.jpg" alt="How to setup file sharing with SAMBA" /></p>

<p>So I am developing courses and using a variety of Operating Systems for it. One course in progress is Windows related and I&#8217;m using Windows 2012 and 2016 Server machines. For another course I&#8217;m working on I&#8217;m using a variety of Linux machines. I&#8217;m spinning up multiple virtual machines with a fresh OS to demonstrate configuration and modification, then destroying them.</p>

<h3>Workstation</h3>

<p>I have my workstation that I record with (my trusted Mac Mini), and I use Windows or OSX and run things like Camtasia, Final Cut Pro, Audio Tools, Photoshop, PowerPoint etc. I have a dual monitor setup and I use RDP to connect to a server, and use a full screen on one Monitor and have my recording tools on the other.</p>

<h3>Virtualization</h3>

<p>I&#8217;m using a server to run headless virtual machines <a href="https://www.jeremymorgan.com/tutorials/devops/virtualization-with-virtual-box/" target="_blank">that I described in this article</a>. The sole purpose of this machine is to run these virtual machines and I want to dedicate as many resources as I can to it, because it runs several at one time.</p>

<p>I ran into an issue where i had a huge folder full of ISO images for each operating System. Combined with the disk space used by the virtual machines themselves, I decided I had to split it off.</p>

<br />


<p><img src="https://www.jeremymorgan.com/images/how-to-file-sharing-samba/how-to-file-sharing-samba-02.jpg" alt="How to set up file sharing with SAMBA" /></p>

<h3>File Server</h3>

<p>I found an old machine I wasn&#8217;t using and decided to drop a hard drive in it, and turn it into a file server. With an i3 and 4 gigs of RAM it&#8217;s plenty fast. I decided to go with a minimal install of CENTOS an install SAMBA on it.</p>

<h3>Workflow</h3>

<p>So now I can ssh into my server and run commands to spin up the various virtual machines I need to run, and I have space to create many more. I have the installation ISOS residing on the file share server, which is mounted on the VM server. So to create a new virtual machine, I can just mount an ISO, run the installer and go, and create fresh new machines as needed.</p>

<p>If I see some cool distribution of Linux I just have to try, I can download the installer ISO with my workstation to the shared folder, then build a vm to install from the ISO.</p>

<p>It&#8217;s not redundant or secured tightly, but it&#8217;s all stuff I can download from MSDN or the internet to replace anyway. This is one of my uses for a Samba server.</p>

<p>Now, let&#8217;s get to the tutorial.</p>

<h2>How to Set Up File Sharing with Samba</h2>

<p>Here&#8217;s how you can set up a file server with Samba. For this I am using <a href="https://www.centos.org/" target="_blank">CentOS</a> Linux, but it&#8217;s very similar for most Linux distributions.</p>

<p>I&#8217;ve created an account named jeremy that will be used for serving files. You never want to run this kind of stuff under the root account.  So I&#8217;ll log in with the Jeremy account, and use sudo to run any commands that require administrative rights.</p>

<p>In a fresh install of CentOS you will need to <a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-sudo-user-on-centos-quickstart" target="_blank">add this account to the sudoers file</a>.</p>

<h3>Install Samba</h3>

<p>First we&#8217;ll need to install Samba.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo yum install samba samba-client samba-common</span></code></pre></td></tr></table></div></figure>


<p>Now we want to create a new folder for our file share. This is where the files will be stored that we&#8217;re sharing.</p>

<p>Then we&#8217;ll change the permissions on this share</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p /srv/samba/secure
</span><span class='line'>sudo chmod -R 0770 /srv/samba/secure
</span><span class='line'>sudo chown -R root:smbgrp /srv/samba/secure
</span><span class='line'>sudo chcon -t samba_share_t /srv/samba/secure</span></code></pre></td></tr></table></div></figure>


<h3>Add Samba User Group</h3>

<p>Next we&#8217;ll add the Samba user group. Then you&#8217;ll want to add a user to that group.
You want to make sure this is an existing user on your machine, for this I used the Jeremy account I created the folder with.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>groupadd smbgrp
</span><span class='line'>usermod jeremy -aG smbgrp</span></code></pre></td></tr></table></div></figure>


<p>Next, you want to add the Samba user, which should be the same as the account you&#8217;re using (in my case, jeremy).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo smbpasswd -a jeremy</span></code></pre></td></tr></table></div></figure>


<p>it will ask you for your password. This will be the password for the Samba share, and you can put in your existing user password here.</p>

<h3>Edit Smb.conf</h3>

<p>Next we want to edit our smb.conf. Make a quick backup of the file</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo cp /etc/samba/smb.conf /etc/samba/smb.bak</span></code></pre></td></tr></table></div></figure>


<p>Now, let&#8217;s edit the file</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo vi /etc/samba/smb.conf</span></code></pre></td></tr></table></div></figure>


<p>First I&#8217;m going to change the name of my workgroup to WORKGROUP in all caps. this is the name of my windows workgroup.</p>

<p>Here we have homes which are home folders for each user if you&#8217;d like to use those</p>

<p>Let&#8217;s create a share that points to where we just created a folder.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[fileshare]
</span><span class='line'>    comment= my file share
</span><span class='line'>    path = /srv/samba/secure
</span><span class='line'>    valid users = jeremy
</span><span class='line'>    public = no
</span><span class='line'>    writable = yes
</span><span class='line'>    browsable = yes
</span><span class='line'>    printable = no
</span><span class='line'>    create mask = 0765</span></code></pre></td></tr></table></div></figure>


<h3>Start Service</h3>

<p>You want to test your configuration changes to make sure everything is correct.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>testparm</span></code></pre></td></tr></table></div></figure>


<p>Then, it&#8217;s time to restart the smb and nmb services:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo systemctl restart smb.service
</span><span class='line'>sudo systemctl restart nmb.service</span></code></pre></td></tr></table></div></figure>


<h3>Firewall</h3>

<p>We&#8217;ll have to add an entry to the firewall to allow the samba service to be accessible from outside the network:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>firewall-cmd --permanent --zone=public --add-service=samba
</span><span class='line'>firewall-cmd --reload</span></code></pre></td></tr></table></div></figure>


<h3>Browsing</h3>

<p>Now, we can browse to the server from a Windows machine:<br /></p>

<div style="display: block; margin-left: auto; margin-right: auto;">

<img src="https://www.jeremymorgan.com/images/how-to-file-sharing-samba/how-to-file-sharing-samba-03.jpg" alt="How to file sharing with Samba" />

</div>


<br />


<p>You can even mount it as a mapped drive, or <a href="https://wiki.samba.org/index.php/Mounting_samba_shares_from_a_unix_client" target="_blank">mount it on a linux machine</a>. Samba setup is super easy, and great to use.</p>

<h2>Conclusion</h2>

<p>Setting up Samba is easy, and something to consider if you want easy file sharing between Linux and Windows machines, or even Linux and Linux machines. I gave some context of how to set it up, but there are tons of use cases for Samba. You can also tie it in to different authentication/authorization schemes if you&#8217;d like an use it with Active Directory as well. Check out <a href="https://www.samba.org/" target="_blank">Samba.org</a> for more information.</p>

<p>I also created a video tutorial for this:</p>

<br />


<iframe width="560" height="315" src="https://www.youtube.com/embed/JT0Y0VUP7T4" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


<br />


<p>Subscribe to <a href="https://www.youtube.com/channel/UCAR4QD5vqpn4LFrrBiDe7lQ" target="_blank">my channel on YouTube</a> for more tutorials!</p>

<br />



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows to Go with the Spyrus USB Drive]]></title>
    <link href="https://www.jeremymorgan.com/blog/devops/windows-to-go-usb-drive/"/>
    <updated>2018-03-12T15:04:00+00:00</updated>
    <id>https://www.jeremymorgan.com/blog/devops/windows-to-go-with-the-spyrus-usb-drive</id>
    <content type="html"><![CDATA[<p>What we need is a good bootable live USB stick for Windows. I&#8217;ve said this many times over the years, and hacked together things to make that very thing happen, but nothing that worked really well. So when the folks at Spyrus sent me a Windows to Go USB to check out, I was pretty excited.</p>

<!-- more -->


<br />


<div style="display: block; margin-left: auto; margin-right: auto;">

<img src="https://www.jeremymorgan.com/images/windows-to-go-usb/windows-to-go-01.jpg" alt="Windows to go live drives" />

</div>


<p><em>Spyrus Windows to Go Live Drive - <a href="https://www.spyrus.com/windows-to-go-live-drives/">More details here</a></em></p>

<h3>What is a Live USB?</h3>

<p>Live USB drives and DVDs have been around for years, they&#8217;re simply an operating system stored on a device and you boot from that device instead of your hard drive. Usually when you turn your PC on, it seeks out different areas to grab an operating system, so if you direct it to a live device, the computer is being controlled from the USB drive.</p>

<p>You don&#8217;t even need a hard drive to run, and if you have a hard drive in the computer you can mount it as a secondary drive and perform work on it. This is the big advantage to this setup, you can retrieve files or work on files when:</p>

<ul>
<li>The computer has a virus</li>
<li>The computer has malware</li>
<li>The OS has failed</li>
<li>The hard drive won&#8217;t boot</li>
</ul>


<p>Under these circumstances you can boot to a USB drive and use that to run the machine while you figure out what&#8217;s wrong. You don&#8217;t have to use the corrupted/broken/virus-ridden operating system on the computer. It&#8217;s a great for fixing things.</p>

<p>They&#8217;ve been doing this with Linux for years. It&#8217;s an extremely simple concept but the execution is pretty difficult, especially with Windows. Traditionally Microsoft did not want you to do this, and there were several obstacles preventing it. The Spyrus drive takes care of making it happen, and their work has proven successful.</p>

<h3>Other Advantages to a Live USB Drive</h3>

<div style="float:right; overflow: auto; margin: 5px;">
<img src="https://www.jeremymorgan.com/images/windows-to-go-usb/windows-to-go-03.jpg" alt="Windows to go live drives" />
</div>


<p>Fixing broken machines aren&#8217;t the only use of a live drive. You can get a live drive setup with all the applications you need to work with, your files and configurations. Theoretically you could plug this into any machine and get to work.</p>

<p>There&#8217;s also a good security use, you can work with files and keep them secure on your person rather than leaving them on a machine that may or may not be secured. With the built in hardware encryption the Spyrus drive performs this task well.</p>

<h2>My Experience With the Spyrus Live USB</h2>

<p>I took this drive and plugged it into everything in my house, the fire station, and other places to try it out. There were a few things that surprised me about the Spyrus Drive. I&#8217;ll cover those, but here are some basic pros and cons that I found.</p>

<h4>Pros:</h4>

<div style="float:right; overflow: auto; margin: 5px;">
<img src="https://www.jeremymorgan.com/images/windows-to-go-usb/windows-to-go-05.jpg" alt="Windows to go live drives" />
</div>


<ul>
<li>This thing is really well built. Just holding on to it you can tell it&#8217;s solid.</li>
<li>It works great, on a ton of different machines</li>
<li>The performance is spectacular</li>
<li>I could set up a development workstation on it, and carry it around</li>
<li>It&#8217;s easy to set up</li>
<li>Truly a portable workstation you can carry in your pocket</li>
<li>Hardware security features a great plus</li>
</ul>


<h4>Cons</h4>

<ul>
<li>I found one machine that wouldn&#8217;t boot it (out of 9)</li>
<li>There is some driver setup that has to be done</li>
<li>On my Mac I had to get drivers to connect wirelessly, could have been &#8220;stranded&#8221;</li>
</ul>


<p>It should be noted that the cons aren&#8217;t the fault of this product, but rather Windows related issues. While you could potentially boot up to a machine and not be able to connect to the internet, it&#8217;s not a problem inherent to the design of the Spyrus, but caused by lack of a particular driver in the Windows system. This will happen with any similar product.</p>

<p>I did have one machine that it wouldn&#8217;t boot on, and I&#8217;m not sure why. Since I have two identical laptops, I tried it on the other and it worked. I&#8217;m pretty sure this is hardware or configuration related, and not the fault of the product.</p>

<p>I had to struggle to come up with cons here, because the device simply did what it&#8217;s supposed to do. It just works.</p>

<p>I loaded up some development tools on it and built a couple applications. I went back and forth through machines and it worked flawlessly. I could see myself using this thing a lot in the future.</p>

<h3>What Surprised Me</h3>

<p>When I first unboxed this thing I immediately plugged it into a laptop. It went through a Windows install and it was good to go. Then I went to every machine in the house I could find. Here&#8217;s what surprised me:</p>

<p><strong>It ran on my Mac</strong></p>

<p>The PCs were great, and it was expected that they&#8217;d boot to them, but then I plugged it into my Mac, and it actually worked really well. If you do this, you have to load up the same Bootcamp drivers you have to load to get Windows on your Mac in the first place. Once you do this, it runs great. I wasn&#8217;t expecting that.</p>

<p><strong>The transition between machines was quick</strong></p>

<p>With each new machine there was a driver install process, and some tweaks to the display. It was just a few minutes each time, then when I hopped from machine to machine later it seamlessly goes between them. You can&#8217;t ask for much better than that.</p>

<p><strong>It runs considerably faster than off the drive</strong></p>

<p>This one surprised me the most. I noticed it seemed really &#8220;snappy&#8221; on an older machine I was running, and I wondered if it truly was performing better.</p>

<p>Theoretically it should be roughly the same speed because it should be running out of memory, either solid memory on the machine or from the stick. But it is faster running from the stick:</p>

<p><img src="https://www.jeremymorgan.com/images/windows-to-go-usb/windows-to-go-04.jpg" alt="Windows to go live drives" /></p>

<p>You can view the detailed GeekBench results here:</p>

<ul>
<li><a href="http://browser.geekbench.com/v4/cpu/7302485" target="_blank">Windows Running on the Machine</a></li>
<li><a href="http://browser.geekbench.com/v4/cpu/7201679" target="_blank">Windows Running from the Spyrus USB Drive</a></li>
</ul>


<p>I was surprised at the performance increase. Something to consider for high CPU activities.</p>

<h2>My Overall Conclusion</h2>

<p>Overall I am very satisfied with this product, and I&#8217;m not being paid to say it. If you have a use for a product of this type, I would recommend this one. It&#8217;s priced right for what you get.</p>

<p><a href="https://www.spyrus.com/windows-to-go-live-drives/" target="_blank">Here&#8217;s some more info on the drive I used</a></p>

<p>It&#8217;s well built, so you can carry it around with you everywhere. It works great, and reliably. It&#8217;s certified by Microsoft. I decided to hammer on this thing for a couple weeks, and I couldn&#8217;t get it to fail me.</p>

<p>Personally, I&#8217;m going to set this up with some virus scanners and maybe some pentesting utilities, so if someone calls me up to fix their computer, I can just head over with the stick and try to fix it. I may even use it as a portable workstation, and set it up like my desktop, so I can head off somewhere and plug it in my laptop and get to work fast.</p>

<p>There are a lot of viable use cases for this, and the product does it well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Which Distribution of Linux Should I Use?]]></title>
    <link href="https://www.jeremymorgan.com/blog/linux/what-distro-linux-should-i-use/"/>
    <updated>2018-02-20T02:51:00+00:00</updated>
    <id>https://www.jeremymorgan.com/blog/linux/what-distro-of-linux</id>
    <content type="html"><![CDATA[<p>I&#8217;m often asked this question: &#8220;hey, you&#8217;re a Linux guy right? What Linux should I use? I have this friend who recommends _____ and I want to know what you think?&#8221; I usually reply with the same question: what do you want to do? So I decided to make a blog post about it that I can send people instead.</p>

<!-- more -->


<h2>My History with Linux</h2>

<p>I should probably preface this article with a little bit of my history with Linux, in case you&#8217;re reading this and you don&#8217;t know me (very likely). You can probably skip this if you don&#8217;t care.</p>

<div style="float: right; padding-top: 0px; padding-left: 20px; padding-right:10px; padding-bottom: 10px">
    <img src="https://www.jeremymorgan.com/images/what-distro-of-linux-should-i-use/slackware-linux.jpg" alt="Slackware Linux" />
</div>


<p>I started out using Linux around 1996. My first Linux was Slackware 4, a set of CDs I purchased at Egghead Software (yep, I&#8217;m old). A friend of mine told me about this Unix like thing that was so great and I just had to try it and he thought I would love it.</p>

<p>I read a lot about Unix, and was very curious about it. I had a shell account at my internet provider and I&#8217;d tinkered around, yet at first I was a bit hesitant. &#8220;Why would I need this?&#8221; His reply was simply: &#8220;Because you hate Windows 95 so much and love DOS, you&#8217;ll love this&#8221;. So I bought it. He was right.</p>

<p>I took an old hard drive I had and installed it. I fought with it for hours, then days. I finally got a desktop up and running. I have no idea what drove me in this time, but I had to figure out how to make this system work, and it was difficult. I had to know so much about my hardware! Simple things were suddenly hard again. But I pushed through, and I got my desktop up. And I started building some silly scripts for fun. The system was fast, and I could change nearly everything about it.</p>

<p>It had a built in C compiler? I just bought some really expensive Borland package for this I could barely figure out. But this OS had a compiler built in? A free Image editor? I was hooked!</p>

<p>For years after that, I experimented with tons of Distributions. Even BSD Unix ones. My &#8220;main computer&#8221; was always a dual boot, and some of them were pure Linux. Most of the early 2000s, I avoided Windows completely. So by year, I can break it down to my &#8220;main machine&#8221;, it would be:</p>

<div style="float: right; padding-top: 0px; padding-left: 20px; padding-right:10px; padding-bottom: 10px">
    <img src="https://www.jeremymorgan.com/images/what-distro-of-linux-should-i-use/redhat-linux.jpg" alt="Red Hat Linux" />
</div>


<ul>
<li>1996-1999: Slackware</li>
<li>1999-2002: Redhat (and FreeBSD)</li>
<li>2003-2005: FreeBSD / Knoppix</li>
<li>2005-2009: Gentoo</li>
<li>2009-2011: Linux Mint</li>
<li>2011-2018: Arch Linux / Debian</li>
</ul>


<p>So of course I used probably 50 or more distributions in my time, but this was what was running on my &#8220;main machine&#8221; I used for work, or browsing, or development or whatever. Obviously Arch had the longest run so far, mainly because I could just configure it and forget about it for long periods of time.</p>

<p>But the main distro for my &#8220;real work&#8221; the last few years has been Debian.</p>

<p>Enough about me though, let&#8217;s talk about what you should use.</p>

<h2>So What Do You Want to Do?</h2>

<p>I&#8217;m going to put these in categories based on common needs. There is some overlap here, and with enough work any of these Linux distributions will work for your desired needs. One of the great things about Linux is you can make it whatever you want. But some distributions do a lot of that work for you, or have a design that works better towards certain goals. I&#8217;ll present these in categories based on the easiest path to reach your goals.</p>

<h2>I&#8217;m a Linux Newbie Just Getting Started</h2>

<p>For a long time I recommended Ubuntu for this. As far as ease of use and compatibility it was great. But I pretty much hate Ubuntu now. I still use it for demos in my courses and articles because so many people use it, but I am not a fan of the way they run this distribution, the built in Amazon adware, and Unity is annoying.</p>

<p><strong>So if you&#8217;re just starting out I recommend:</strong></p>

<ul>
<li><a href="https://linuxmint.com/download.php" target="_blank">Linux Mint Download</a></li>
<li><a href="https://www.debian.org/distrib/" target="_blank">Debian Download</a></li>
</ul>


<p>It&#8217;s kind of a cheat because Linux Mint is built off Debian, but Mint looks prettier and has some nice cross platform stuff.</p>

<p><strong>Use these distributions if you want:</strong></p>

<div style="float: right; padding-top: 0px; padding-left: 20px; padding-right:10px; padding-bottom: 10px">
    <img src="https://www.jeremymorgan.com/images/what-distro-of-linux-should-i-use/linux-mint.jpg" alt="Linux Mint" />
</div>


<ul>
<li>A Windows-like experience</li>
<li>Something simple to install</li>
<li>Something reliable</li>
<li>Something &#8220;Linux like&#8221; that doesn&#8217;t deviate from the norm</li>
<li>Something that &#8220;just works&#8221;</li>
</ul>


<p>Ok so that last one is really important. It just works. Either of these distributions are plug and play. Set them up, and forget about it. I have become increasingly reliant on Debian for my development machines because at times <strong>I don&#8217;t care about the OS and I don&#8217;t want it to get in my way</strong>. When I&#8217;m in a mood where I just want to build things, it can&#8217;t be beat.</p>

<h2>I Want to Learn More About Linux/Unix and My Hardware</h2>

<p>Maybe you&#8217;re in the mood to play and experiment. You want to challenge yourself and force yourself to learn by doing. That&#8217;s great, it&#8217;s exactly what I did.</p>

<p><strong>If you want to challenge yourself and learn I recommend:</strong></p>

<div style="float: right; padding-top: 0px; padding-left: 20px; padding-right:10px; padding-bottom: 10px">
    <img src="https://www.jeremymorgan.com/images/what-distro-of-linux-should-i-use/arch-linux.jpg" alt="ARCH Linux" />
</div>


<ul>
<li><a href="http://www.slackware.com/getslack/" target="_blank">Slackware Linux</a></li>
<li><a href="https://www.archlinux.org/download/" target="_blank">Arch Linux</a></li>
<li><a href="https://www.gentoo.org/downloads/" target="_blank">Gentoo Linux</a></li>
<li><a href="https://www.freebsd.org/where.html" target="_blank">FreeBSD </a>(Not Linux but fits in this category)</li>
</ul>


<p>Each of these distributions requires a lot of configuration, hardware discovery, and compiling of source. With Gentoo you have to compile everything. It&#8217;s a great way to have absolute full control over your operating system.</p>

<div style="float: right; padding-top: 0px; padding-left: 20px; padding-right:10px; padding-bottom: 10px">
    <img src="https://www.jeremymorgan.com/images/what-distro-of-linux-should-i-use/gentoo-linux.jpg" alt="Gentoo Linux" />
</div>


<p><strong>Use these distributions if you want:</strong></p>

<ul>
<li>Full control of your computer and OS</li>
<li>To learn about Linux internals</li>
<li>A lean and mean optimized system</li>
</ul>


<p>This comes at a cost: mainly your time. A full install of these can take hours. On the plus side, they tend to run forever.</p>

<p>I had an Arch Install on a Lenovo that took the better part of a Saturday to configure, and let&#8217;s say another 10 hours or more spread out after that. It ran nearly effortlessly for 5 years (till the laptop hardware died). I only had to do a few updates once in a while, but I used it reliably every day for 5. Long. Years. So in a way you can look at it as investment.</p>

<h2>I want Cutting Edge Stuff</h2>

<p>Ok maybe you want the latest greatest software and you don&#8217;t care how stable it is. You want to do some kernel hacking or some other cool thing that some coder committed yesterday.</p>

<p><strong>To hell with stability and security you want the newest thing now.</strong></p>

<div style="float: right; padding-top: 0px; padding-left: 20px; padding-right:10px; padding-bottom: 10px">
<img src="https://www.jeremymorgan.com/images/what-distro-of-linux-should-i-use/opensuse-tumbleweed.jpg" alt="openSUSE Tumbleweed" />
</div>


<ul>
<li><a href="https://www.archlinux.org/download/" target="_blank">Arch Linux</a></li>
<li><a href="https://en.opensuse.org/Portal:Tumbleweed" target="_blank">OpenSuse Tumbleweed</a></li>
<li><a href="https://fedoraproject.org/wiki/Releases/Rawhide" target="_blank">Fedora Rawhide</a></li>
<li><a href="https://www.gentoo.org/downloads/" target="_blank">Gentoo Unstable</a></li>
</ul>


<p><strong>Use these distributions if you want:</strong></p>

<ul>
<li>To trade risk for the newest stuff</li>
<li>The latest and greatest features always</li>
<li>Fun configuring things to work with breaking changes</li>
</ul>


<p>To be fair I&#8217;ve personally used Arch and Gentoo without significant stability problems, but I was risking using the bleeding edge stuff on rolling releases.</p>

<h2>I Just Want to Get Some Work Done</h2>

<p>Ok maybe you don&#8217;t really care about the OS particulars and just want to GSD (Get Stuff Done). Maybe you have some Node or GoLang apps you want to build and heard Linux is the best for it.</p>

<div style="float: right; padding-top: 0px; padding-left: 20px; padding-right:10px; padding-bottom: 10px">
<img src="https://www.jeremymorgan.com/images/what-distro-of-linux-should-i-use/debian-linux.jpg" alt="Debian Linux" />
</div>


<p><strong>These are great for getting work done:</strong></p>

<ul>
<li><a href="https://www.debian.org/distrib/" target="_blank">Debian Download</a></li>
<li><a href="https://getfedora.org/" target="_blank">Fedora</a></li>
<li><a href="https://software.opensuse.org/distributions/leap" target="_blank">openSuse Leap</a></li>
<li><a href="https://ubuntustudio.org/" target="_blank">Ubuntu Studio </a> (Yes it&#8217;s Ubuntu but it&#8217;s put together nicely)</li>
</ul>


<p><strong>Use these distributions if you want:</strong></p>

<ul>
<li>Smooth operation with low maintenance</li>
<li>Minimal configuration</li>
<li>Things that just work mostly automatically</li>
<li>Compatibility with hardware and software</li>
</ul>


<p>As I said I often use Debian these days as I&#8217;m usually just making something and don&#8217;t really feel like tinkering around and optimizing. It&#8217;s stable, fast, and stays out of my way. I&#8217;m writing this article in Debian 9 right now.</p>

<h2>I Want to Set Up a Server</h2>

<p>Maybe you want to set up a web server or virtual host and don&#8217;t know what to use. The first one on this list is the dominant distribution for web hosting, so if you want something that mimics the site that&#8217;s hosting your software try CentOS (or learn Docker!)</p>

<p><strong>These are solid and reliable for web hosting:</strong></p>

<div style="float: right; padding-top: 0px; padding-left: 20px; padding-right:10px; padding-bottom: 10px">
<img src="https://www.jeremymorgan.com/images/what-distro-of-linux-should-i-use/centos-linux.jpg" alt="CentOS Linux" />
</div>


<ul>
<li><a href="https://www.centos.org/download/" target="_blank">CentOS</a></li>
<li><a href="https://developers.redhat.com/products/rhel/download/" target="_blank">Red Hat Enterprise Linux</a> (RHEL)</li>
<li><a href="https://www.debian.org/distrib/" target="_blank">Debian 9 Download</a></li>
<li><a href="https://www.freebsd.org/where.htmlhttps://www.freebsd.org/where.html" target="_blank">FreeBSD </a>(Not Linux but fits in this category)</li>
</ul>


<p><strong>Use these distributions if you want:</strong></p>

<ul>
<li>Stability</li>
<li>Security</li>
<li>Support from other people using it for the same reason</li>
</ul>


<p>I believe any Linux distribution can be used for web hosting effectively, but some take more work than others.</p>

<h2>I Want the Most Performance Possible</h2>

<p>So if you&#8217;re one of those types who wants to squeeze out every ounce of performance (I&#8217;ve been there) these are great for you. Some of these require compiling all the source code to produce binaries optimized for your processor(s). Fun stuff!</p>

<div style="float: right; padding-top: 0px; padding-left: 20px; padding-right:10px; padding-bottom: 10px">
<img src="https://www.jeremymorgan.com/images/what-distro-of-linux-should-i-use/clear-linux.jpg" alt="Clear Linux from Intel" />
</div>


<ul>
<li><a href="https://clearlinux.org/" target="_blank">Clear Linux </a> (For Intel CPUS, by Intel)</li>
<li><a href="https://www.gentoo.org/downloads/" target="_blank">Gentoo Linux</a></li>
<li><a href="https://www.archlinux.org/download/" target="_blank">Arch Linux</a></li>
<li><a href="https://www.freebsd.org/where.htmlhttps://www.freebsd.org/where.html" target="_blank">FreeBSD </a>(Not Linux but fits in this category)</li>
</ul>


<p><strong>Use these distributions if you want:</strong></p>

<ul>
<li>Fast performance</li>
<li>High Load Computing</li>
</ul>


<p>Keep in mind that hardware has reached a performance point where these don&#8217;t matter quite as much as they used to. 15 years ago you could hack a kernel and dial in your services and see a big boost. These days, the difference is negligible. Any Linux will be pretty snappy.</p>

<h2>I Want a Secure Desktop</h2>

<p>Maybe you want to set up a system that&#8217;s hard to break into, for whatever reason. There are a couple distributions with security as a top focus. If you&#8217;re really concerned about locking down your main machine, these are great ones to look at.</p>

<div style="float: right; padding-top: 0px; padding-left: 20px; padding-right:10px; padding-bottom: 10px">
<img src="https://www.jeremymorgan.com/images/what-distro-of-linux-should-i-use/tails-linux.jpg" alt="Tails Linux" />
</div>


<ul>
<li><a href="https://tails.boum.org/" target="_blank">TAILS Linux</a></li>
<li><a href="https://alpinelinux.org/" target="_blank">Alpine Linux</a></li>
<li><a href="https://coreos.com/" target="_blank">CoreOS</a></li>
<li><a href="https://www.spi.dod.mil/lipose.htm" target="_blank">TENS Linux</a> (DOD Project)</li>
<li><a href="https://sourceforge.net/projects/tinhat/" target="_blank">Tin Hat Linux</a></li>
<li><a href="https://www.openbsd.org/" target="_blank">OpenBSD</a> (Not Linux, but fits)</li>
</ul>


<p><strong>Use these distributions if you want:</strong></p>

<ul>
<li>Security</li>
<li>Anonymity</li>
</ul>


<h2>I Want a Minimal Computer System</h2>

<p>Ok sometimes you just want something lean and mean that gets a certain job done. I definitely understand this. Maybe you have an old Pentium you want to re-purpose. Sometimes the OS is just a small part of your goal and you want the bare minimum.</p>

<div style="float: right; padding-top: 0px; padding-left: 20px; padding-right:10px; padding-bottom: 10px">
<img src="https://www.jeremymorgan.com/images/what-distro-of-linux-should-i-use/lubuntu-linux.jpg" alt="Lubuntu Linux" />
</div>


<ul>
<li><a href="https://sourceforge.net/projects/archbang/" target="_blank">ArchBang</a></li>
<li><a href="https://lubuntu.net/" target="_blank">Lubuntu</a></li>
<li><a href="https://distrowatch.com/table.php?distribution=puppy" target="_blank">Puppy Linux</a></li>
<li><a href="http://distro.ibiblio.org/tinycorelinux/" target="_blank">Tiny Core Linux</a></li>
<li><a href="http://www.bodhilinux.com/" target="_blank">Bodhi Linux</a></li>
</ul>


<p><strong>Use these distributions if you want:</strong></p>

<ul>
<li>Something that will run on old hardware</li>
<li>Something minimal as possible</li>
</ul>


<h2>Conclusion</h2>

<p>I hate to sound like a broken record, but you could just pick out one of these Linux distributions and make it whatever you want. That&#8217;s the nature of Linux, its customizable to the furthest degree. But these are great distributions for getting started fast. If you think I&#8217;ve missed the mark or left out a distribution feel free to leave me a message in the comments, or <a href="https://twitter.com/JeremyCMorgan" target="_blank">yell at me on Twitter</a>.</p>

<p>And whatever you do, if you reached this page because you&#8217;re curious about Linux, try it out!! Now! These days you can download something like <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank">VirtualBox</a> (free of charge) and try it out before really committing to anything. It&#8217;s definitely worth your time to check it out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Latest Virtualization Setup]]></title>
    <link href="https://www.jeremymorgan.com/tutorials/devops/virtualization-with-virtual-box/"/>
    <updated>2018-02-10T13:28:00+00:00</updated>
    <id>https://www.jeremymorgan.com/tutorials/devops/my-virtualization-setup</id>
    <content type="html"><![CDATA[<p>Like many geeks of the time I spent the 90s and 2000s with at least 2 or 3 old computers in a closet, connected by a switch running various operating systems with various services running on them. Giant, loud, clunky machines whirring away.</p>

<!-- more -->


<div style="float: right; padding: 15px;">

<img src= "https://www.jeremymorgan.com/images/my-virtual-box-setup/jeremy-old.jpg" alt="Jeremy Morgan, about 2003 or so" />

</div>


<p>This very website was hosted for years on an old Pentium Machine running FreeBSD connected to my DSL line in my bedroom. It was just the way you did things then.</p>

<p>I had stacks of hard drives with labels on them. Ebay specials I&#8217;d purchased for the sole purpose of putting different operating systems on them. Everything from Redhat, Gentoo, FreeBSD or various versions of Windows, I would just swap the drive and go.</p>

<p>For years I lived in a condo that had a coat closet near the front door with an electrical outlet in it. I ran Ethernet through the ceiling and filled it to the top with machines. All for development, file servers, and web hosting purposes. It all seems a little silly now.</p>

<h3>2018 is a little different&#8230;</h3>

<p>These days I have an Azure Account, AWS, and <a href="https://www.digitalocean.com/?refcode=ca6f81fa42b4" target="_blank">Digital Ocean</a>. Virtualization has made progress even the most die hard geeks didn&#8217;t expect. Even development itself is a bit abstracted from the bare metal these days, at least for most people. Things like Docker will make the OS and it&#8217;s configuration almost irrelevant.</p>

<p>Yet I still have a server in my house, and I want to show you guys the setup.</p>

<p><img src="https://www.jeremymorgan.com/images/my-virtual-box-setup/intel-xw8400-server.jpg" alt="HP xv8600 Xeon Server" /></p>

<p>This is an old HP Xeon Workstation I picked up that was going to use for course production, but even with 2 Xeons and 32 gig of RAM it fails to outperform my Mac Mini for video and audio rendering. So I decided to use it for some remote virtualization stuff, and stuffed it in a corner of our daylight basement.</p>

<h3>Why do I need this?</h3>

<p>Lately I&#8217;ve been doing a lot of random software development and building courses online. For those courses I need a fresh operating system and development environment. Obviously I could record some of these things on my desktop, but with the frequent configuration changes and software installs I could mess up the accuracy of my courses. So I want a machine with a dedicated operating system for each course. That motivated me to set this up.</p>

<h2>Getting the server setup</h2>

<p>To start this out, I originally had Windows 10 on this server. It ran well, <a href="http://browser.geekbench.com/v4/cpu/6882166" target="_blank">the performance was not too bad</a>. But if I were to use this as only a Virtualization machine, the overhead wasn&#8217;t that great.</p>

<p><img src="https://www.jeremymorgan.com/images/my-virtual-box-setup/windows-memory.jpg" alt="Window 10 Memory Usage " /></p>

<p>This is with the machine &#8220;at an idle&#8221;. I was using up 2 gigs of memory just loading up a desktop with nothing else. Surely I could do better than that.</p>

<p>It should come as a surprise to nobody I decided to go with Linux base, and I installed Debian 9 on it. Why Debian? It&#8217;s the same OS that powers jeremymorgan.com and I like it because it&#8217;s lean, simple and well supported. It doesn&#8217;t have the bleeding edge packages (I use Arch on the Desktop for that) but it&#8217;s stable. Incredibly stable. I wanted something I could install and forget about. So Debian was my choice.</p>

<p>I went with a barebones Linux installation, custom kernel and no window manager, and found that the idle was significantly better:</p>

<p><img src="https://www.jeremymorgan.com/images/my-virtual-box-setup/linux-memory-usage.jpg" alt="Linux Memory Usage" /></p>

<p>This gives me a little more headroom and CPU cycles to work with.</p>

<p>I ended up installing LXDE because it&#8217;s easier to configure and manage VMs with a window system. But I needed to set my server to boot to just a console, that way I can start and stop the windowing environment when I wanted to.</p>

<p>To do that, I had to set my runlevel, which is a little different these days than in the past. If you want your server/desktop to boot to a prompt, do this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>systemctl get-default</span></code></pre></td></tr></table></div></figure>


<p>In my case, it said</p>

<blockquote><p>graphical.target</p></blockquote>

<p>Which is not what I want. So I then type in:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>systemctl set-default multi-user.target</span></code></pre></td></tr></table></div></figure>


<p>that way I can just fire up the server at a prompt and not have to have the windowing system loaded in memory. Yep, it&#8217;s that easy.</p>

<p><img src="https://www.jeremymorgan.com/images/my-virtual-box-setup/default-runlevel-target.jpg" alt="Default Runlevel Target for Debian" /></p>

<p>So now I had a nice lean and stable OS base to start with.</p>

<p>Then I installed LXDE and then used <a href="http://networkstatic.net/xrdp-an-easy-remote-desktop-setup-for-your-ubuntu-servers/" target="_blank">xrdp to set up a remote desktop</a> so I never have to walk over to the server to do anything. I just remote in from my office.</p>

<h3>Setting up virtual machines</h3>

<p>For the Virtualization, I chose <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank">Virtual Box</a>. I&#8217;ve worked with Hyper-V and VMWare in the past and they each have their merits, but for this application this works best for me. I originally attempted to setup Hyper-V server but my machine was too old and didn&#8217;t support it fully. So this worked out.</p>

<p><img src="https://www.jeremymorgan.com/images/my-virtual-box-setup/virtualbox.jpg" alt="Virtual Box Setup" /></p>

<p>Now one thing about Virtual Box that&#8217;s awesome is you can virtual machines &#8220;headless&#8221; from the command line. This is a great feature if you want to spin up a bunch of them. I can run 3 to 4 servers at a time without a blip in performance (ok 32 gigs of RAM and Xeons help with that).</p>

<p>Installing the machines is super easy. You can choose to allocate as much hardware as you&#8217;d like, or don&#8217;t like to the mix:</p>

<p><img src="https://www.jeremymorgan.com/images/my-virtual-box-setup/virtual-box-memory.jpg" alt="Virtual Box Memory" /></p>

<p>And CPU usage is handled nicely:</p>

<p><img src="https://www.jeremymorgan.com/images/my-virtual-box-setup/virtual-box-cpu.jpg" alt="Virtual Box CPU Setup" /></p>

<p>For networking, I set up one bridged adapter to communicate with the outside world, and another adapter for an internal network to communicate with other servers:</p>

<p><img src="https://www.jeremymorgan.com/images/my-virtual-box-setup/bridged.jpg" alt="Bridged Network Adapter VirtualBox" /></p>

<p>It can&#8217;t be beat. So now I have several VMs set up and ready to go.</p>

<h2>Running the Virtual Machines</h2>

<p>So now I have my server booted at just a prompt, and I can list all my available virtual machines:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>VBoxManage list vms</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.jeremymorgan.com/images/my-virtual-box-setup/virtualbox-list-vms.jpg" alt="Virtual Box List VMs" /></p>

<p>This is pretty handy. I can start them up here, then RDP into them from my office machine. Virtualbox uses VRDP to provide the headless interface to the outside world. I&#8217;ve used it extensively the last few weeks with zero problems.</p>

<p>I can start up a VM with the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>VBoxManage startvm "&lt;VM NAME&gt;" --type headless</span></code></pre></td></tr></table></div></figure>


<p>I even have some shell scripts to start up clusters or sets of machines at once.</p>

<p>Then, I can just check to see the machine are running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>VBoxManage list runningvms</span></code></pre></td></tr></table></div></figure>


<p> <img src="https://www.jeremymorgan.com/images/my-virtual-box-setup/show-running-vms.jpg" alt="Show running VMs in Virtual Box Command line headless" /></p>

<p>And it&#8217;s that easy!</p>

<p>Here&#8217;s one thing that&#8217;s not so easy&#8230; finding an IP address. The only real reliable way to get it is by going into my router and looking for them. Some machines I have statically assigned an IP for ease of use. If you don&#8217;t do that though, you can always just show the VM from the Windowing interface:</p>

<p> <img src="https://www.jeremymorgan.com/images/my-virtual-box-setup/show-desktop-ip.jpg" alt="Show Desktop Virtual Box" /></p>

<p>And then type in ipconfig, ifconfig, ip a, etc to get the IP.</p>

<p>I can RDP into any of these machines, do development, record courses, whatever I need.</p>

<p><img src="https://www.jeremymorgan.com/images/my-virtual-box-setup/desktop-view.jpg" alt="RDP into Debian Virtual Machine" /></p>

<p>It works out great. Since it&#8217;s on my local network it feels and performs like I&#8217;m on the desktop.</p>

<h2>Conclusion</h2>

<p>So I just wanted to show my setup and how I&#8217;ve been running things lately. This works really well for course production, because I can RDP in, full screen it on one window and record it as I go through the steps. I can also develop stuff and run/test it out. I&#8217;ve put in a replica of this website in, with the identical configuration for testing/development.</p>

<p>It works great. I&#8217;ll probably find a better way to do it, or you may know a better way, feel free to leave it in the comments or <a href="https://www.twitter.com/JeremyCMorgan">yell at me on Twitter</a>. If you have any questions, feel free to contact me about it.</p>

<br />


<br />


<br />


<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://eepurl.com/b3Y9Wz"><strong>get the hacker newsletter</strong></a> 100% spam free! 
<br /><br />
You can also follow my projects on GitHub:<br />
<iframe src="https://ghbtns.com/github-btn.html?user=JeremyMorgan&type=follow&count=true&size=large" frameborder="0" scrolling="0" width="220px" height="30px"></iframe>
</div>


<br />


<br />


<p><a href="https://www.jeremymorgan.com//pluralsight.pxf.io/c/1221983/431405/7490"><img src="https://www.jeremymorgan.com//a.impactradius-go.com/display-ad/7490-431405" border="0" alt="" width="320" height="50"/></a><img height="0" width="0" src="https://www.jeremymorgan.com//pluralsight.pxf.io/i/1221983/431405/7490" style="position:absolute;visibility:hidden;" border="0" /></p>

<br />




<br />



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing Your IIS Web Server]]></title>
    <link href="https://www.jeremymorgan.com/tutorials/IIS/how-to-load-test-iis-web-server/"/>
    <updated>2017-07-01T02:27:00+00:00</updated>
    <id>https://www.jeremymorgan.com/tutorials/IIS/load-testing-your-iis-web-server</id>
    <content type="html"><![CDATA[<p>All the theory, calculations, and estimations in the world aren&#8217;t going to tell you how your website will truly perform under a load. If you&#8217;re deploying a new server, or doing any kind of performance enhancements you don&#8217;t want to test your results in production. It&#8217;s always a good idea to see how your system behaves before your visitors do. To do that, you can use a load testing tool, and here are a few I use quite frequently.</p>

<p><strong>Update:</strong> I&#8217;ve featured these tools is my latest IIS course on Pluralsight, <a href="http://pluralsight.pxf.io/c/1221983/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fiis-administration-in-depth" target="_blank">IIS Administration in Depth</a>, check it out!</p>

<!-- more -->


<p></p>

<h3>Netling</h3>

<p><img src="https://www.jeremymorgan.com/images/load-testing-iis-web-server/load-test-iis-web-server-01.jpg" alt="Load Testing IIS Web Server" /></p>

<p><strong><a href="https://github.com/hallatore/Netling">Download Netling Here </a></strong></p>

<p>One of the &#8220;quick and dirty&#8221; applications I use is Netling. This is a super simple tester written in C#. You will need to compile this with Visual Studio, but you don&#8217;t necessarily have to be a developer to do it. I&#8217;ve been able to load it up, and select build to create it with no modifications with many versions of Visual Studio.</p>

<p>Netling is super simple to operate and about as easy as it gets.</p>

<p>You select how many threads you want to run. This is entirely up to you, more threads will put more load on your machine, and depending on how many cores your CPU has, more may not necessarily be better. Experiment with it and see what works best for you.</p>

<p>It has a feature for &#8220;Pipelining&#8221;. This is when multiple requests go through a single socket without waiting for a response. Setting this higher will generate a higher load but again this something to adjust for best results.  There will be a physical limit to pipelining depending on your hardware and connection speed.</p>

<p>This is a handy tool and is extremely simple to use. One issue I&#8217;ve had with Netling is it sends raw requests that aren&#8217;t much like a real browser. To emulate real traffic more accurately I have another tool I like to use.</p>

<h3>Netling Pros</h3>

<ul>
<li>Free</li>
<li>Open Source, can be easily modified</li>
<li>Extremely Simple</li>
</ul>


<h3>Netling Cons</h3>

<ul>
<li>Doesn&#8217;t simulate real transactions well</li>
<li>Can&#8217;t do authentication or other simulations</li>
<li>Only tests one URL at a time</li>
</ul>


<h3>Web Surge</h3>

<p><img src="https://www.jeremymorgan.com/images/load-testing-iis-web-server/load-test-iis-web-server-02.jpg" alt="Load Testing IIS Web Server" /></p>

<p><strong><a href="https://websurge.west-wind.com/">Download Web Surge Here</a></strong></p>

<p>Web surge is by far one of my favorites. It&#8217;s a great application that simulates a load on your server in a very realistic fashion.</p>

<p>With this program you create sessions, which means you can use more than one URL for the test. Each of the URLs will be run in the session, which can make it more random and realistic. It has a ton of great options as well:</p>

<p><img src="https://www.jeremymorgan.com/images/load-testing-iis-web-server/load-test-iis-web-server-03.jpg" alt="Load Testing IIS Web Server" /></p>

<p>It gives you quick results, and you can &#8220;drill down&#8221; to get more detailed data.</p>

<p><img src="https://www.jeremymorgan.com/images/load-testing-iis-web-server/load-test-iis-web-server-04.jpg" alt="Load Testing IIS Web Server" /></p>

<p>You can also export these results in several formats. There&#8217;s the Websurge proprietary format, as well as XML or JSON. You could parse these results for future analysis work.</p>

<p>Overall Websurge is among my favorites for load testing because it&#8217;s closer to real world traffic. If you put in a list of all your pages and randomize the test, it can provide some solid information.</p>

<h3>Web Surge Pros</h3>

<ul>
<li>Free (for personal use)</li>
<li>Professional Version reasonably priced</li>
<li>Fast and generates a large load</li>
<li>Simple to use, yet powerful</li>
<li>Simulates &#8220;real world&#8221; traffic very well</li>
<li>Extremely configurable</li>
</ul>


<h3>Web Surge Cons</h3>

<ul>
<li>None than I can think of</li>
</ul>


<h2>Apache JMeter</h2>

<p><img src="https://www.jeremymorgan.com/images/load-testing-iis-web-server/load-test-iis-web-server-05.jpg" alt="Load Testing IIS Web Server" /></p>

<p><strong><a href="https://jmeter.apache.org/">Download JMeter Here </a></strong></p>

<p>The Next application we&#8217;ll look at is Jmeter. This is an extremely powerful program and can do very thorough testing in addition to generating a load. In fact load testing with Jmeter is just a very small part of it&#8217;s overall functionality.</p>

<p>With JMeter you have scenarios to run out, because it&#8217;s more of a testing oriented application you can run through a longer set of steps and processes as a part of your test.</p>

<p>I would encourage you to really dig into this application and learn as much as you can about it to get the full benefits of it.</p>

<h3>Apache JMeter Pros</h3>

<ul>
<li>Free</li>
<li>Very Powerful</li>
<li>Detailed tests can be set up</li>
<li>Minimal setup</li>
</ul>


<h3>Apache JMeter Cons</h3>

<ul>
<li>Steeper learning curve</li>
<li>Can be fairly complicated</li>
<li>May be overkill for what you need</li>
</ul>


<h2>Conclusion</h2>

<p>There are many tools out there for load generation, but these are the ones I use the most. I like to set up various different tests to accurately gauge performance of your website and it&#8217;s reaction to a load.</p>

<p>In fact, the reaction to a heavy load is the most important thing I&#8217;m looking for. When doing performance measurements it&#8217;s difficult to really nail down all the variables and prove a change has increased performance. But sending a heavy load to your server and seeing how it reacts is pretty conclusive.</p>

<p>I cover some performance and stability enhancements in my <strong><a href="http://pluralsight.pxf.io/c/1221983/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fiis-administration-fundamentals">Pluralsight Course - IIS Administration Fundamentals</a></strong>.</p>

<p>I cover load testing in detail in my new course <strong><a href="http://pluralsight.pxf.io/c/1221983/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fiis-administration-in-depth">IIS Administration In Depth</a></strong>.</p>

<p>Check it out if you want to learn more about administering IIS Servers. If you don&#8217;t have a Pluralsight account yet, you can <a href="http://pluralsight.pxf.io/c/1221983/424552/7490">start a free trial by clicking here</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Install Microsoft SQL Server on Ubuntu Linux in 5 Minutes]]></title>
    <link href="https://www.jeremymorgan.com/tutorials/linux/how-to-install-microsoft-sql-server-ubuntu-linux/"/>
    <updated>2016-12-06T21:13:00+00:00</updated>
    <id>https://www.jeremymorgan.com/tutorials/linux/how-to-install-microsoft-sql-server-on-ubuntu-linux</id>
    <content type="html"><![CDATA[<p>I must admit I was surprised when I learned that Microsoft SQL Server would be availble in Linux. They&#8217;ve been pushing the open source initiative hard, but I didn&#8217;t expect something this big. Oh yeah, Visual Studio is now available for Mac as well. I just saw a pig flying by.</p>

<p>While MS-SQL is not open source they have made it available to run on open source platforms such as Linux and OSX, which I can imagine took a ton of work. So I decided to take advantage of this new option and try it out. It works great! It took 5 minutes to install. Here&#8217;s how you can do it too. Note that you will need a server with 3.5 gigs of RAM for this.</p>

<!-- more -->


<p>
The first thing I always do on an Ubuntu machine is update it</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get upgrade</span></code></pre></td></tr></table></div></figure>


<p>Next we need to import the public repository GPG keys</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
</span><span class='line'>curl https://packages.microsoft.com/config/ubuntu/16.04/mssql-server.list | sudo tee /etc/apt/sources.list.d/mssql-server.list</span></code></pre></td></tr></table></div></figure>


<p>Next we&#8217;ll install SQL Server.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install -y mssql-server</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.jeremymorgan.com/images/sql-server-linux/how-to-install-sql-server-linux-1.jpg" title="&#34;How to Install SQL Server in Linux&#34;" alt="&#34;How to Install SQL Server in Linux&#34;"></p>

<p>Now we need to run a configuration script to set up the server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /opt/mssql/bin/sqlservr-setup</span></code></pre></td></tr></table></div></figure>


<p>`
It will ask if you want to start the service and if you&#8217;d like to start it on boot.</p>

<p>Here&#8217;s how you can check if the service is running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>systemctl status mssql-server</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.jeremymorgan.com/images/sql-server-linux/how-to-install-sql-server-linux-2.jpg" title="&#34;How to Install SQL Server in Linux&#34;" alt="&#34;How to Install SQL Server in Linux&#34;"></p>

<h3>Install the MSSQL Tools for Linux</h3>

<p>To test this out a little, install the MSSQL tools on Ubuntu.</p>

<p>Add in a new repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
</span><span class='line'>
</span><span class='line'>sudo apt-get update 
</span><span class='line'>sudo apt-get install mssql-tools</span></code></pre></td></tr></table></div></figure>


<p>Now, Let&#8217;s try to connect!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlcmd -S localhost -U SA -P '&lt;YourPassword&gt;'</span></code></pre></td></tr></table></div></figure>


<p>You can run this command to view all your databases:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT Name from sys.Databases;
</span><span class='line'>GO</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.jeremymorgan.com/images/sql-server-linux/how-to-install-sql-server-linux-3.jpg" title="&#34;How to Install SQL Server in Linux&#34;" alt="&#34;How to Install SQL Server in Linux&#34;"></p>

<p>This should look pretty familiar to you if you&#8217;ve worked with SQL in the past.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE DATABASE acmewidgets;
</span><span class='line'>GO</span></code></pre></td></tr></table></div></figure>


<p>Now we need to select that database:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>USE acmewidgets;
</span><span class='line'>GO</span></code></pre></td></tr></table></div></figure>


<p>As a test. let&#8217;s create a customer table</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE TABLE customer (id INT, firstname NVARCHAR(50), lastname NVARCHAR(50));
</span><span class='line'>GO</span></code></pre></td></tr></table></div></figure>


<p>Now, let&#8217;s put some customers in there:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INSERT INTO customer VALUES (1, 'Lloyd', 'Christmas');
</span><span class='line'>INSERT INTO customer VALUES (2, 'Harry', 'Dunn');
</span><span class='line'>INSERT INTO customer VALUES (3, 'Mary', 'Swanson');
</span><span class='line'>GO</span></code></pre></td></tr></table></div></figure>


<p>Now, let&#8217;s take a look at those customers:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT * FROM customer
</span><span class='line'>GO</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.jeremymorgan.com/images/sql-server-linux/how-to-install-sql-server-linux-4.jpg" title="&#34;How to Install SQL Server in Linux&#34;" alt="&#34;How to Install SQL Server in Linux&#34;"></p>

<p>And it&#8217;s that easy! You can run SQL scripts here, or connect to it from SSMS, a traditional ASP site, or a .Net Core site/app. I&#8217;ll be doing a lot of ASP.Net core work in the coming months, so be sure to check back here.</p>

<p>To quit from SQL server, type in</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>QUIT</span></code></pre></td></tr></table></div></figure>


<p>And you&#8217;re done!</p>

<p>I&#8217;ll be messing with this some more in the coming weeks and really putting it to the test, and I&#8217;ll share my results.</p>

<p>-Jeremy</p>

<p>I also did a YouTube tutorial for this article:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/OqsOdUNsO4g" frameborder="0" allowfullscreen></iframe>




<br />


<br />


<br />


<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://eepurl.com/b3Y9Wz"><strong>get the hacker newsletter</strong></a> 100% spam free! 
<br /><br />
You can also follow my projects on GitHub:<br />
<iframe src="https://ghbtns.com/github-btn.html?user=JeremyMorgan&type=follow&count=true&size=large" frameborder="0" scrolling="0" width="220px" height="30px"></iframe>
</div>


<br />


<br />


<p><a href="https://www.jeremymorgan.com//pluralsight.pxf.io/c/1221983/431405/7490"><img src="https://www.jeremymorgan.com//a.impactradius-go.com/display-ad/7490-431405" border="0" alt="" width="320" height="50"/></a><img height="0" width="0" src="https://www.jeremymorgan.com//pluralsight.pxf.io/i/1221983/431405/7490" style="position:absolute;visibility:hidden;" border="0" /></p>

<br />




<br />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Does Dry Ice Really Cool Five Times Better Than Regular Ice?]]></title>
    <link href="https://www.jeremymorgan.com/tutorials/raspberry-pi/dry-ice-vs-wet-ice/"/>
    <updated>2016-07-31T00:58:00+00:00</updated>
    <id>https://www.jeremymorgan.com/tutorials/raspberry-pi/does-dry-ice-really-cool-five-times-better-than-regular-ice</id>
    <content type="html"><![CDATA[<p>I saw an advertisement for dry ice claiming it cools 5 times better than wet ice. Out of curiosity I had to know if this were true, or at the very least see how much better dry ice performs. I thought I&#8217;d gather up a Raspberry Pi and some sensors and find out, using some techniques from my <a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=JEREMYMORGANDOTCOM"><strong>Hands on Internet of Things course</strong></a> released recently.</p>

<!-- more -->


<p>
I&#8217;m sharing what I found here and showing how you can replicate the experiment.</p>

<p><img src="https://www.jeremymorgan.com/images/dry-ice-vs-wet-ice/dry-ice-vs-wet-ice-00.jpg" alt="Dry Ice ws Wet Ice" /></p>

<h3>What Does 5 Times the Cooling Power Mean?</h3>

<p>This is the first thing I wondered. Does it keep it 5 times colder? Does it keep it cool 5 times longer? The claim is still a bit unclear, but based on my results it appears it keeps it close to 5 times colder, for about the same amount of time.</p>

<p>What I did was take a couple coolers, filled one with Dry Ice and one with wet ice, sealed them up and measured them for a few days.</p>

<p>Take a look at our graph:</p>

<p><img src="https://www.jeremymorgan.com/images/dry-ice-vs-wet-ice/dry-ice-vs-wet-ice-01.jpg" alt="Dry Ice ws Wet Ice" />
<a href="https://plot.ly/~JeremyMorgan/14/dry-ice-vs-wet-ice/">Click here for a detailed view</a></p>

<p>I did a minute by minute sampling, and perhaps unsurprisingly the first minute was the coldest. at that point:</p>

<p><img src="https://www.jeremymorgan.com/images/dry-ice-vs-wet-ice/dry-ice-vs-wet-ice-02.jpg" alt="Dry Ice ws Wet Ice" /></p>

<p>Our dry ice was at -111.775 degrees Fahrenheit, and the wet ice was at 26.2634. This is closer to around 4 times colder. But does it keep it cold longer? Not really. Actually if you look at the drop off wet ice actually kept it colder than the room temperature for a while longer, but the difference is small:</p>

<p><img src="https://www.jeremymorgan.com/images/dry-ice-vs-wet-ice/dry-ice-vs-wet-ice-03.jpg" alt="Dry Ice ws Wet Ice" /></p>

<p>This was over the course of a few days, and as you can see they converge toward the end but the wet ice still keeps cool a bit longer. I&#8217;m assuming this is because the dry ice disappears. Here are some basic conclusions I derive from this data:</p>

<ul>
<li><strong>Dry Ice Keeps Items Significantly Colder</strong> For a couple days, the temperature was around 4 times colder in the Dry Ice cooler.</li>
<li><strong>Dry Ice Has a Pretty Significant Drop Off.</strong> From -80 to 0 degrees in about 8 hours. Wet ice only got 1.5 degrees warmer in this same amount of time.</li>
<li><strong>Both Methods Cool for Roughly the Same Amount of Time</strong> - I expected the wet ice to stay cool for hours, not days. Although it is much warmer by comparison it lasted just as long.</li>
<li><strong>Dry Ice Is Probably Overkill</strong> - Most of the things people put in a cooler dont need to be -90 degrees. Soda, beer or sandwiches are probably just fine at 32 degrees.</li>
</ul>


<p>When I started this project I assumed that dry ice would be much colder, for much longer. I can&#8217;t draw a ton of conclusions from this experiment just yet. I&#8217;m definitely going to run a few more just like it.</p>

<p>I measured the air temperature as well, but since one of the sensors was faulty the data is bad.</p>

<p>If you want access to the data <a href="https://data.sparkfun.com/streams/XGlZ2D0X26cZ9XYX3bVl">here is the dataset</a>. I&#8217;ll surely do more with it in the future. Now, here are the details for how I set it up.</p>

<h2>Setting up the Project</h2>

<p><img src="https://www.jeremymorgan.com/images/dry-ice-vs-wet-ice/dry-ice-vs-wet-ice-04.jpg" alt="Dry Ice ws Wet Ice" /></p>

<p>To set this up you&#8217;ll need:</p>

<ul>
<li>5 Waterproof DS18B20 Sensors  ( <a href="https://www.adafruit.com/products/381">https://www.adafruit.com/products/381</a>)</li>
<li>2 Styrofoam Coolers</li>
<li>Raspberry Pi ( I used a 3, but 1 or 2 will work)</li>
<li>Equal parts dry ice and standard ice</li>
</ul>


<p>I wired these sensors together in a somewhat crude fashion, but you may want to do something nicer like a junction block or something.</p>

<p>What I did for each sensor was grab the serial number and label it so I knew which sensors I was reading:</p>

<p><img src="https://www.jeremymorgan.com/images/dry-ice-vs-wet-ice/dry-ice-vs-wet-ice-05.jpg" alt="Dry Ice ws Wet Ice" /></p>

<p>And placed each of them in the cooler. I had one at the top of each cooler, and one at the bottom, and one sensor out in the open air to measure room temperature.</p>

<h3>Setup the Pi with the DSB1820 Sensors</h3>

<p>First we need to get the pi ready for the DSB1820 sensors. To do that we will set up our one wire support.</p>

<p>Open up your boot config (by typing sudo nano /boot/config.txt) and add the following line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dtoverlay=w1-gpio</span></code></pre></td></tr></table></div></figure>


<p>Then reboot the pi (sudo reboot). After rebooting, type the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo modprobe w1-gpio
</span><span class='line'>sudo modprobe w1-therm
</span><span class='line'>cd /sys/bus/w1/devices
</span><span class='line'>ls</span></code></pre></td></tr></table></div></figure>


<p>It should look like this:</p>

<p><img src="https://www.jeremymorgan.com/images/dry-ice-vs-wet-ice/dry-ice-vs-wet-ice-06.jpg" alt="Dry Ice ws Wet Ice" /></p>

<p>Now what you&#8217;re seeing here is a set of directories, one for each sensor. To make sure they all work, cd into each directory and check them with the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd 28-XXXXXXX (your serial number)
</span><span class='line'>cat w1_slave</span></code></pre></td></tr></table></div></figure>


<p>It should look like this:</p>

<p><img src="https://www.jeremymorgan.com/images/dry-ice-vs-wet-ice/dry-ice-vs-wet-ice-06-b.jpg" alt="Dry Ice ws Wet Ice" /></p>

<p>the YES means it works. If you&#8217;re following along and just want to check all 5 really quick use this script :</p>

<p><a href="https://github.com/IoT-Projects/SuperCool/blob/master/checksensors.sh">https://github.com/IoT-Projects/SuperCool/blob/master/checksensors.sh</a></p>

<p>It will go through all your sensors and check them.</p>

<p>Now, let&#8217;s write a script to grab the values.</p>

<h3>Script to Read Temperature Values</h3>

<p>For this we will use Python, and this script will read the values from the sensors that come out of that folder we were in earlier.</p>

<p>For a lot of this first part we will lift some code from Adafruit and make it our own. Put this at the top of your script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">glob</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">&#39;modprobe w1-gpio&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">&#39;modprobe w1-therm&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">base_dir</span> <span class="o">=</span> <span class="s">&#39;/sys/bus/w1/devices/&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is what you&#8217;ll need to get started reading the sensors.</p>

<p>Next, you&#8217;ll need to create a list of serial numbers from your devices. Yours will be different from mine.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sensor</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;28-0115649279ff&#39;</span><span class="p">,</span><span class="s">&#39;28-011564966aff&#39;</span><span class="p">,</span><span class="s">&#39;28-011564d991ff&#39;</span><span class="p">,</span><span class="s">&#39;28-01156492b9ff&#39;</span><span class="p">,</span><span class="s">&#39;28-011564c7a9ff&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we&#8217;ll create a function to read the temp in raw mode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">read_temp_raw</span><span class="p">(</span><span class="n">sensor</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">device_folder</span> <span class="o">=</span> <span class="n">glob</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="n">base_dir</span> <span class="o">+</span> <span class="n">sensor</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">device_file</span> <span class="o">=</span> <span class="n">device_folder</span> <span class="o">+</span> <span class="s">&#39;/w1_slave&#39;</span>
</span><span class='line'>    <span class="n">catdata</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s">&#39;cat&#39;</span><span class="p">,</span><span class="n">device_file</span><span class="p">],</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">out</span><span class="p">,</span><span class="n">err</span> <span class="o">=</span> <span class="n">catdata</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span><span class='line'>    <span class="n">out_decode</span> <span class="o">=</span> <span class="n">out</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">=</span> <span class="n">out_decode</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">lines</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>This function will be called by our read_temp function, that reads that raw data into a string array and parses it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">read_temp</span><span class="p">(</span><span class="n">sensorid</span><span class="p">):</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">=</span> <span class="n">read_temp_raw</span><span class="p">(</span><span class="n">sensor</span><span class="p">[</span><span class="n">sensorid</span><span class="p">])</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">lines</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()[</span><span class="o">-</span><span class="mi">3</span><span class="p">:]</span> <span class="o">!=</span> <span class="s">&#39;YES&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>
</span><span class='line'>        <span class="n">lines</span> <span class="o">=</span> <span class="n">read_temp_raw</span><span class="p">()</span>
</span><span class='line'>    <span class="n">equals_pos</span> <span class="o">=</span> <span class="n">lines</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;t=&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">equals_pos</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="n">temp_string</span> <span class="o">=</span> <span class="n">lines</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">equals_pos</span><span class="o">+</span><span class="mi">2</span><span class="p">:]</span>
</span><span class='line'>        <span class="n">temp_c</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">temp_string</span><span class="p">)</span> <span class="o">/</span> <span class="mf">1000.0</span>
</span><span class='line'>        <span class="n">temp_f</span> <span class="o">=</span> <span class="n">temp_c</span> <span class="o">*</span> <span class="mf">9.0</span> <span class="o">/</span> <span class="mf">5.0</span> <span class="o">+</span> <span class="mf">32.0</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">temp_f</span>
</span></code></pre></td></tr></table></div></figure>


<p>This next part is tricky. I plugged in each sensor individually to get the serial number of each. Now, we must match the serial number with the position of the sensor.</p>

<p>For this experiment I attach one sensor to the lid (top) and one to the bottom of the container. This way the top one will measure the air temperature and the other will be submerged in water for the wet ice, and covered with dry ice. This is just my initial thoughts on this experiment, feel free to try some other configurations. Here&#8217;s how we gather the readings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Get readings</span>
</span><span class='line'><span class="n">outside</span> <span class="o">=</span> <span class="n">read_temp</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">weticetop</span> <span class="o">=</span> <span class="n">read_temp</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">weticebot</span> <span class="o">=</span> <span class="n">read_temp</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">dryicetop</span> <span class="o">=</span> <span class="n">read_temp</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">dryicebot</span> <span class="o">=</span> <span class="n">read_temp</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">## get averages</span>
</span><span class='line'>
</span><span class='line'><span class="n">weticeavg</span> <span class="o">=</span> <span class="p">(</span><span class="n">weticebot</span> <span class="o">+</span> <span class="n">weticetop</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'><span class="n">dryiceavg</span> <span class="o">=</span> <span class="p">(</span><span class="n">dryicebot</span> <span class="o">+</span> <span class="n">dryicetop</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>So basically we arrange the serials in a string array and address them. The read_temp function takes in this argument and then passes it to read_temp_raw which then extracts the information from the sensor and sends it back to read_temp which parses the information and sends back a number.</p>

<p>I added an average to the mix, which as you can see is just an average between the top and bottom sensor. I don&#8217;t know if it will provide value or not, but decided to throw it in.</p>

<h3>Storing the Data on Adafruit.IO</h3>

<p><img src="https://www.jeremymorgan.com/images/dry-ice-vs-wet-ice/dry-ice-vs-wet-ice-07.jpg" alt="Dry Ice ws Wet Ice" /></p>

<p>I love using Adafruit.IO for their cool visualizations. I&#8217;m not going to go into setting up a dashboard in this article, but If you want to know how to set up your own Adafruit.IO dashboard <a href="https://www.jeremymorgan.com/internet-of-things/how-to-adafruit-io/">check out this article for instructions</a> or you can follow <a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=JEREMYMORGANDOTCOM">lecture 15 of my IoT course.</a></p>

<p>To connect to my dashboard, I added the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">send_to_adafruit</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="n">values</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ourvalue</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;value&#39;</span> <span class="p">:</span> <span class="n">values</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlencode</span><span class="p">(</span><span class="n">ourvalue</span><span class="p">)</span>
</span><span class='line'>    <span class="n">req</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="n">req</span><span class="o">.</span><span class="n">add_header</span><span class="p">(</span><span class="s">&#39;Content-Type&#39;</span><span class="p">,</span><span class="s">&#39;application/x-www-form-urlencoded; charset=UTF-8&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">req</span><span class="o">.</span><span class="n">add_header</span><span class="p">(</span><span class="s">&#39;x-aio-key&#39;</span><span class="p">,</span><span class="n">aiokey</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a function to connect to Adafruit, you will need to include urllib and urllib2, as well as use your own aiokey.</p>

<p>Then to send the data (each field is sent one at a time with Adafruit)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">## Sending data to Adafruit.IO </span>
</span><span class='line'><span class="n">send_to_adafruit</span><span class="p">(</span><span class="n">outsideUrl</span><span class="p">,</span><span class="n">outside</span><span class="p">)</span>
</span><span class='line'><span class="n">send_to_adafruit</span><span class="p">(</span><span class="n">weticetopUrl</span><span class="p">,</span><span class="n">weticetop</span><span class="p">)</span>
</span><span class='line'><span class="n">send_to_adafruit</span><span class="p">(</span><span class="n">weticebottomUrl</span><span class="p">,</span><span class="n">weticebot</span><span class="p">)</span>
</span><span class='line'><span class="n">send_to_adafruit</span><span class="p">(</span><span class="n">dryicetopUrl</span><span class="p">,</span><span class="n">dryicetop</span><span class="p">)</span>
</span><span class='line'><span class="n">send_to_adafruit</span><span class="p">(</span><span class="n">dryicebottomUrl</span><span class="p">,</span><span class="n">dryicebot</span><span class="p">)</span>
</span><span class='line'><span class="n">send_to_adafruit</span><span class="p">(</span><span class="n">dryiceavgUrl</span><span class="p">,</span><span class="n">dryiceavg</span><span class="p">)</span>
</span><span class='line'><span class="n">send_to_adafruit</span><span class="p">(</span><span class="n">weticeavgUrl</span><span class="p">,</span><span class="n">weticebot</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This sends our data out to a nice dashboard.</p>

<h3>Sending Data to Sparkfun</h3>

<p><img src="https://www.jeremymorgan.com/images/dry-ice-vs-wet-ice/dry-ice-vs-wet-ice-08.jpg" alt="Dry Ice ws Wet Ice" /></p>

<p>I decided to send some data to Sparkfun for the heck of it. You can get instructions for doing that here or <a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=JEREMYMORGANDOTCOM">check out lecture 13 of my IoT course</a>.</p>

<p>Since Sparkfun uses values passed in the URL, we build a long URL string like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">oururl</span> <span class="o">=</span> <span class="n">sparkfunprojecturl</span> <span class="o">+</span> <span class="s">&#39;?private_key=&#39;</span> <span class="o">+</span> <span class="n">sparkfunprivatekey</span> <span class="o">+</span>  <span class="s">&#39;&amp;dryiceavg=&#39;</span> <span class="o">+</span> <span class="n">dryiceavg</span> <span class="o">+</span> <span class="s">&#39;&amp;dryicebottom=&#39;</span> <span class="o">+</span> <span class="n">dryicebot</span> <span class="o">+</span> <span class="s">&#39;&amp;dryicetop=&#39;</span> <span class="o">+</span> <span class="n">dryicetop</span> <span class="o">+</span> <span class="s">&#39;&amp;outside=&#39;</span> <span class="o">+</span> <span class="n">outside</span> <span class="o">+</span> <span class="s">&#39;&amp;weticeavg=&#39;</span> <span class="o">+</span> <span class="n">weticeavg</span> <span class="o">+</span> <span class="s">&#39;&amp;weticebottom=&#39;</span> <span class="o">+</span> <span class="n">weticebot</span> <span class="o">+</span> <span class="s">&#39;&amp;weticetop=&#39;</span> <span class="o">+</span> <span class="n">weticetop</span>
</span></code></pre></td></tr></table></div></figure>


<p>The variables sparkfunprojecturl and sparkfunprivatekey are defined at the top of the script and you&#8217;ll need to get your own.</p>

<p>Then we call it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">content</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">oururl</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>We don&#8217;t do anything with the content returned, but you can if you choose to. This will put send our data to the sparkfun feed found here.</p>

<h3>Update every minute</h3>

<p>Next, I want to call this script once a minute, so I&#8217;ll use crontab to do that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">crontab</span> <span class="o">-</span><span class="n">e</span>
</span></code></pre></td></tr></table></div></figure>


<p>I want to call my script once a minute, so I add the following line to my crontab:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">pi</span><span class="o">/</span><span class="n">projects</span><span class="o">/</span><span class="n">supercool</span><span class="o">/</span><span class="n">readtemps</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your filename will be different. This simply calls the script once a minute and sends the data to our endpoints. <a href="http://kvz.io/blog/2007/07/29/schedule-tasks-on-linux-using-crontab/">For more information on cron, click here. </a></p>

<p>After this, the script started running and gathering data!</p>

<h2>Summary</h2>

<p><img src="https://www.jeremymorgan.com/images/dry-ice-vs-wet-ice/dry-ice-vs-wet-ice-09.jpg" alt="Dry Ice ws Wet Ice" /></p>

<p>So I was curious about this claim and decided to tackle it. I didn&#8217;t learn much from this, other than the fact that wet ice in a sealed cooler lasts longer than I would have thought. There were a lot of variables here outside my control, but I think it&#8217;s a fun project and I will build on it some more. I hope one of you decides to take this on and improve on it. If so please share it with me!</p>

<h3>Important Links:</h3>

<p>Here are some links relevant to this project, without these folks this wouldn&#8217;t have been possible (or at least this easy!)</p>

<ul>
<li><a href="https://www.adafruit.com/"><strong>Adafruit</strong></a></li>
<li><a href="https://io.adafruit.com/JeremyMorgan"><strong>Adafruit.IO</strong> </a></li>
<li><a href="https://data.sparkfun.com"><strong>Sparkfun</strong></a></li>
<li><a href="https://plot.ly"><strong>Plot.Ly</strong></a></li>
<li><a href="https://www.facebook.com/Lake-Stop-Grocery-181462005222622/"><strong>Lake Stop Grocery</strong></a></li>
</ul>


<p>And as I plugged several times in this article I created a course teaching you how to do experiments like this with a Raspberry Pi and you can <a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=JEREMYMORGANDOTCOM"><strong>get 50% off by using this link</strong></a>.</p>

<br />


<p><a href="https://eepurl.com/bMxQr5"><img src="https://www.jeremymorgan.com/images/banners/raspberry-pi-newsletter-650.jpg" alt="Raspberry Pi Newsletter" /></a></p>

<br />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to Application Pools in IIS]]></title>
    <link href="https://www.jeremymorgan.com/blog/iis-devops/what-is-an-application-pool/"/>
    <updated>2016-07-09T02:56:00+00:00</updated>
    <id>https://www.jeremymorgan.com/blog/iis-devops/intro-to-application-pools-in-iis</id>
    <content type="html"><![CDATA[<p>Application Pools in IIS can be somewhat of a mystery. Since they&#8217;re created for you automatically many times Administrators don&#8217;t give them a second thought. But understanding application pools is crucial to having a good running IIS server.</p>

<p>I cover this and other IIS Administration topics in my <a href="http://www.pluralsight.com/courses/iis-administration-fundamentals">IIS Administration Fundamentals</a> course at Pluralsight. Check it out!</p>

<!-- more -->


<h3>What Is an Application Pool?</h3>

<p>To understand Application Pools, we must first understand applications, as far as IIS is concerned.</p>

<p>An <strong>application</strong> is a set of files and folders that deliver content. Any website will have a default application assigned to it, even if it&#8217;s just HTML and images. The diagram below shows the web server / web site / application relationship:</p>

<p><img src="https://www.jeremymorgan.com/images/what-is-iis-app-pool/what-is-iis-app-pool-01.jpg" alt="What is an Application Pool" /></p>

<p>An <strong>Application Pool</strong> is a container for your applications. It serves to isolate your application from other applications on the server. Each application in an application pool shares a worker process (w3wp.exe). You can have several applications share the same worker process, or have one for each application.</p>

<p><img src="https://www.jeremymorgan.com/images/what-is-iis-app-pool/what-is-iis-app-pool-00.jpg" alt="What is an Application Pool" /></p>

<p>When setting up Application Pools, you have a few options. Let&#8217;s compare a couple patterns.</p>

<h4>Multiple Applications in Single Pool</h4>

<p><img src="https://www.jeremymorgan.com/images/what-is-iis-app-pool/what-is-iis-app-pool-02.jpg" alt="What is an Application Pool" /></p>

<p>With this setup every application shares the same pool/process. Some reasons you may want to do this:</p>

<ul>
<li>Simpler Design</li>
<li>When making changes you only have to do it once.</li>
<li>Caching is improved, code can be shared and cached between applications</li>
</ul>


<p>Some reasons you may not want to:</p>

<ul>
<li>One crash takes down every application</li>
<li>An application with high load will slow the others</li>
<li>All applications share the same security profile</li>
<li>One applications required setting may break another application.</li>
</ul>


<h4>Each application has its own application pool</h4>

<p><img src="https://www.jeremymorgan.com/images/what-is-iis-app-pool/what-is-iis-app-pool-03.jpg" alt="What is an Application Pool" /></p>

<p>With this setup each application has it&#8217;s own unique process.</p>

<p>Some reasons you may want to do this:</p>

<ul>
<li>Isolated operations - if one application fails it doesn&#8217;t affect the others.</li>
<li>Isolated performance - a higher load application (most likely) will not slow the other applications down.</li>
<li>Security can be configured for each application individually.</li>
</ul>


<p>Some reasons you may not want to do this:</p>

<ul>
<li>Settings cannot be changed globally, must do one by one.</li>
<li>Common code caching advantage not present.</li>
<li>Could create more overhead than a single pool.</li>
</ul>


<p>There is no &#8220;magic bullet&#8221; for this, it will depend on your website and the needs of your organization. It&#8217;s definitely something you want to experiment with for best results.</p>

<h3>Application Pool Settings</h3>

<p>There are some important settings to consider with Application Pools. If you choose the basic settings you don&#8217;t get much:</p>

<p><img src="https://www.jeremymorgan.com/images/what-is-iis-app-pool/what-is-iis-app-pool-04.jpg" alt="What is an Application Pool" /></p>

<p>This only allows you to change your CLR version and Managed pipeline mode. But choose advanced settings and you get far more options:</p>

<p><img src="https://www.jeremymorgan.com/images/what-is-iis-app-pool/what-is-iis-app-pool-05.jpg" alt="What is an Application Pool" /></p>

<p>Here are some ones I&#8217;ve often seen changed:</p>

<ul>
<li><p><strong>.Net CLR</strong>- Although there isn&#8217;t a great reason to run a lower version of .Net it does happen. Usually I find myself setting this when the default app pool framework is 2.0.</p></li>
<li><p><strong>Enable 32 Bit applications</strong> - This is a common one for backwards compatibility. For instance the last application I worked on that required this used 32 bit DLLs written in C++, and the application would not function without this setting.</p></li>
<li><p><strong>Managed Pipeline Mode</strong> - This is another one used for backwards compatibility. You may need classic mode for some older ASP applications.</p></li>
<li><p><strong>Queue Length</strong> - this is a throttling setting and it&#8217;s pretty rough but useful. What we&#8217;re saying here is we can have 1000 requests in the queue, and above that visitors will get a 503 error.</p></li>
<li><p><strong>Limit</strong> - This is another throttling measure that controls the maximum percentage of CPU time you want this application pool to consume.</p></li>
<li><p><strong>Limit Action</strong> specifies what to do when that limit is hit. You can kill the process, throttle it, or do nothing.</p></li>
<li><p><strong>Limit interval</strong> is for fine tuning throttling. After the limit above is hit, this setting controls how many minutes we can stay in that state until recycling. If it&#8217;s too long you may have throttling on after it&#8217;s no longer needed. Too short and of an interval will just keep it throttling.</p></li>
<li><p><strong>Identity</strong> - This is important because this is the user your application pool is impersonating. Most of the time application pool identity is your best choice, but there are times when you will need a specific user to run a process. In that case you can have this app pool run under that user&#8217;s account and it&#8217;s given their permissions. Don&#8217;t do this unless you absolutely need to. It&#8217;s something I&#8217;ve seen a lot in the field especially in high security applications.</p></li>
</ul>


<p>As I&#8217;ve said before, there is no silver bullet for tuning either. It really depends on your organization and how your website is used. A great tune on one website could be bad for another.</p>

<h3>How to Create an Application Pool</h3>

<p>Creating Application Pools in IIS is easy. You can go into IIS Manager in the <strong>Application Pools</strong> feature pane, right click and create a new one:</p>

<p><img src="https://www.jeremymorgan.com/images/what-is-iis-app-pool/what-is-iis-app-pool-06.jpg" alt="What is an Application Pool" /></p>

<p>Or you could create one with PowerShell (my preferred option):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$appPoolName = 'jeremyscoolapp'
</span><span class='line'>
</span><span class='line'>if(!(Test-Path IIS:\AppPools\$appPoolName))
</span><span class='line'>{
</span><span class='line'>    $appPool = New-Item $appPoolName
</span><span class='line'>    $appPool | Set-ItemProperty -Name "managedRuntimeVersion" -Value 'v4.0'
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>Set-ItemProperty iis:\Sites\WebsiteName -Name applicationpool -Value $appPoolName</span></code></pre></td></tr></table></div></figure>


<p>In this script you can see that I define a name for my Application Pool. Then, I test to see if it already exists. If it doesn&#8217;t I create a new Application pool. Then I use Set-ItemProperty to change my runtime version to 4.0. You can set any of the application pool settings this way.</p>

<p>To see the options you can change type the following at a PowerShell prompt:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Get-Item IIS:\AppPools\DefaultAppPool  | Select-Object *</span></code></pre></td></tr></table></div></figure>


<p>Replace DefaultAppPool with the name of your application pool if it&#8217;s different.</p>

<h3>Conclusion</h3>

<p>I hope this has given you a good introduction to application pools in IIS. Because these are created automatically often times administrators don&#8217;t give a lot of thought to setting them up. Many websites run just fine with default settings. If you find yourself needing a custom configuration or you have some load issues, you now have a good understand of application pools and where to look to change them.</p>

<p>I cover this and many more IIS topics in my new Pluralsight Course <a href="http://www.pluralsight.com/courses/iis-administration-fundamentals">IIS Administration Fundamentals</a>. Check it out if you&#8217;re interested in learning more about IIS Administration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hands on IoT with the Raspberry Pi]]></title>
    <link href="https://www.jeremymorgan.com/tutorials/raspberry-pi/hands-on-internet-of-things/"/>
    <updated>2016-06-01T21:07:00+00:00</updated>
    <id>https://www.jeremymorgan.com/tutorials/raspberry-pi/hands-on-internet-of-things-with-the-raspberry-pi</id>
    <content type="html"><![CDATA[<p>Great news! I finally got my IoT course done! It took a long time to develop, and a lot of learning but totally worth it. This is not really a post advertising it but just a quick talk about the process.</p>

<!-- more -->


<h2>Hands on Internet of Things</h2>

<p><a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=DOTCOMFANS"><img src="https://www.jeremymorgan.com/images/hands-on-iot/hands-on-iot-00.jpg" title="&#34;Hands on Internet of Things Udemy&#34;" alt="&#34;Hands on Internet of Things Udemy&#34;"></a></p>

<p>If you&#8217;re interested in taking the course, you can <a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=DOTCOMFANS">redeem a 50% off coupon by clicking here!</a> It&#8217;s already dirt cheap at $20, but why not get it for $10?</p>

<p>In this course, I cover the basics, such as how to connect to the Pi, blink an LED, etc. Then we get into reading sensors and gathering the data. Then we walk through ways to send it to endpoints on the internet. Finally we create our OWN endpoint and start sending data there. Finally we build a dashboard for our data. Sound fun? Sign up!!</p>

<h2>What I learned here</h2>

<p>I learned a few things over the months. I started out not knowing much about video or sound editing. I also knew next to nothing about course design. I&#8217;m not an expert at any of those things now but I have learned a lot. Some key points I learned:</p>

<ul>
<li>Course design is hard.</li>
<li>Video editing is hard.</li>
<li>Audio editing is hard.</li>
<li>Every sound within 10 miles comes in very loudly on your microphone.</li>
</ul>


<p>So I set off with my Yeti Blue microphone, and purchased some software to help out:</p>

<ul>
<li>Camtasia for Mac</li>
<li>Camtasia for PC</li>
<li>Reaper Audio</li>
<li>ACON Audio plugins</li>
</ul>


<p>I read through countless tutorials and and watched videos to learn as much as I could. Then I started to record random stuff and chop it up, clean it etc. Lots of trial by fire, and my early work was terrible.</p>

<h3>Sound: My Biggest Obstacle</h3>

<p>One thing I learned quickly: The world is loud. The Yeti Blue microphone is AMAZING and the sound quality is great. Unfortunately it picks up sounds everwhere. I had many fruitless hours recording and re-recording when a dog barked, or someone drove one of those obnoxious import cars by my house. Also nobody could be home, you can hear everything. Rather than try to silence the world I decided to improviss</p>

<p>First I took a box and stuffed it with insulation like so:</p>

<p><img src="https://www.jeremymorgan.com/images/hands-on-iot/hands-on-iot-02.jpg" title="&#34;Hands on Internet of Things Udemy&#34;" alt="&#34;Hands on Internet of Things Udemy&#34;"></p>

<p>This cut down noise considerably. It also gave a much clearer, deeper sound that&#8217;s difficult to explain. If it looks stupid but it works, it isn&#8217;t stupid.</p>

<p>I still had way too much neighborhood noise, so my final recording area looked like this:</p>

<p><img src="https://www.jeremymorgan.com/images/hands-on-iot/hands-on-iot-03.jpg" title="&#34;Hands on Internet of Things Udemy&#34;" alt="&#34;Hands on Internet of Things Udemy&#34;"></p>

<p>Yup, that&#8217;s a supply closet! I managed to remove the echo and background noise from here fairly well.</p>

<p>This was my biggest obstacle by far and I worked through it.</p>

<h3>Why do I find this fun?</h3>

<p>So I spent hours writing out scripts, recording and re-recording. I set up goofy stages and filmed things with my webcam. It was a ton of work. But it was&#8230;. fun.</p>

<p><img src="https://www.jeremymorgan.com/images/hands-on-iot/hands-on-iot-04.jpg" title="&#34;Hands on Internet of Things Udemy&#34;" alt="&#34;Hands on Internet of Things Udemy&#34;"></p>

<p>Teaching people is a huge passion of mine, and I love doing these courses. I am bitten by the bug and this will be the first of many courses from me. Got a few laid out in the queue for this year.</p>

<p>During the process of building this I auditioned for <a href="http://www.pluralsight.com">Pluralsight</a> and got signed (yes!), so I&#8217;m now working on a course for them. Pluralsight has some exacting standards as well as branding and other style preferences so it&#8217;s a bit more work. On the flipside of that they have people with tons of knowledge helping you out and cheering you on. It&#8217;s pushing me to be a better instructor fast and I love it! But that&#8217;s for another article.</p>

<h3>Do you want to do this?</h3>

<p><img src="https://www.jeremymorgan.com/images/hands-on-iot/hands-on-iot-01.jpg" title="&#34;Hands on Internet of Things Udemy&#34;" alt="&#34;Hands on Internet of Things Udemy&#34;"></p>

<p>If you are itching to become an instructor, contact me. I have learned a TON over the last few months, and will gladly share. I&#8217;m going to do a series of articles soon detailing how to get started and tricks I&#8217;ve learned. Stay tuned or <a href="http://eepurl.com/b3Y9Wz">sign up for my newsletter</a>.</p>

<p>More to come soon!!!</p>

<p>-Jeremy</p>

<br />


<p><a href="https://eepurl.com/bMxQr5"><img src="https://www.jeremymorgan.com/images/banners/raspberry-pi-newsletter-650.jpg" alt="Raspberry Pi Newsletter" /></a></p>

<br />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: Netgear WAC730 Wireless Access Point]]></title>
    <link href="https://www.jeremymorgan.com/blog/reviews/netgear-wac730-prosafe-wap-review/"/>
    <updated>2016-04-30T16:39:00+00:00</updated>
    <id>https://www.jeremymorgan.com/blog/reviews/the-netgear-wac730-wireless-access-point</id>
    <content type="html"><![CDATA[<p>In this article I&#8217;ll be reviewing the Netgear Prosafe WAC730 Wireless Access Point. This is a WAP geared towards small to medium sized businesses, and is designed to compliment your existing network. I received this product for free in exchange for my honest opinion as part of the Netgear Ambassador Program. They sent me this unit to try out, and after extensive evaluation here&#8217;s what I think.</p>

<!-- more -->


<h2>The Netgear Prosafe WAC730</h2>

<p>The WAC730 is a high performance dual band wireless access point. This is a device you add on to your network to expand your wireless access. It would typically be added to an office to expand wireless coverage or improve it in certain areas of the building.</p>

<p>A good use case for this would be if you have a router or modem with a wireless access point on one side of your office, and you wanted a stronger signal on the other side of the building, you would purchase this device and plug it into the wall somewhere in that area so wireless devices could connect to it there.</p>

<p>Here is how it was hooked up on my home network:</p>

<p><a href="https://www.jeremymorgan.com/images/netgear-wac730/netgear-wac730-review-large-00.jpg"><img src="https://www.jeremymorgan.com/images/netgear-wac730/netgear-wac730-review-00.jpg" title="Netgear WAC730 Review" ></a></p>

<p>(Click the image for a larger view)</p>

<p>As you can see I have a ton of devices and computers on our network. This is the first place I decided to try this out, by routing our wireless devices through the WAC730.</p>

<h2>Setup</h2>

<p><img src="https://www.jeremymorgan.com/images/netgear-wac730/netgear-wac730-review-01.jpg" title="Netgear WAC730 Review" ></p>

<p>The setup for this device was incredibly easy. Although I have an extensive background with networking I still try to put myself in the shoes of a less technical person with reviews.</p>

<p>With the documentation provided I was able to plug in the device to my switch, then I found the IP and logged in. If you don&#8217;t know how to find the IP and you don&#8217;t have a DHCP server, it will automatically go to 192.168.0.100 which can be pretty handy.</p>

<p>The instructions give you a login and password for the web based admin panel. Those who know me well know I love to critique documentation. Bad documentation is everywhere and I&#8217;m quite vocal about it. NetGEAR gets it right in this case. It comes with two small pamphlets:</p>

<p><img src="https://www.jeremymorgan.com/images/netgear-wac730/netgear-wac730-review-02.jpg" title="Netgear WAC730 Review" ></p>

<p>One to install the mounting hardware, and one to set up the access point. They are 5 pages each and only contain the information you need to get it set up, with handy diagrams and troubleshooting instructions if things go wrong. I went through the instructions to set it up as if it were my first time working with something like this, and I found it to be brief, complete and easy.</p>

<p>Here&#8217;s a shot of the admin panel:</p>

<p><a href="https://www.jeremymorgan.com/images/netgear-wac730/netgear-wac730-review-large-03.jpg"><img src="https://www.jeremymorgan.com/images/netgear-wac730/netgear-wac730-review-03.jpg" title="Netgear WAC730 Review" ></a></p>

<p>(Click the image for a larger view)</p>

<p>The admin panel is fairly intuitive. The documentation doesn&#8217;t dive really deep into this, but it does guide you through the important task of getting an access point set up and securing it, which is probably where most people would stop anyway. The panel shows you configuration options, monitoring, maintenance and support. It&#8217;s a clean interface, and I didn&#8217;t feel like I had to search really deep to find anything. I like an interface like this.</p>

<p>Some cool things to note that would probably only interest you if you&#8217;re a geek:</p>

<p><strong> Dashboard</strong> - I like the dashboard that monitors traffic. Visually appealing and pretty neat.</p>

<p><strong>Packet Capture</strong> - There is a packet capture utility that exports to a .pcap file. Super useful if you need to do some troubleshooting.</p>

<p><strong>Statistics</strong> - I love statistics of any type due to curiosity. But these could be very useful in a business setting.</p>

<p><strong>Firmware Upgrade</strong> - You can do this through the panel. Pretty awesome.</p>

<p>There are more features in the admin panel that help you set up some of the features I&#8217;ll cover in the next section.</p>

<h3>Verdict</h3>

<p>The setup of this device was intuitive and easy. If you&#8217;re an office person without an IT department you can get this set up just by following the instructions, and it takes 10-15 minutes. That&#8217;s extremely important because small to medium businesses don&#8217;t always have a fully staffed IT department.</p>

<p><img src="https://www.jeremymorgan.com/images/netgear-wac730/netgear-wac730-review-06.jpg" title="Netgear WAC730 Review" ></p>

<h2>Features</h2>

<p>This access point comes with a range of good features.</p>

<p>It&#8217;s dual band 801.11 AC, and 802.11n. It supports 2.4 GHz and 5GHz simultaneously. Since I have both types of devices in my home I was able to setup a point for each and connect the devices simply and easily. It&#8217;s backwards compatible with some pretty old devices, including 802.11a!</p>

<p>It operates in a standalone mode, or &#8220;ensemble mode&#8221; with 10 other WAPs without a controller. Judging by the range of this device that would cover a very large building well.</p>

<p><img src="https://www.jeremymorgan.com/images/netgear-wac730/netgear-wac730-review-04.jpg" title="Netgear WAC730 Review" ></p>

<p>It has integrated PoE (Power over Ethernet). I cannot stress how great this is. If you have a PoE switch you just plug in the network cable and it&#8217;s ready. This means you aren&#8217;t limited to putting it close to a power outlet, and you can punch a small hole in the ceiling and mount this very cleanly.</p>

<p>It supports WPA, WPA2, Rouge AP detection and RADIUS. This covers a lot of ground.</p>

<p>Internal antennas that work really well, plus you can add external ones if you like.</p>

<h3>Verdict</h3>

<p>This is a full featured product that will meet some pretty demanding needs. It can be set up in a simple mode just to access the internet or take on a more complex role depending on what you need. What I really like is the coverage of different protocols. I was trying to find a device that&#8217;s really old and obscure to trip it up and couldn&#8217;t. This WAP will give you coverage for most anything that someone will bring into your office.</p>

<h2>Performance</h2>

<p>It supports an aggregate throughput of 1.7 Gbps ( 450Mbps for 2.4, 1.3 Gbps for 5 GHz). This is plenty of performance for most people. I started streaming Netflix and copying ISOs from my internal servers and it didn&#8217;t miss a beat. From a performance standpoint this would serve an office very well.</p>

<p>But stats are kind of useless without putting it to the test. So I started walking around the house checking the Wifi coverage. Entire house, and front yard is covered completely. Score! I decided to see how far out I could get:</p>

<p><img src="https://www.jeremymorgan.com/images/netgear-wac730/netgear-wac730-review-05.jpg" title="Netgear WAC730 Review" ></p>

<p>It was pretty off and on, mostly because this is situated in a room upstairs, and I went down the hill, so the line of sight was definitely off, but at around 50 feet away I was still able to get decent connectivity. If this were mounted on a ceiling in an office I have no doubts it would have some impressive coverage.</p>

<p>As a side note, one of my biggest pet peeves with WAPs is when they randomly disconnect. Yes, it&#8217;s only a few seconds to connect again but it can be frustrating&#8230; a real first world problem. But in using this I have not noticed any intermittent issues at all. It seems to be extremely solid in that regard.</p>

<h3>Verdict</h3>

<p>Great performance, better than expected in some cases. It gives me full coverage all over with lots of devices, it performs extremely well. I have yet to throw any external antennas on it, but when I do I will update this article and do another distance test.</p>

<h2>Conclusion</h2>

<p>I am extremely pleased with this device. You&#8217;re really getting your money&#8217;s worth for this device. It&#8217;s solid, reliable and fast. Within minutes you can set it up and forget it about it. I&#8217;ve used Netgear products for a very long time so I knew what to expect but this product still exceeded my expectations. I was surprised at the performance and the ability to configure this device to meet your needs. It can definitely be simple and easy or more powerful depending on how you want to use it. I would highly recommend this device to anyone considering it.</p>

<p>You should purchase this device if you&#8217;re in a small or medium sized business environment and want to extend your wireless range. I could see this doing well in offices, hospitals, schools, etc, and even home use. If you have a large house, this will cover it well. You don&#8217;t need an IT person to set it up and it can plug into the wall and go. It brings fast, solid access to a range of devices, old and new. If you happened upon this article searching for reviews on it my vote is to purchase it. You won&#8217;t be sorry.</p>

<p>-Jeremy</p>

<br />


<br />


<br />


<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://eepurl.com/b3Y9Wz"><strong>get the hacker newsletter</strong></a> 100% spam free! 
<br /><br />
You can also follow my projects on GitHub:<br />
<iframe src="https://ghbtns.com/github-btn.html?user=JeremyMorgan&type=follow&count=true&size=large" frameborder="0" scrolling="0" width="220px" height="30px"></iframe>
</div>


<br />


<br />


<p><a href="https://www.jeremymorgan.com//pluralsight.pxf.io/c/1221983/431405/7490"><img src="https://www.jeremymorgan.com//a.impactradius-go.com/display-ad/7490-431405" border="0" alt="" width="320" height="50"/></a><img height="0" width="0" src="https://www.jeremymorgan.com//pluralsight.pxf.io/i/1221983/431405/7490" style="position:absolute;visibility:hidden;" border="0" /></p>

<br />




<br />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to set up Free SSL for your Website]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/how-to-set-up-free-ssl/"/>
    <updated>2016-04-22T20:54:00+00:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/how-to-set-up-free-ssl</id>
    <content type="html"><![CDATA[<p>If you&#8217;re reading this then welcome to the new server! Due to my web host taking a huge nose dive, I had to scramble to find new hosting. In doing so I explored SSL solutions and a friend suggested Let&#8217;s Encrypt. I liked the experience so much I thought I&#8217;d share it.</p>

<!-- more -->


<h2>My Predicament</h2>

<p>So my old host (unnamed) just imploded. What started as a nice little company with fast servers and great support, got bought out. The new company did what many big companies tend to do, which is cut costs and lower the quality of the product. They did this by giving us all a &#8220;server upgrade&#8221; which turned out to be a terrible service. The traffic from my site was crashing the cheap server quite frequently. I would call and get no answer, and emails were answered by outsourced support personnel who were just copying and pasting text into emails to me. 3 years of solid service vanished overnight.</p>

<p>So, I needed to move my site fast, and since I have SSL and all my pages are spidered in Google with SSL, it would be wise to continue using it. I didn&#8217;t want to even attempt to ask these support people to export my cert to move it here so I started looking at options. So I looked at <a href="https://letsencrypt.org/">LetsEncrypt</a>. Since I moved my site to a nice <a href="https://www.digitalocean.com/?refcode=ca6f81fa42b4">new Linux server</a> I knew this would be an option for me, and decided to give it a try.</p>

<h2>How to Install Free SSL/TLS</h2>

<p>So I had my nice little NginX server set up and all I had to do was the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install git
</span><span class='line'>git clone https://github.com/letsencrypt/letsencrypt
</span><span class='line'>cd letsencrypt
</span><span class='line'>./letsencrypt-auto --help</span></code></pre></td></tr></table></div></figure>


<p>This installed the per-requisites and the LetsEncrypt app. They have two options for installing the certs, one is a standalone method, and the other is a &#8220;webroot&#8221; plugin. The standalone method requires you to stop your server, while the webroot option will do it with the server running. I wasn&#8217;t too worried about stopping things so I simply ran:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /home/web/.local/share/letsencrypt/bin/letsencrypt certonly --webroot -w /var/www/html -d jeremymorgan.com -d www.jeremymorgan.com</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.jeremymorgan.com/images/free-ssl-website/free-ssl-website-01.jpg" "Free SSL Website"></p>

<p>And that created my certs. I wanted to strengthen things up a bit, and I&#8217;ll show what I did</p>

<h3>Generate Strong Diffie-Hellman Group</h3>

<p>To generate a strong Diffie-Hellman group, I ran the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048</span></code></pre></td></tr></table></div></figure>


<p>Note the location of the cert, I&#8217;ll be adding that to my default config. Here is everything I added to it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>listen [::]:443 default_server;
</span><span class='line'>listen 443 ssl default_server;
</span><span class='line'>
</span><span class='line'>  server_name         www.jeremymorgan.com jeremymorgan.com;
</span><span class='line'>  ssl_certificate     /etc/letsencrypt/live/jeremymorgan.com/fullchain.pem;
</span><span class='line'>  ssl_certificate_key /etc/letsencrypt/live/jeremymorgan.com/privkey.pem;
</span><span class='line'>  ssl_trusted_certificate /etc/letsencrypt/live/jeremymorgan.com/chain.pem;
</span><span class='line'>      
</span><span class='line'>  ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
</span><span class='line'>  ssl_prefer_server_ciphers on;
</span><span class='line'>  ssl_dhparam /etc/ssl/certs/dhparam.pem;
</span><span class='line'>        
</span><span class='line'>  ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
</span><span class='line'>        
</span><span class='line'>  ssl_session_timeout 1d;
</span><span class='line'>  ssl_session_cache shared:SSL:50m;
</span><span class='line'>  ssl_stapling on;
</span><span class='line'>  ssl_stapling_verify on;
</span><span class='line'>  add_header Strict-Transport-Security max-age=15768000;
</span></code></pre></td></tr></table></div></figure>


<p>After that, save the file and restart Nginx:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service nginx reload</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Is that it? Yes that really is it.</p>

<p><img src="https://www.jeremymorgan.com/images/free-ssl-website/free-ssl-website-02.jpg" "Free SSL Website"></p>

<p>Now I have a nice little green lock there. Not much different than the last cert I had:</p>

<p><img src="https://www.jeremymorgan.com/images/free-ssl-website/free-ssl-website-03.jpg" "Free SSL Website"></p>

<p>Not too bad huh?</p>

<h2>Conclusion</h2>

<p>I shared this so you can see exactly how easy it is to use LetsEncrypt to set up free SSL certs for your site. The aim of this project is to encrypt everything, which is a fantastic idea.</p>

<p>So go grab a <a href="https://www.digitalocean.com/?refcode=ca6f81fa42b4">$5 server</a> put a <a href="https://letsencrypt.org/">Free SSL cert on it</a> and you&#8217;re good to go!</p>

<p>What do you think? Share it in the comments.</p>

<br />


<br />


<br />


<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://eepurl.com/b3Y9Wz"><strong>get the hacker newsletter</strong></a> 100% spam free! 
<br /><br />
You can also follow my projects on GitHub:<br />
<iframe src="https://ghbtns.com/github-btn.html?user=JeremyMorgan&type=follow&count=true&size=large" frameborder="0" scrolling="0" width="220px" height="30px"></iframe>
</div>


<br />


<br />


<p><a href="https://www.jeremymorgan.com//pluralsight.pxf.io/c/1221983/431405/7490"><img src="https://www.jeremymorgan.com//a.impactradius-go.com/display-ad/7490-431405" border="0" alt="" width="320" height="50"/></a><img height="0" width="0" src="https://www.jeremymorgan.com//pluralsight.pxf.io/i/1221983/431405/7490" style="position:absolute;visibility:hidden;" border="0" /></p>

<br />




<br />



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Install A Wireless USB Network Card on Raspberry Pi]]></title>
    <link href="https://www.jeremymorgan.com/tutorials/raspberry-pi/raspberry-pi-how-to-wireless-usb/"/>
    <updated>2016-04-03T19:28:00+00:00</updated>
    <id>https://www.jeremymorgan.com/tutorials/raspberry-pi/how-to-install-wireless-network-card-on-raspberry-pi</id>
    <content type="html"><![CDATA[<br />


<p><a href="https://eepurl.com/bMxQr5"><img src="https://www.jeremymorgan.com/images/banners/raspberry-pi-newsletter-650.jpg" alt="Raspberry Pi Newsletter" /></a></p>

<br />


<p>Today I&#8217;m going to show you how to install a wireless networking card on your Raspberry Pi. I&#8217;m using the ultra cheap Ralink wireless card, but the instructions are similar for any Wireless Device.</p>

<!-- more -->


<h3>Update Your System</h3>

<p>For this tutorial I&#8217;m using Raspian. This is a great beginner OS for the Pi and quite easy to use.</p>

<p>You&#8217;ll want to make sure you&#8217;re at least wired in so you can do an update:</p>

<pre>
sudo apt-get update
sudo apt-get upgrade
sudo apt-get autoremove
</pre>


<h3>Get Started</h3>

<p>We&#8217;re going to do this from SSH, though it&#8217;s easier to do from the desktop. But you got a Raspberry Pi to learn didn&#8217;t you? Many people use their pi strictly over SSH and don&#8217;t run a desktop at all. I have decided to include those kinds of instructions rather than do it the graphical way.</p>

<h4>1. Plug in your USB device and find it</h4>

<p>Once plugged in, again we&#8217;ll look at our USB devices:</p>

<pre>
lsusb
</pre>


<p><img class="center" src="https://www.jeremymorgan.com/images/raspberry-pi-how-to-wireless-usb-07.jpg" title="How to Install A Wireless USB Network Card on Raspberry Pi" ></p>

<p>It looks like in my case it&#8217;s installed, so now we&#8217;ll make a copy of the WPA supplicant file:</p>

<pre>
sudo cp /etc/wpa_supplicant/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf.bak
</pre>


<p>Now open up the file:</p>

<pre>
sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
</pre>


<p>And add the following:</p>

<pre>
network={
    ssid="[YOUR NETWORK SSID]"
    psk="[YOUR NETWORK PASSWORD]"
}
</pre>


<p>It should look like this:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/raspberry-pi-how-to-wireless-usb-06.jpg" title="How to Install A Wireless USB Network Card on Raspberry Pi" ></p>

<p>Now, save the file. CTRL + X - Save &#8220;Y&#8221;</p>

<h4>Start up Your Adapter</h4>

<p>Now we need to stop the wlan service:</p>

<pre>
sudo wpa_action wlan0 stop
</pre>


<p>Then bring it back up:</p>

<pre>
sudo ifup wlan0
</pre>


<h4>Test Connectivity</h4>

<pre>
sudo wpa_cli status
</pre>


<p>You should see something like this:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/raspberry-pi-how-to-wireless-usb-05.jpg" title="How to Install A Wireless USB Network Card on Raspberry Pi" ></p>

<p>If not, double check your network SSID and Password, that&#8217;s the most common problem. You may have a card that isn&#8217;t supported by the Raspberry Pi, if not get a new one! They&#8217;re super cheap and well worth it.</p>

<h3>(Optional) - If You End up Needing a Driver</h3>

<p>Sometimes there are issues that prevent you from loading the drivers for your card. Much of the firmware comes with raspian, but if not you&#8217;ll have to find the drivers for it. You&#8217;ll need a Windows machine to get the drivers you&#8217;ll need (at least for Ralink).</p>

<p>Insert the device and run the driver disk provided. Then after successfully installing it, open up your control panel, and select the properties of the device:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/raspberry-pi-how-to-wireless-usb-04.jpg" title="How to Install A Wireless USB Network Card on Raspberry Pi" ></p>

<p>Click on &#8220;driver details&#8221;</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/raspberry-pi-how-to-wireless-usb-08.jpg" title="How to Install A Wireless USB Network Card on Raspberry Pi" ></p>

<p>This will show you the location of the driver files to copy off the machine, you can put them on a USB stick and put them on your Pi from there.</p>

<h4>Get The Drivers off the USB Stick The Hard Way</h4>

<p>I put the driver files on a USB stick. Getting them from the desktop is really easy, but what if you only have SSH access? Don&#8217;t fret. With Raspian it should automount just fine, you only need to find it.</p>

<p>Run the following command to list your USB devices:</p>

<pre>
lsusb
</pre>


<p><img class="center" src="https://www.jeremymorgan.com/images/raspberry-pi-how-to-wireless-usb-03.jpg" title="How to Install A Wireless USB Network Card on Raspberry Pi" ></p>

<p>Now, you want to see all the disks that are attached to your system:</p>

<pre>
sudo fdisk -l
</pre>


<p><img class="center" src="https://www.jeremymorgan.com/images/raspberry-pi-how-to-wireless-usb-02.jpg" title="How to Install A Wireless USB Network Card on Raspberry Pi" ></p>

<p>As you can see in my case, my USB stick is mounted at /dev/sda1 so the device is connected to my pi. But where is it?</p>

<pre>
mount
</pre>


<p><img class="center" src="https://www.jeremymorgan.com/images/raspberry-pi-how-to-wireless-usb-03.jpg" title="How to Install A Wireless USB Network Card on Raspberry Pi" ></p>

<p>There it is! Under /media/MYLINUXLIVE but that probably won&#8217;t be your folder, it will show the drive label you gave it when you formatted it. (I happen to use and love the LinuxLive program whenever I can).</p>

<p>Now I can just look for the drivers on the disk and copy them to a folder in my home directory:</p>

<pre>
cd ~
mkdir usbdriver
cp -r /media/MYLINUXLIVE/driver/* usbdriver/
</pre>


<p>Now the files are copied, safely unmount the drive:</p>

<pre>
sudo udisks --unmount /dev/sda1
sudo udisks --detach /dev/sda
</pre>


<p>Now you&#8217;ll have the drivers you need, but keep in mind the device may not be supported at all.</p>

<br />


<p><a href="https://eepurl.com/bMxQr5"><img src="https://www.jeremymorgan.com/images/banners/raspberry-pi-newsletter-650.jpg" alt="Raspberry Pi Newsletter" /></a></p>

<br />


<h3>Conclusion</h3>

<p>I hope this has helped to show you how to install a wireless USB card on the Raspberry Pi. Raspian has a lot of firmware already built in and a lot of USB Wifi adapters are supported right out of the box. Wpa_supplicant makes things really easy. I decided to show how to do it from the prompt for those who want to learn more about the prompt, or install from SSH.</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/raspberry-pi-how-to-wireless-usb-01.jpg" title="How to Install A Wireless USB Network Card on Raspberry Pi" ></p>

<p>The Raspberry Pi is all about learning so I encourage you to experiment with this stuff as much as possible. The worst that will happen is you&#8217;ll need to reinstall the OS. Remember, you&#8217;re learning Linux at the same time which opens a lot of doors for your projects. Enjoy!</p>

<br />


<div>
<h4>My New Course: Hands on Internet of Things with the Raspberry Pi </h4>
<a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=DOTCOMFANS"><img src="https://www.jeremymorgan.com/images/banners/internet-of-things.jpg" alt="Internet of Things" /></a>
<br /><br />
<p>I have just released my new course titled &#8221;<a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=DOTCOMFANS">Hands on Internet of Things</a>&#8221; which is intended to be a course for people who want to get started with IoT. I&#8217;ll take you through blinking lights and reading sensors to creating YOUR own IoT endpoint and dashboard. I&#8217;m offering this special coupon for readers of my site: <a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=DOTCOMFANS">get %50 off this course here</a>. Thanks for being a reader! </p>
</div>


<br />


<p><a href="http://eepurl.com/bMxQr5">Like my IoT projects? Sign up here to be added to my IoT newsletter</a><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy CRUD for your Web API with Dapper]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/how-to-dapper-web-api/"/>
    <updated>2016-02-13T15:51:00+00:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/easy-crud-for-your-web-api-with-dapper</id>
    <content type="html"><![CDATA[<p>Full disclosure here: I don&#8217;t like ORMs. If you&#8217;re building an enormous enterprise project, you should absolutely use an ORM. If you have data you really care about and a complex, monstrous system using something like Entity Framework can save you a lot of frustration. If you&#8217;re building a simple application, or some home project it&#8217;s really unnecessary.</p>

<!-- more -->


<p></p>

<p>Recently I found an ORM that I really like: <a href="https://www.nuget.org/packages/Dapper">Dapper</a>. It&#8217;s small, simple, and fast. It can be useful on even the smallest of projects. Dapper is a simple object mapper for .Net that extends the IDbConnection interface. It contains helpers that execute queries and map results in a very elegant way. The best part is the performance is close enough to plain old SQL that it&#8217;s well worth it. It will reduce the amount of code you write as well, by a long shot.</p>

<h2>Dapper Quick Start - Console Application</h2>

<p>Just to show you how easy it is to use, let&#8217;s do a quick exercise.</p>

<p>Open up Visual Studio, and create a new Console Application</p>

<p><em>File -> New Project -> Templates -> Visual C# -> Windows -> Console Application</em></p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-01.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>Now, let&#8217;s create a MS-SQL database to connect to. Create a database, and make a note of the dbname, user and password for this.</p>

<p>Let&#8217;s create a quick table on the database using this code:</p>

<figure class='code'><figcaption><span>Creation SQL </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">USE</span> <span class="p">[</span> <span class="p">(</span><span class="n">Your</span> <span class="k">database</span> <span class="n">name</span><span class="p">)</span> <span class="p">]</span>
</span><span class='line'><span class="k">GO</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/****** Object:  Table [Customer]  ******/</span>
</span><span class='line'><span class="k">SET</span> <span class="n">ANSI_NULLS</span> <span class="k">ON</span>
</span><span class='line'><span class="k">GO</span>
</span><span class='line'>
</span><span class='line'><span class="k">SET</span> <span class="n">QUOTED_IDENTIFIER</span> <span class="k">ON</span>
</span><span class='line'><span class="k">GO</span>
</span><span class='line'>
</span><span class='line'><span class="k">SET</span> <span class="n">ANSI_PADDING</span> <span class="k">ON</span>
</span><span class='line'><span class="k">GO</span>
</span><span class='line'>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">Customer</span><span class="p">](</span>
</span><span class='line'>  <span class="p">[</span><span class="n">CustomerID</span><span class="p">]</span> <span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="k">IDENTITY</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span><span class="n">CustomerFirstName</span><span class="p">]</span> <span class="p">[</span><span class="nb">varchar</span><span class="p">](</span><span class="mi">50</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span><span class="n">CustomerLastName</span><span class="p">]</span> <span class="p">[</span><span class="nb">varchar</span><span class="p">](</span><span class="mi">50</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span><span class="n">IsActive</span><span class="p">]</span> <span class="p">[</span><span class="nb">bit</span><span class="p">]</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'> <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">PK_Customer</span><span class="p">]</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">CLUSTERED</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="p">[</span><span class="n">CustomerID</span><span class="p">]</span> <span class="k">ASC</span>
</span><span class='line'><span class="p">)</span><span class="k">WITH</span> <span class="p">(</span><span class="n">PAD_INDEX</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">STATISTICS_NORECOMPUTE</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">IGNORE_DUP_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">ALLOW_ROW_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">ALLOW_PAGE_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
</span><span class='line'><span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">GO</span>
</span><span class='line'>
</span><span class='line'><span class="k">SET</span> <span class="n">ANSI_PADDING</span> <span class="k">OFF</span>
</span><span class='line'><span class="k">GO</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s add a few records to it:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-02.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>We will grab these later.</p>

<p>Back in Visual Studio, open up your App.config file:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-03.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>and add an SQL connection string:</p>

<figure class='code'><figcaption><span>Add this to App.config </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>   <span class="nt">&lt;connectionStrings&gt;</span>
</span><span class='line'>      <span class="nt">&lt;add</span> <span class="na">name=</span><span class="s">&quot;DefaultConnection&quot;</span> <span class="na">providerName=</span><span class="s">&quot;System.Data.SqlClient&quot;</span>
</span><span class='line'>            <span class="na">connectionString=</span><span class="s">&quot;Server=server.com;Database=DapperDemo;User Id=userid; Password=mypassword;&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/connectionStrings&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously you would want to replace this with your information. Save the file.</p>

<p>Next, create a class called &#8220;Customer&#8221; that looks like this:</p>

<figure class='code'><figcaption><span>Customer.cs </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>   <span class="k">class</span> <span class="nc">Customer</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="kt">int</span> <span class="n">CustomerID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">public</span> <span class="kt">string</span> <span class="n">CustomerFirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">public</span> <span class="kt">string</span> <span class="n">CustomerLastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsActive</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save this file into your project&#8217;s namespace.</p>

<p>Install Dapper from your Package Manager Console:</p>

<blockquote><p>Install-Package Dapper</p></blockquote>

<p>Now open up Program.cs and add the following:</p>

<figure class='code'><figcaption><span>Add to Program.cs </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IDbConnection</span> <span class="n">db</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SqlConnection</span><span class="p">(</span><span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">ConnectionStrings</span><span class="p">[</span><span class="s">&quot;DefaultConnection&quot;</span><span class="p">].</span><span class="n">ConnectionString</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This sets up a connection to your database using the IDbConnection interface.</p>

<p>Add an SQL string:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">string</span> <span class="n">SqlString</span> <span class="o">=</span> <span class="ss">&quot;SELECT TOP 100 [CustomerID],[CustomerFirstName],[CustomerLastName],[IsActive] FROM [Customer]&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we&#8217;re going to use Dapper to bring our records into an object:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">ourCustomers</span> <span class="p">=</span> <span class="p">(</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;)</span><span class="n">db</span><span class="p">.</span><span class="n">Query</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">SqlString</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>What this does is pulls the values from the SQL query into a list of Customer objects. Now, some code to iterate through the results:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">Customer</span> <span class="k">in</span> <span class="n">ourCustomers</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="k">new</span> <span class="kt">string</span><span class="p">(</span><span class="sc">&#39;*&#39;</span><span class="p">,</span> <span class="m">20</span><span class="p">));</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;\nCustomer ID: &quot;</span> <span class="p">+</span> <span class="n">Customer</span><span class="p">.</span><span class="n">CustomerID</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;First Name: &quot;</span> <span class="p">+</span> <span class="n">Customer</span><span class="p">.</span><span class="n">CustomerFirstName</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Last Name: &quot;</span> <span class="p">+</span> <span class="n">Customer</span><span class="p">.</span><span class="n">CustomerLastName</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Is Active? &quot;</span> <span class="p">+</span> <span class="n">Customer</span><span class="p">.</span><span class="n">IsActive</span> <span class="p">+</span> <span class="s">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="k">new</span> <span class="kt">string</span><span class="p">(</span><span class="sc">&#39;*&#39;</span><span class="p">,</span> <span class="m">20</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, run the application and you&#8217;ll see this:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-04.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>Yes, it&#8217;s really that easy! You now have a console application reading from a database with very minimal code! Pretty Amazing stuff, but let&#8217;s take it further.</p>

<p><a href="https://github.com/JeremyMorgan/Dapper-Demo-ConsoleApp">Download this code on GitHub</a></p>

<h2>Set up a Web API using Dapper</h2>

<p>Ok, here&#8217;s where we can really let Dapper flex it&#8217;s muscles. We&#8217;ll set up an ASP.Net Web Api. First we need to set up a repository</p>

<blockquote><p>Disclaimer: This is not the best design, and I certainly wouldn&#8217;t use this for a production application, but it does serve as a good demonstration of how to use Dapper.</p></blockquote>

<h3>Setting up Repository</h3>

<p>Create a new project in Visual Studio:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-05.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>We want to create a new ASP.Net Web API project. Select &#8220;Empty&#8221; then check the &#8220;Web API&#8221; box like so:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-06.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>Next, right click on the &#8220;Models&#8221; folder and select &#8220;Add -> New Item&#8221;. We want to add a plain class (Visual C# -> Code -> Class) like we did in the last exercize. Name it &#8220;Customer.cs&#8221; and save it.</p>

<p>Our class is going to look the same as it did before:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>   <span class="k">public</span> <span class="k">class</span> <span class="nc">Customer</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="kt">int</span> <span class="n">CustomerID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">public</span> <span class="kt">string</span> <span class="n">CustomerFirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">public</span> <span class="kt">string</span> <span class="n">CustomerLastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsActive</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will be our model for this application.</p>

<p>Next, create a folder named &#8220;DAL&#8221; (Data Access Layer) and let&#8217;s create a repository. Add an interface (add -> New Item -> Visual C# -> Code -> Interface) and call it &#8220;ICustomerRepository&#8221;.</p>

<p>In here we&#8217;ll add the methods for our interface:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>   <span class="k">internal</span> <span class="k">interface</span> <span class="n">ICustomerRespository</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">GetCustomers</span><span class="p">(</span><span class="kt">int</span> <span class="n">amount</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sort</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Customer</span> <span class="nf">GetSingleCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">customerId</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">bool</span> <span class="nf">InsertCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">bool</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">customerId</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">bool</span> <span class="nf">UpdateCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>These will cover our CRUD (Create, Read, Update, Delete) operations, plus a list operation.</p>

<p>Now we&#8217;ll create a CustomerRepository class that implements this interface: (add -> New Item -> Visual C# -> Code -> Class) and call it CustomerRespository.cs.</p>

<p>This class should implement the interface and it&#8217;s members, to start out let&#8217;s make it look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="n">IDbConnection</span> <span class="n">_db</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SqlConnection</span><span class="p">(</span><span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">ConnectionStrings</span><span class="p">[</span><span class="s">&quot;DefaultConnection&quot;</span><span class="p">].</span><span class="n">ConnectionString</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerRespository</span> <span class="p">:</span> <span class="n">ICustomerRespository</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">GetCustomers</span><span class="p">(</span><span class="kt">int</span> <span class="n">amount</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sort</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="n">Customer</span> <span class="nf">GetSingleCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">customerId</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="kt">bool</span> <span class="nf">InsertCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="kt">bool</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">customerId</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="kt">bool</span> <span class="nf">UpdateCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We will now fill out these methods for our repository, following the CRUD pattern.</p>

<h3>CREATE Customer entries with InsertCustomer</h3>

<p>In this method we&#8217;ll insert a new customer:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">InsertCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">rowsAffected</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_db</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="s">@&quot;INSERT Customer([CustomerFirstName],[CustomerLastName],[IsActive]) values (@CustomerFirstName, @CustomerLastName, @IsActive)&quot;</span><span class="p">,</span><span class="k">new</span> <span class="p">{</span> <span class="n">CustomerFirstName</span> <span class="p">=</span> <span class="n">ourCustomer</span><span class="p">.</span><span class="n">CustomerFirstName</span><span class="p">,</span> <span class="n">CustomerLastName</span> <span class="p">=</span> <span class="n">ourCustomer</span><span class="p">.</span><span class="n">CustomerLastName</span><span class="p">,</span> <span class="n">IsActive</span> <span class="p">=</span> <span class="k">true</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">rowsAffected</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you look closely, we are using a parameterized query here. Then you pass in an object containing those parameters, taken from the object we passed in. This is pretty straightforward.</p>

<h3>READ Customer entries with GetSingleCustomer</h3>

<p>With this method we&#8217;ll retrieve a single customer by CustomerID:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>   <span class="k">public</span> <span class="n">Customer</span> <span class="nf">GetSingleCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">customerId</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">_db</span><span class="p">.</span><span class="n">Query</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="s">&quot;SELECT[CustomerID],[CustomerFirstName],[CustomerLastName],[IsActive] FROM [Customer] WHERE CustomerID =@CustomerID&quot;</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">CustomerID</span> <span class="p">=</span> <span class="n">customerId</span> <span class="p">}).</span><span class="n">SingleOrDefault</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple stuff. Since this is an iDisposable, a using statement should be used here. But for demo purposes this works.</p>

<h3>UPDATE Customer entries with UpdateCustomer</h3>

<p>To update a customer we&#8217;ll need to pass in a Customer object, and we&#8217;ll update the record based on what&#8217;s in that object.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">UpdateCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">rowsAffected</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_db</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="s">&quot;UPDATE [Customer] SET [CustomerFirstName] = @CustomerFirstName ,[CustomerLastName] = @CustomerLastName, [IsActive] = @IsActive WHERE CustomerID = &quot;</span> <span class="p">+</span> <span class="n">ourCustomer</span><span class="p">.</span><span class="n">CustomerID</span><span class="p">,</span> <span class="n">ourCustomer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">rowsAffected</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this statement we send an update with parameterized queries and map the ourCustomer object to the record to be updated. We&#8217;ll change the values in this object in our controller previous to this action.</p>

<h3>DELETE Item with DeleteCustomer Method</h3>

<p>In this method we&#8217;ll send a simple parameterized delete command based on the integer we pass in:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">customerId</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">rowsAffected</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_db</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="s">@&quot;DELETE FROM [jeremy].[Customer] WHERE CustomerID = @CustomerID&quot;</span><span class="p">,</span><span class="k">new</span><span class="p">{</span> <span class="n">CustomerID</span> <span class="p">=</span> <span class="n">customerId</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">rowsAffected</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Like similar methods we pass a true/false based on the number of records affected, if it&#8217;s not zero we&#8217;ll assume it was successful.</p>

<h3>LIST Items with GetCustomers Method</h3>

<p>In this method we are going to get a list of items. You can select how many items, and how you want to sort them.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">GetCustomers</span><span class="p">(</span><span class="kt">int</span> <span class="n">amount</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sort</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">_db</span><span class="p">.</span><span class="n">Query</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="s">&quot;SELECT TOP &quot;</span><span class="p">+</span> <span class="n">amount</span> <span class="p">+</span> <span class="s">&quot; [CustomerID],[CustomerFirstName],[CustomerLastName],[IsActive] FROM [Customer] ORDER BY CustomerID &quot;</span> <span class="p">+</span> <span class="n">sort</span><span class="p">).</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Disclaimer (again): If you insist on using this code for a real project, please add exception handling at the very least.</p></blockquote>

<p>Dapper&#8217;s Query method takes the query results, maps it to the Customer object and adds it to a list. In this one line of code. Good stuff.</p>

<p>Now we have our simple repository set up, so now we need to create a controller and wire things up.</p>

<p>One last thing, like we did with our console application, you will need to open up Web.Config and add your connection string:</p>

<figure class='code'><figcaption><span>lang </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;connectionStrings>
</span><span class='line'>      &lt;add name="DefaultConnection" providerName="System.Data.SqlClient"
</span><span class='line'>            connectionString="Server=server.com;Database=DapperDemo;User Id=userid; Password=mypassword;" />
</span><span class='line'>   &lt;/connectionStrings></span></code></pre></td></tr></table></div></figure>


<p>We will be using this for our Web API connection.</p>

<h2>Create a Web API Controller</h2>

<p>Now we&#8217;re going to create a Web API to connect to our data. One thing I would definitely suggest is <a href="https://www.getpostman.com">downloading POSTman</a>. This is a Chrome extension that makes testing and developing REST APIs a breeze.</p>

<p>For the first step, add the repository to your class, by adding the following to it:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="n">CustomerRespository</span> <span class="n">_ourCustomerRespository</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CustomerRespository</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will be the instance of our repository to work with. We will need a controller to interact with this repository.</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-07.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>Let&#8217;s call this &#8220;CustomerController&#8221;.</p>

<p>You&#8217;ll see a set of methods listed in the code that will interact with our repository.</p>

<ul>
<li>IEnumerable<string> Get() = <strong>LIST</strong></li>
<li>string Get(int id) = <strong>READ</strong></li>
<li>void Post([FromBody]string value) = <strong>CREATE</strong></li>
<li>void Put(int id, [FromBody]string value) = <strong>UPDATE</strong></li>
<li>void Delete(int id) = <strong>DELETE</strong></li>
</ul>


<p>With this controller we can perform all the methods we need to start working with our customers.</p>

<h3>Create Method</h3>

<p>Let&#8217;s start with creating a record. The first thing we&#8217;ll want to do is create a &#8220;response&#8221; to let us know whether the object was created or not. For this exercise we&#8217;ll just use a true/false value.</p>

<p>Let&#8217;s now refactor our method to make it behave how we&#8217;d like.</p>

<p>To do this, we&#8217;ll want to start with the Post method on line 25. I&#8217;m a huge fan of <a href="http://www.asp.net/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2">attribute routing</a> in Web API, so let&#8217;s decorate this method a bit. Add the following before the method on the controller:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Route(&quot;Customers&quot;)]</span>
</span><span class='line'><span class="na">[HttpPost]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then let&#8217;s refactor the method signature:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">Post</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way it will return a boolean result based on whether the record was inserted or not.</p>

<p>Inside the method, let&#8217;s just return the InsertCustomer call:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">return</span> <span class="n">_ourCustomerRespository</span><span class="p">.</span><span class="n">InsertCustomer</span><span class="p">(</span><span class="n">ourCustomer</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will be our method of inserting (sans any form of sanitization or exception handling).</p>

<p>In Postman, create a POST request to your URL that looks like this:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-08.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>Here we are sending a JSON object in a POST that matches our model.</p>

<p>If successful it should look like this:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-09.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>And when you open up SSMS and select all records you should see this:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-10.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>You&#8217;ve just inserted a new record! Here&#8217;s what the final method looks like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Route(&quot;Customers&quot;)]</span>
</span><span class='line'><span class="na">[HttpPost]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">Post</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">_ourCustomerRespository</span><span class="p">.</span><span class="n">InsertCustomer</span><span class="p">(</span><span class="n">ourCustomer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is about as bare bones as you can get with ASP.Net.</p>

<h3>Read Method</h3>

<p>Now that we&#8217;ve created some records we are going to want to read a record. For this we&#8217;ll use the get method that takes an id as a parameter. Let&#8217;s add the routes for that:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Route(&quot;Customers/{id}&quot;)]</span>
</span><span class='line'><span class="na">[HttpGet]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This tells our controller to route any GET request with a parameter to this method, and our parameter name is &#8220;id&#8221;.</p>

<p>Next we&#8217;ll call our repository using that id:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">return</span> <span class="n">_ourCustomerRespository</span><span class="p">.</span><span class="n">GetSingleCustomer</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, send a GET request with postman, and append a CustomerId to the URL, and you should see this:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-11.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>This is a pretty easy way to grab a single record. Now let&#8217;s update that record.</p>

<h3>Update Method</h3>

<p>In this method we are going to update an id. We&#8217;ll do this by sending a JSON object representing the customer record. Whatever is contained in that record is what we&#8217;ll want to update it to, so if Freda and Lloyd get married, we want to send this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;CustomerID&quot;</span><span class="o">:</span> <span class="s2">&quot;5&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;CustomerFirstName&quot;</span><span class="o">:</span> <span class="s2">&quot;Freda&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;CustomerLastName&quot;</span><span class="o">:</span> <span class="s2">&quot;Christmas&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;IsActive&quot;</span><span class="o">:</span> <span class="s2">&quot;True&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>to our PUT method. Since the last name is now different our repository will update the record with all the information in this object, and change the last name. We are making a PUT request to /Customers and sending the new object.</p>

<p>We start with the decorators to add to the method:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Route(&quot;Customers&quot;)]</span>
</span><span class='line'><span class="na">[HttpPut]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we&#8217;ll need to change the signature:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">Put</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This makes it so the method takes in the new object and updates the record accordingly. If it&#8217;s successful it will return true. Add the following to the method body:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">return</span> <span class="n">_ourCustomerRespository</span><span class="p">.</span><span class="n">UpdateCustomer</span><span class="p">(</span><span class="n">ourCustomer</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now prepare your command in POSTman, it should look like this:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-12.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>And send it. If successful it should return true, and your record should be updated:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-13.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>Congratulations LLoyd and Freda!</p>

<p>The final method in your controller should look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Route(&quot;Customers&quot;)]</span>
</span><span class='line'><span class="na">[HttpPut]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">Put</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">_ourCustomerRespository</span><span class="p">.</span><span class="n">UpdateCustomer</span><span class="p">(</span><span class="n">ourCustomer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Delete Method</h3>

<p>In this method we&#8217;re going to delete a record by it&#8217;s ID. This will be done by sending a DELETE command to a url with an id as a parameter. The decorators look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Route(&quot;Customers/{id}&quot;)]</span>
</span><span class='line'><span class="na">[HttpDelete]</span>
</span></code></pre></td></tr></table></div></figure>


<p>and we&#8217;ll change the return type on the method to a boolean:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>and add the call to our repository in our method:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">return</span> <span class="n">_ourCustomerRespository</span><span class="p">.</span><span class="n">DeleteCustomer</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we&#8217;re ready to go. Let&#8217;s create the command in POSTman:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-14.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>Send the DELETE to the url of /Customers/2. Sorry Harry, but you gotta go.</p>

<p>Afterwards it should look like this:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-15.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>You&#8217;ve now deleted a record!</p>

<h3>List Method</h3>

<p>Ok for the last one, we want to make a list of every customer in the database. Or maybe a few customers. Remember we put some parameters into the GetCustomers method so we could select an amount of customers and sort them by ID. So for the default Get method let&#8217;s just grab 10 customers (if available) and sort them ascending:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Route(&quot;Customers&quot;)]</span>
</span><span class='line'><span class="na">[HttpGet]</span>
</span><span class='line'><span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">Get</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">_ourCustomerRespository</span><span class="p">.</span><span class="n">GetCustomers</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="s">&quot;ASC&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In POSTMan, send a get to the url of /Customers. It should look like this:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-16.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>Pretty easy right? But lets make it so we can choose the number and sort of the output also. Create another method that looks like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Route(&quot;Customers/{amount}/{sort}&quot;)]</span>
</span><span class='line'><span class="na">[HttpGet]</span>
</span><span class='line'><span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">Get</span><span class="p">(</span><span class="kt">int</span> <span class="n">amount</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sort</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">_ourCustomerRespository</span><span class="p">.</span><span class="n">GetCustomers</span><span class="p">(</span><span class="n">amount</span><span class="p">,</span> <span class="n">sort</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we&#8217;re overloading the Get method and sending additional parameters. As we&#8217;ve seen before, we set up a decorator to take the amount and sort from the URL. These are passed into the method and then passed to the repository. If you send a GET to /Customers/3/desc it should look like this:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-17.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>Pretty powerful stuff! That concludes the API Methods, of course you can add many more and build complex queries and methods that go beyond this.</p>

<p><a href="https://github.com/JeremyMorgan/Dapper-Demo-Web-API">Download this code on GitHub</a></p>

<p><a href="https://github.com/JeremyMorgan/Dapper-Demo-Web-API/tree/master/Postman">Get the POSTMan collection here</a></p>

<h2>Summary</h2>

<p>Though this was a fairly long tutorial, you can see how much time and code you can save using Dapper. It&#8217;s only slightly different performance wise from doing raw SQL Connections. <a href="https://github.com/StackExchange/dapper-dot-net#performance">There&#8217;s a good performance comparison here</a>.</p>

<p>For a long time I would choose to write out SQL by hand for the extra performance and power, especially with small projects. Entity Framework always seemed like overkill for most stuff. But after discovering Dapper it&#8217;s far easier and faster than writing it out, without the extra overhead of EF. It&#8217;s a solid win.</p>

<p>I hope this has helped you explore Dapper and inspire you to make something with it. You&#8217;ll find it&#8217;s pretty great. If you have any questions or have something to say leave it in the comments or <a href="https://twitter.com/JeremyCMorgan">bug me on Twitter</a>.</p>

<p>-Jeremy</p>

<br />


<br />


<br />


<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://eepurl.com/b3Y9Wz"><strong>get the hacker newsletter</strong></a> 100% spam free! 
<br /><br />
You can also follow my projects on GitHub:<br />
<iframe src="https://ghbtns.com/github-btn.html?user=JeremyMorgan&type=follow&count=true&size=large" frameborder="0" scrolling="0" width="220px" height="30px"></iframe>
</div>


<br />


<br />


<p><a href="https://www.jeremymorgan.com//pluralsight.pxf.io/c/1221983/431405/7490"><img src="https://www.jeremymorgan.com//a.impactradius-go.com/display-ad/7490-431405" border="0" alt="" width="320" height="50"/></a><img height="0" width="0" src="https://www.jeremymorgan.com//pluralsight.pxf.io/i/1221983/431405/7490" style="position:absolute;visibility:hidden;" border="0" /></p>

<br />




<br />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up the Adafruit Huzzah ESP8266 Breakout]]></title>
    <link href="https://www.jeremymorgan.com/internet-of-things/arduino-projects/huzzah-ESP8266-breakout/"/>
    <updated>2016-01-12T21:16:00+00:00</updated>
    <id>https://www.jeremymorgan.com/internet-of-things/arduino-projects/review-adafruit-huzzah-esp8266-breakout</id>
    <content type="html"><![CDATA[<p>Recently I showed a friend of mine some of the projects I&#8217;ve working on with Arduino and Wifi, and he introduced me to the <a href="http://www.esp8266.com/">ESP8266 chip</a>. I found them all over the internet ranging from $1.50 US to $20, with a variety of configurations and manufacturers. I decided to go with a company I trust, Adafruit Industries, and see what their offering is like.</p>

<!-- more -->


<p>Full disclosure: I was not paid or compensated by Adafruit, I purchased this product. You can <a href="https://www.adafruit.com/products/2471">grab one for $9.95 here</a>.</p>

<h2>Assembly</h2>

<p>With Adafruit products you can expect a few things:</p>

<ul>
<li>A good design</li>
<li>Software for devices</li>
<li>Lots of instructions</li>
<li>Soldering</li>
</ul>


<p>As I&#8217;ve said before I think soldering components is a good thing, even for beginners. It gives you more freedom with how you set up your boards, and it forces you to get good at soldering. This kit comes to you looking like this:</p>

<p><img src="https://www.jeremymorgan.com/images/huzzah-esp8266/adafruit-huzzah-ESP8266-01.jpg" alt="Adafruit Huzzah ESP8266" /></p>

<p>Its a board, with some pins (extras) and that&#8217;s it. I generally like to place them in the breadboard when soldering to keep everything straight. Some have warned against this because you might damage your breadboard. If you are getting the pins that hot or slopping that much solder you&#8217;re doing it wrong. Practice on some old electronic stuff!</p>

<p><img src="https://www.jeremymorgan.com/images/huzzah-esp8266/adafruit-huzzah-ESP8266-02.jpg" alt="Adafruit Huzzah ESP8266" /></p>

<p>In a few minutes you should have something that looks like this:</p>

<p><img src="https://www.jeremymorgan.com/images/huzzah-esp8266/adafruit-huzzah-ESP8266-03.jpg" alt="Adafruit Huzzah ESP8266" /></p>

<p>It&#8217;s ready to program!</p>

<h2>Setting up the Software</h2>

<p>I should note there are a few ways to connect to this device to program it. I chose the easy way, and got a <a href="http://www.adafruit.com/products/70">FTDI Serial USB cable</a> to do this. I figure it won&#8217;t be the last time I program a serial device, and I freely admit I am NOT an electronic engineer so this route worked well for me.</p>

<p>The first thing I thought I&#8217;d do, is the &#8220;hello world&#8221; of electronics and blink an LED.</p>

<p><img src="https://www.jeremymorgan.com/images/huzzah-esp8266/adafruit-huzzah-ESP8266-04.jpg" alt="Adafruit Huzzah ESP8266" /></p>

<p>To get the software you need, head on over to <a href="https://github.com/esp8266/Arduino">this GitHub repo</a> and download the .zip file and save it in your libraries folder.</p>

<p>Start Arduino and open Preferences window.</p>

<p><img src="https://www.jeremymorgan.com/images/huzzah-esp8266/adafruit-huzzah-ESP8266-05.jpg" alt="Adafruit Huzzah ESP8266" /></p>

<p>Enter http://arduino.esp8266.com/stable/package_esp8266com_index.json into Additional Board Manager URLs field. You can add multiple URLs, separating them with commas. Click OK.</p>

<p>Open Boards Manager from Tools > Board menu and install ESP8266 platform (and don&#8217;t forget to select your ESP8266 board from Tools > Board menu after installation).</p>

<p><img src="https://www.jeremymorgan.com/images/huzzah-esp8266/adafruit-huzzah-ESP8266-06.jpg" alt="Adafruit Huzzah ESP8266" /></p>

<p><img src="https://www.jeremymorgan.com/images/huzzah-esp8266/adafruit-huzzah-ESP8266-07.jpg" alt="Adafruit Huzzah ESP8266" /></p>

<p>Note, you may need to change your port also:</p>

<p><img src="https://www.jeremymorgan.com/images/huzzah-esp8266/adafruit-huzzah-ESP8266-08.jpg" alt="Adafruit Huzzah ESP8266" /></p>

<h3>Write the Code</h3>

<p>The code to blink an LED is super simple. Create in the already familiar Arduino IDE:</p>

<p><img src="https://www.jeremymorgan.com/images/huzzah-esp8266/adafruit-huzzah-ESP8266-09.jpg" alt="Adafruit Huzzah ESP8266" /></p>

<p>Here&#8217;s the actual code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// initialize digital pin 14 as an output.</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// the loop function runs over and over again forever</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>   <span class="c1">// turn the LED on (HIGH is the voltage level)</span>
</span><span class='line'>  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>              <span class="c1">// wait for a second</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>    <span class="c1">// turn the LED off by making the voltage LOW</span>
</span><span class='line'>  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>              <span class="c1">// wait for a second</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to push the code to the ESP8266, you must hold down GPIO0 then press and release reset:</p>

<p><img src="https://www.jeremymorgan.com/images/huzzah-esp8266/adafruit-huzzah-ESP8266-10.jpg" alt="Adafruit Huzzah ESP8266" /></p>

<p>Once you see the red light dim, it&#8217;s ready to flash.</p>

<p><img src="https://www.jeremymorgan.com/images/huzzah-esp8266/adafruit-huzzah-ESP8266-11.jpg" alt="Adafruit Huzzah ESP8266" /></p>

<p>Once complete, you&#8217;ll have a blinking LED!</p>

<p><img src="https://www.jeremymorgan.com/images/huzzah-esp8266/adafruit-huzzah-ESP8266-12.jpg" alt="Adafruit Huzzah ESP8266" /></p>

<h3>Playing with Sensors</h3>

<p>I decided to get a little more creative and hook a couple sensors up to this. I am not going to go into great detail, if you want to do this <a href="https://github.com/IoT-Projects/IoT-home-temp-tracking">head over to this repo</a> and get code for turning your ESP8266 into a home temperature tracker. But it was super easy to set up.</p>

<p><img src="https://www.jeremymorgan.com/images/huzzah-esp8266/adafruit-huzzah-ESP8266-13.jpg" alt="Adafruit Huzzah ESP8266" /></p>

<p>Using the <a href="https://github.com/adafruit/DHT-sensor-library">Adafruit DHT Libraries</a> and some code from the IoT home temp repo I was able to get it running in minutes. Very easy!</p>

<p>I even ended up sending the data to Sparkfun, you can see the live feed here &#8211;> <a href="https://data.sparkfun.com/streams/n1L3R6yql5I3WYrxKXK7">data.sparkfun.com</a> (it may go down at any time).</p>

<h2>Conclusion</h2>

<p>I really enjoyed the <a href="https://www.jeremymorgan.com/internet-of-things/arduino-projects/how-to-wifi-arduino/">CC3000 Arduino Wifi breakout</a> and would still use it if I needed additional data pins. With the ESP2866 product I have a much smaller footprint, it doesn&#8217;t even require an Arduino, and it is super easy to set up. Here&#8217;s how to know if you should use an ESP2866:</p>

<ul>
<li>You don&#8217;t need a full OS</li>
<li>You have a few sensors</li>
<li>You want to simply grab data and push it</li>
</ul>


<p>This is where the ESP8266 really shines. It&#8217;s dead simple and does one thing and does it well. I can&#8217;t wait to start building more projects with this, and at $10 you really should too.</p>

<br />


<br />


<br />


<div>
<h4>My New Course: Hands on Internet of Things with the Raspberry Pi </h4>
<a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=DOTCOMFANS"><img src="https://www.jeremymorgan.com/images/banners/internet-of-things.jpg" alt="Internet of Things" /></a>
<br /><br />
<p>I have just released my new course titled &#8221;<a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=DOTCOMFANS">Hands on Internet of Things</a>&#8221; which is intended to be a course for people who want to get started with IoT. I&#8217;ll take you through blinking lights and reading sensors to creating YOUR own IoT endpoint and dashboard. I&#8217;m offering this special coupon for readers of my site: <a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=DOTCOMFANS">get %50 off this course here</a>. Thanks for being a reader! </p>
</div>


<br />


<p><a href="http://eepurl.com/bMxQr5">Like my IoT projects? Sign up here to be added to my IoT newsletter</a><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Failed Request Tracing with IIS]]></title>
    <link href="https://www.jeremymorgan.com/blog/iis-devops/failed-request-tracing-iis/"/>
    <updated>2016-01-08T19:42:00+00:00</updated>
    <id>https://www.jeremymorgan.com/blog/iis-devops/failed-request-tracing-with-iis</id>
    <content type="html"><![CDATA[<p>A great tool I&#8217;ve discovered recently is the Failed Request Tracing Tool is IIS. If you&#8217;re building an ASP.Net application and having issues with requests it&#8217;s a fantastic tool. I&#8217;ll show you how to use it.</p>

<!-- more -->


<p>Are you:</p>

<ul>
<li>Getting a 500 error with messages suppressed?</li>
<li>Getting a permission denied and don&#8217;t know where it&#8217;s being denied?</li>
<li>Getting an error that doesn&#8217;t show up in the logs?</li>
</ul>


<p>Each of these are good candidates for using the failed request tracing tool. This captures data right when the server gets hit. These are activities that happen right at the front, even before they can be logged.</p>

<p>In your IIS Manager, select your website. In the Actions panel under Manage Web Site click &#8220;Failed Request Tracing..&#8221;</p>

<p><img src="https://www.jeremymorgan.com/images/failed-request-tracing-IIS/failed-request-tracing-IIS-001.jpg" alt="failed request tracing" /></p>

<p>In the next screen, you&#8217;ll enable it, and click OK.</p>

<p><img src="https://www.jeremymorgan.com/images/failed-request-tracing-IIS/failed-request-tracing-IIS-002.jpg" alt="failed request tracing" /></p>

<p>Next, find the &#8220;Failed Request Tracing Rules&#8221; icon, and click it:</p>

<p><img src="https://www.jeremymorgan.com/images/failed-request-tracing-IIS/failed-request-tracing-IIS-003.jpg" alt="failed request tracing" /></p>

<p>In the next screen, we&#8217;ll add a rule. Right click in the open area and select &#8220;Add&#8221;</p>

<p><img src="https://www.jeremymorgan.com/images/failed-request-tracing-IIS/failed-request-tracing-IIS-004.jpg" alt="failed request tracing" /></p>

<p>Select the content you&#8217;d like to trace (I usually select all):</p>

<p><img src="https://www.jeremymorgan.com/images/failed-request-tracing-IIS/failed-request-tracing-IIS-005.jpg" alt="failed request tracing" /></p>

<p>On this screen, type in 400-999 to capture the full range of errors</p>

<p><img src="https://www.jeremymorgan.com/images/failed-request-tracing-IIS/failed-request-tracing-IIS-006.jpg" alt="failed request tracing" /></p>

<p>Select your trace providers (I usually select all of them)</p>

<p><img src="https://www.jeremymorgan.com/images/failed-request-tracing-IIS/failed-request-tracing-IIS-007.jpg" alt="failed request tracing" /></p>

<p>Then, make a request to your web site (either through browser, ajax, etc)</p>

<p>Next in your inetpub folder under logs, you&#8217;ll see a new FailedReqLogFiles folder. In there will be generated folders. Select the latest one.</p>

<p><img src="https://www.jeremymorgan.com/images/failed-request-tracing-IIS/failed-request-tracing-IIS-008.jpg" alt="failed request tracing" /></p>

<p>In here you&#8217;ll see a set of xml files for each individual request.</p>

<p><img src="https://www.jeremymorgan.com/images/failed-request-tracing-IIS/failed-request-tracing-IIS-009.jpg" alt="failed request tracing" /></p>

<p>Double click to open it up, and you&#8217;ll see very detailed information. In this case it shows I have a certificate error, that is not explained on the error page or the error log, but I&#8217;ve found it here and can move on.</p>

<p><img src="https://www.jeremymorgan.com/images/failed-request-tracing-IIS/failed-request-tracing-IIS-010.jpg" alt="failed request tracing" /></p>

<p>And that&#8217;s it! Make sure to turn it off once you&#8217;ve solved your problem.</p>

<p>While IIS admins have probably been using this for years, it&#8217;s a helpful too for developers as well, especially ones who work on implementation as well as development.</p>

<p>Let me know in the comments what you think.</p>

<ul>
<li>Jeremy</li>
</ul>


<br />


<br />


<br />


<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I&#8217;m constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://eepurl.com/b3Y9Wz"><strong>get the hacker newsletter</strong></a> 100% spam free! 
<br /><br />
You can also follow my projects on GitHub:<br />
<iframe src="https://ghbtns.com/github-btn.html?user=JeremyMorgan&type=follow&count=true&size=large" frameborder="0" scrolling="0" width="220px" height="30px"></iframe>
</div>


<br />


<br />


<p><a href="https://www.jeremymorgan.com//pluralsight.pxf.io/c/1221983/431405/7490"><img src="https://www.jeremymorgan.com//a.impactradius-go.com/display-ad/7490-431405" border="0" alt="" width="320" height="50"/></a><img height="0" width="0" src="https://www.jeremymorgan.com//pluralsight.pxf.io/i/1221983/431405/7490" style="position:absolute;visibility:hidden;" border="0" /></p>

<br />




<br />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Adafruit IO]]></title>
    <link href="https://www.jeremymorgan.com/internet-of-things/how-to-adafruit-io/"/>
    <updated>2015-12-26T20:31:28+00:00</updated>
    <id>https://www.jeremymorgan.com/internet-of-things/getting-started-with-adafruit-io</id>
    <content type="html"><![CDATA[<br />


<p><a href="https://eepurl.com/bMxQr5"><img src="https://www.jeremymorgan.com/images/banners/raspberry-pi-newsletter-650.jpg" alt="Raspberry Pi Newsletter" /></a></p>

<br />


<p>Earlier this year Adafruit Industries put their IoT dashboard <a href="http://www.adafruit.io">Adafruit.IO</a> into Beta, and it looks pretty cool. I&#8217;ll show you how to set up a dashboard using one of my mini weather station designs for data input. You may remember <a href="https://www.jeremymorgan.com/tutorials/raspberry-pi/how-to-weather-station-raspberry-pi/">this project</a> from a few months ago. I&#8217;ll be adding yet another endpoint to the project on Adafruit.IO.</p>

<!-- more -->


<h2>Setting up the Feeds</h2>

<p>Adafruit IO uses &#8220;feeds&#8221; for the data used in your dashboard. This feed contains the raw data you&#8217;ll be looking at, such as a temperature reading. This data can be populated through a REST API, Python, Ruby, and NodeJS clients, or uploading a .csv. I&#8217;m going to be using the REST Api called from a Python script in <a href="https://github.com/JeremyMorgan/Raspberry_Pi_Weather_Station">this project</a>.</p>

<p>The first step is to create a feed:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/adafruit-io/adafruit-io-how-to-01.jpg" title="&#34;Adafruit IO How To&#34;" alt="&#34;Adafruit IO How To&#34;"></p>

<p>After creating it you&#8217;ll be given a chance to edit some metadata:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/adafruit-io/adafruit-io-how-to-02.jpg" title="&#34;Adafruit IO How To&#34;" alt="&#34;Adafruit IO How To&#34;"></p>

<p>After your feed is created, you can edit attributes such as:</p>

<ul>
<li>Name</li>
<li>Description</li>
<li>License</li>
<li>Public / Private setting</li>
</ul>


<p>This is pretty neat because you can make your feeds public, and specify how you would like them used. If this service gains a big following this opens a ton of doors for us.</p>

<p>In my case I set up feeds for each piece of data I want on my dashboard that will come from the Raspberry Pi with the corresponding sensors wired up:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/adafruit-io/adafruit-io-how-to-03.jpg" title="&#34;Adafruit IO How To&#34;" alt="&#34;Adafruit IO How To&#34;"></p>

<p>Next I&#8217;ll show you how I populated them.</p>

<br />


<p><a href="https://eepurl.com/bMxQr5"><img src="https://www.jeremymorgan.com/images/banners/raspberry-pi-newsletter-650.jpg" alt="Raspberry Pi Newsletter" /></a></p>

<br />


<h2>Working with the Feed API</h2>

<p>For this project we&#8217;re going to use the feed REST API. <a href="https://learn.adafruit.com/adafruit-io-basics-feeds/resources">You can find full documentation here</a>. I won&#8217;t go into great detail with interacting with the API, but instead explain what I&#8217;ve done so far. I encourage you to dig into it and take a look.</p>

<p>First, the base URL is:</p>

<blockquote><p><a href="https://io.adafruit.com/api">https://io.adafruit.com/api</a></p></blockquote>

<p>Let&#8217;s send a few requests to it and see how it works.</p>

<p>Note: You will need your AIO key for all requests, you can get this key in the upper right hand corner of your feed view with the &#8220;View AIO keys&#8221; button:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/adafruit-io/adafruit-io-how-to-04.jpg" title="&#34;Adafruit IO How To&#34;" alt="&#34;Adafruit IO How To&#34;"></p>

<p>To send a simple request, I&#8217;ll use CURL to test it out. I sent the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl https://io.adafruit.com/api/feeds?x-aio-key=[MY AIO KEY]</span></code></pre></td></tr></table></div></figure>


<p>It shows the following response (showing a list of my feeds)</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/adafruit-io/adafruit-io-how-to-05.jpg" title="&#34;Adafruit IO How To&#34;" alt="&#34;Adafruit IO How To&#34;"></p>

<p>Using similar REST commands, we&#8217;ll send data to the feeds. I&#8217;ll use Postman for building and testing these commands.</p>

<p>Create a new request in Postman, using the following URL:</p>

<blockquote><p>https://io.adafruit.com/api/feeds/temperature/data</p></blockquote>

<p>Set the x-aio-key header with your key:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/adafruit-io/adafruit-io-how-to-06.jpg" title="&#34;Adafruit IO How To&#34;" alt="&#34;Adafruit IO How To&#34;"></p>

<p>and send a form value like so:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/adafruit-io/adafruit-io-how-to-07.jpg" title="&#34;Adafruit IO How To&#34;" alt="&#34;Adafruit IO How To&#34;"></p>

<p>After sending it you should see a result like this:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/adafruit-io/adafruit-io-how-to-08.jpg" title="&#34;Adafruit IO How To&#34;" alt="&#34;Adafruit IO How To&#34;"></p>

<p>You&#8217;ve just sent a piece of data to your feed (I recommend deleting test entries of course). Now we&#8217;ll integrate that into the script on the Raspberry Pi that&#8217;s gathering data.</p>

<h2>Integrating the REST Calls Into the Weather Station</h2>

<p>For this part, I&#8217;m going to use the code from the <a href="https://github.com/JeremyMorgan/Raspberry_Pi_Weather_Station">Raspberry Pi Mini Weather Station</a> I set up a few months ago. I&#8217;ve got this sitting in my garage collecting data (going to both an Azure site and a Python/Linux endpoint) and this will make a nice realtime monitor for it.</p>

<p>If you want to use this code as a base to start, clone it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/JeremyMorgan/Raspberry_Pi_Weather_Station.git</span></code></pre></td></tr></table></div></figure>


<p>If you want to replicate my results exactly, you&#8217;ll want to make sure it&#8217;s set up as described in the <a href="https://www.jeremymorgan.com/tutorials/raspberry-pi/how-to-weather-station-raspberry-pi/">Raspberry Pi Mini Weather Station</a> project.</p>

<p>Here we&#8217;ll open up readings.py, and add &#8220;import urllib&#8221; to the top, since we&#8217;ll be using that in addition to the urllib2 we&#8217;ve been using.</p>

<p>Then we&#8217;ll add an additional call (for temperature). We start by adding a variable for my AIO key:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/adafruit-io/adafruit-io-how-to-09.jpg" title="&#34;Adafruit IO How To&#34;" alt="&#34;Adafruit IO How To&#34;"></p>

<p>Next we&#8217;ll go down add the additional call. Add the URL for the 3rd call here:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>url3 = 'https://io.adafruit.com/api/feeds/temperature/data'</span></code></pre></td></tr></table></div></figure>


<p>Next, let&#8217;s create a 3rd request. The data object for this one will be a little different from the others in the file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ftemp = round((9.0 / 5.0  * avgTemp + 32), 2)
</span><span class='line'>values3 = {'value' : ftemp }</span></code></pre></td></tr></table></div></figure>


<p>We have converted it to Farenhiet and created a small tuple called &#8220;values&#8221;</p>

<p>The request for this will be different from the others in the file as well. We&#8217;re going to urlencode the value, then add a different content type header, and the aiokey. It will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>data3 = urllib.urlencode(values3)
</span><span class='line'>req3 = urllib2.Request(url3, data3)
</span><span class='line'>req3.add_header('Content-Type','application/x-www-form-urlencoded; charset=UTF-8')
</span><span class='line'>req3.add_header('x-aio-key',aiokey)
</span><span class='line'>
</span><span class='line'>response3 = urllib2.urlopen(req3)</span></code></pre></td></tr></table></div></figure>


<p>Now, after saving the file you should now be sending data to the endpoint.</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/adafruit-io/adafruit-io-how-to-10.jpg" title="&#34;Adafruit IO How To&#34;" alt="&#34;Adafruit IO How To&#34;"></p>

<p>You should also see entries for when the data is sent:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/adafruit-io/adafruit-io-how-to-11.jpg" title="&#34;Adafruit IO How To&#34;" alt="&#34;Adafruit IO How To&#34;"></p>

<p>Congratulations, you&#8217;ve got a feed going! Repeat this process for the other measurements you want to add to your dashboard. I added in the following:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/adafruit-io/adafruit-io-how-to-12.jpg" title="&#34;Adafruit IO How To&#34;" alt="&#34;Adafruit IO How To&#34;"></p>

<p>Let&#8217;s create a dashboard next to view the data.</p>

<br />


<p><a href="https://eepurl.com/bMxQr5"><img src="https://www.jeremymorgan.com/images/banners/raspberry-pi-newsletter-650.jpg" alt="Raspberry Pi Newsletter" /></a></p>

<br />


<h2>Creating an Adafruit IO Dashboard</h2>

<p>Now that you have some feeds gathering info, you can create a dashboard to view it. The dashboard is a customized window into your data, and you can use as many or as few of your feeds. Create a new dashboard and take a look at the options available:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/adafruit-io/adafruit-io-how-to-13.jpg" title="&#34;Adafruit IO How To&#34;" alt="&#34;Adafruit IO How To&#34;"></p>

<ul>
<li>Edit your dashboard blocks and layout</li>
<li>Create a new block</li>
<li>View your secret AIO key</li>
<li>Delete Dashboard</li>
<li>Set privacy</li>
</ul>


<p>When you create a new block, you&#8217;re greeted with a list of options:</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/adafruit-io/adafruit-io-how-to-14.jpg" title="&#34;Adafruit IO How To&#34;" alt="&#34;Adafruit IO How To&#34;"></p>

<p>Once you choose one (for instance I chose the gauge) you can modify some of the options, and select the feed.</p>

<p><img class="center" src="https://www.jeremymorgan.com/images/adafruit-io/adafruit-io-how-to-15.jpg" title="&#34;Adafruit IO How To&#34;" alt="&#34;Adafruit IO How To&#34;"></p>

<p>It&#8217;s that easy to set up. You create a set of blocks, and put together your dashboard.</p>

<p><a href="https://io.adafruit.com/JeremyMorgan/garage-weather">Take a look at my Garage Dashboard</a></p>

<p><img class="center" src="https://www.jeremymorgan.com/images/adafruit-io/adafruit-io-how-to-16.jpg" title="&#34;Adafruit IO How To&#34;" alt="&#34;Adafruit IO How To&#34;"></p>

<h2>Conclusion: My Impressions</h2>

<p>One key thing to keep in mind if you&#8217;ll be using this service: it&#8217;s still in beta. It&#8217;s not yet ready for production use. That being said it does appear to be functioning quite well. I had a few issues sizing up boxes and rendering the dashboard in Chrome under Arch Linux, but opened it up in Firefox and it was fine. These were the only minor problems I ran into. I got set up pretty fast and it looks great, so I&#8217;d recommend checking it out.</p>

<p>The good points:</p>

<ul>
<li>Several options to interface data</li>
<li>REST API well structured and useful</li>
<li>Great documentation</li>
<li>Easy to use and set up</li>
<li>Visually appealing</li>
</ul>


<p>So if you&#8217;d like a cool dashboard to augment your project or want to share some data go check it out. It&#8217;s well worth a couple hours of playing.</p>

<br />


<br />


<br />


<div>
<h4>My New Course: Hands on Internet of Things with the Raspberry Pi </h4>
<a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=DOTCOMFANS"><img src="https://www.jeremymorgan.com/images/banners/internet-of-things.jpg" alt="Internet of Things" /></a>
<br /><br />
<p>I have just released my new course titled &#8221;<a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=DOTCOMFANS">Hands on Internet of Things</a>&#8221; which is intended to be a course for people who want to get started with IoT. I&#8217;ll take you through blinking lights and reading sensors to creating YOUR own IoT endpoint and dashboard. I&#8217;m offering this special coupon for readers of my site: <a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=DOTCOMFANS">get %50 off this course here</a>. Thanks for being a reader! </p>
</div>


<br />


<p><a href="http://eepurl.com/bMxQr5">Like my IoT projects? Sign up here to be added to my IoT newsletter</a><br /></p>

<br />


<br />


<p><a href="https://eepurl.com/bMxQr5"><img src="https://www.jeremymorgan.com/images/banners/raspberry-pi-newsletter-650.jpg" alt="Raspberry Pi Newsletter" /></a></p>

<br />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to add WiFi to your Arduino]]></title>
    <link href="https://www.jeremymorgan.com/internet-of-things/arduino-projects/how-to-wifi-arduino/"/>
    <updated>2015-12-19T01:05:24+00:00</updated>
    <id>https://www.jeremymorgan.com/internet-of-things/arduino-projects/adding-wifi-to-arduino-with-the-cc3000</id>
    <content type="html"><![CDATA[<br />


<p><a href="https://eepurl.com/bMxQr5"><img src="https://www.jeremymorgan.com/images/banners/raspberry-pi-newsletter-650.jpg" alt="Raspberry Pi Newsletter" /></a></p>

<br />


<p>If you want to add internet connectivity to an Arduino, you have quite a few options. Since most Arduino models are not bundled with Ethernet or WiFi a market has developed for it, and I decided to try one out and share my thoughts.</p>

<p>For this article I&#8217;ll be using the Adafruit CC3000 <a href="https://www.adafruit.com/products/1469">breakout board found here</a>. For the platform I&#8217;m using an Arduino Mega 2560 I received from <a href="http://www.newark.com" target="_blank">Newark element14</a>.</p>

<!-- more -->


<h3>Assembling the CC3000</h3>

<p>The CC3000 comes shipped with the board and pins like so:</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-wifi-how-to/arduino-wifi-how-to-1.jpg" alt="Arduino WiFi How To" /></p>

<p>This kit does require soldering, but not a lot. One tip, is to break off the 9 pins as instructed and put them in the a breadboard and place the PCB on top:</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-wifi-how-to/arduino-wifi-how-to-2.jpg" alt="Arduino WiFi How To" /></p>

<p>This will hold it in place while soldering, when done it should look like this:</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-wifi-how-to/arduino-wifi-how-to-3.jpg" alt="Arduino WiFi How To" /></p>

<p>Only I hope your soldering looks better.</p>

<p>Now, put it on the breadboard and wire it up! The <a href="https://learn.adafruit.com/adafruit-cc3000-wifi/cc3000-breakout">wiring instructions are here</a>  and in this case it&#8217;s wired up for an Arduino Mega.</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-wifi-how-to/arduino-wifi-how-to-4.jpg" alt="Arduino WiFi How To" /></p>

<p>Notice I have an additional power supply coming in. A note from Adafruit:</p>

<blockquote><p>Make sure your Arduino is powered by a 1 amp or higher rated external power supply when using with the CC3000! Powering an Arduino + CC3000 from a computer/laptop USB port will lead to unstable behavior and lockups because the USB port can&#8217;t supply enough power!</p></blockquote>

<p>This is good advice, and if you don&#8217;t have a power supply yet, pick one up. You&#8217;ll need it when you start adding things to your Arduino.</p>

<h2>Software</h2>

<p>Now, we&#8217;re going to work on the software part of the project using Arduino Sketch. I&#8217;m doing it in Linux, but the instructions will be the same for Windows and OSX as well.</p>

<p>You&#8217;ll want to make sure and get the <a href="https://github.com/adafruit/Adafruit_CC3000_Library/archive/master.zip">latest Adafruit CC3000 library here</a> for the next steps.</p>

<p>Unzip this file into a folder, we&#8217;ll be working with some of the demos included. Do not delete the Zip file.</p>

<p>Open up sketch and browse to the folder you just created:</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-wifi-how-to/arduino-wifi-how-to-5.jpg" alt="Arduino WiFi How To" /></p>

<h3>Run the Build Test</h3>

<p>We want to run the build test to make sure the device is working correctly. Open up buildtest.ino. You&#8217;ll need to change the following to connect to your WiFi network:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define WLAN_SSID       "myNetwork" 
</span><span class='line'>#define WLAN_PASS       "myPassword"</span></code></pre></td></tr></table></div></figure>


<p>Note if you want to change the security setting for your WAP with the &#8220;WLAN_SECURITY&#8221; Variable.</p>

<p>Save the sketch. Now you&#8217;ll want to import the Adafruit CC3000 library into your sketch. This is generally the fastest way to do it:</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-wifi-how-to/arduino-wifi-how-to-6.jpg" alt="Arduino WiFi How To" /></p>

<p>Browse to where you downloaded the zip archive and import it.</p>

<p>Now, try compiling the sketch. You should see this:</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-wifi-how-to/arduino-wifi-how-to-7.jpg" alt="Arduino WiFi How To" /></p>

<p>It is now ready to send to the Arduino. Next I&#8217;ll show you how to communicate with the Arduino to watch what&#8217;s happening.</p>

<h3>Monitor the Serial Port</h3>

<p>You can compile a sketch and push it to the Arduino and (hopefully) things will happen. The serial monitor is a good way to visually see what&#8217;s happening and get feedback from the device. In the Sketch IDE go to Tools -> Serial Monitor.</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-wifi-how-to/arduino-wifi-how-to-8.jpg" alt="Arduino WiFi How To" /></p>

<blockquote><p>Note: If you&#8217;re using Linux, you may need to add your user account to a group to access this port. Instructions <a href="http://playground.arduino.cc/Linux/All#Permission">can be found here</a> for how to do that.</p></blockquote>

<p>Make sure and set the proper baud rate for the CC3000, which is 115200:</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-wifi-how-to/arduino-wifi-how-to-9.jpg" alt="Arduino WiFi How To" /></p>

<p>If your WiFi info is correct, you should see:</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-wifi-how-to/arduino-wifi-how-to-10.jpg" alt="Arduino WiFi How To" /></p>

<p>and after it connects it will attempt to ping adafruit. If successful it will look like this:</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-wifi-how-to/arduino-wifi-how-to-11.jpg" alt="Arduino WiFi How To" /></p>

<p>I&#8217;m not sure why but on mine it says it failed to get an IP, then displays it and pings the site. I&#8217;ll be looking into that further soon. If all tests pass you&#8217;re ready to go.</p>

<h3>Build a Web Server</h3>

<p>For this project, go back into the examples folder and go into the HTTPServer folder.</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-wifi-how-to/arduino-wifi-how-to-12.jpg" alt="Arduino WiFi How To" /></p>

<p>Open up HTTPServer.ino in sketch. Like the previous file, you will need to change the WiFi settings:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define WLAN_SSID       "myNetwork" 
</span><span class='line'>#define WLAN_PASS       "myPassword"</span></code></pre></td></tr></table></div></figure>


<p>Note if you want to change the security setting for your WAP with the &#8220;WLAN_SECURITY&#8221; Variable.</p>

<p>Verify and upload the sketch.</p>

<p>Open the Serial Monitor again to watch the output of the sketch.  If successful, you should see something like this:</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-wifi-how-to/arduino-wifi-how-to-13.jpg" alt="Arduino WiFi How To" /></p>

<p>Your server is now listening and ready to go!</p>

<p>Open a web browser and browse to the IP address:</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-wifi-how-to/arduino-wifi-how-to-14.jpg" alt="Arduino WiFi How To" /></p>

<p>And easy as that you have a web server up. It&#8217;s pretty barebones but a good starting point.</p>

<h2>Conclusion</h2>

<p>I&#8217;ve been doing a considerable amount of hacking on the Arduino and the lack of network connectivity hasn&#8217;t been that big of a deal. However I know for future projects it will be necessary which is why I decided to purchase this kit and give it a try, and share my results with you.</p>

<p>Overall it was really easy to assemble, only having to solder the pins in. The wiring diagrams are clearly laid out on the Adafruit site, and the software is pretty much written for you. At $34.95 this is an awesome deal for hobbyists wanting an easy way to go Wifi. I opted for the breakout option to see how well it works in case I want to build a product that uses this form factor. I would be curious to see how the shield version stacks up, but I suspect it will be identical.</p>

<p>If you&#8217;re looking for a quick, easy way to add WiFi to your Arduino, I recommend the CC3000.</p>

<p>Thanks again to <a href="http://www.newark.com" target="_blank">Newark element14</a> for the Arduino Mega!</p>

<br />


<br />


<br />


<div>
<h4>My New Course: Hands on Internet of Things with the Raspberry Pi </h4>
<a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=DOTCOMFANS"><img src="https://www.jeremymorgan.com/images/banners/internet-of-things.jpg" alt="Internet of Things" /></a>
<br /><br />
<p>I have just released my new course titled &#8221;<a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=DOTCOMFANS">Hands on Internet of Things</a>&#8221; which is intended to be a course for people who want to get started with IoT. I&#8217;ll take you through blinking lights and reading sensors to creating YOUR own IoT endpoint and dashboard. I&#8217;m offering this special coupon for readers of my site: <a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=DOTCOMFANS">get %50 off this course here</a>. Thanks for being a reader! </p>
</div>


<br />


<p><a href="http://eepurl.com/bMxQr5">Like my IoT projects? Sign up here to be added to my IoT newsletter</a><br /></p>

<br />


<br />


<p><a href="https://eepurl.com/bMxQr5"><img src="https://www.jeremymorgan.com/images/banners/raspberry-pi-newsletter-650.jpg" alt="Raspberry Pi Newsletter" /></a></p>

<br />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Arduino LCD Shield Kit]]></title>
    <link href="https://www.jeremymorgan.com/internet-of-things/arduino-projects/arduino-lcd-shield-kit/"/>
    <updated>2015-11-14T14:27:00+00:00</updated>
    <id>https://www.jeremymorgan.com/internet-of-things/arduino-projects/the-arduino-led-shield-kit</id>
    <content type="html"><![CDATA[<br />


<p><a href="https://eepurl.com/bMxQr5"><img src="https://www.jeremymorgan.com/images/banners/raspberry-pi-newsletter-650.jpg" alt="Raspberry Pi Newsletter" /></a></p>

<br />


<p>I recently picked up an <a href="https://www.adafruit.com/products/772">Arduino LCD shield kit</a> from Adafruit. I&#8217;ve wanted to play around with some LCD screens and since this was a self contained kit for $20, I thought I&#8217;d try it out. Here&#8217;s my thoughts on it.</p>

<!-- more -->


<p>For this article I&#8217;m using an Arduino Mega 2560, obtained from <a href="http://www.newark.com/">Newark Element 14</a></p>

<h3>The Arduino LCD Shield Kit</h3>

<p>The kit comes with the following items:</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-lcd/arduino-projects-01.jpg" title="Arduino projects - LCD Shield Kit" alt="Arduino Projects - LCD Shield Kit" /></p>

<p>In the kit we have:</p>

<ul>
<li>5 Resistors</li>
<li>Potentiometer</li>
<li>Printed Circuit Board</li>
<li>Header Pins</li>
<li>Pushbuttons</li>
<li>i2c Port Expander Chip</li>
</ul>


<p>It&#8217;s definitely a &#8220;turnkey&#8221; kit that comes with everything you need. The <a href="https://learn.adafruit.com/rgb-lcd-shield">full assembly instructions </a>show you how to build it, step by step.</p>

<h3>Bust Out Your Soldering Iron!</h3>

<p><img src="https://www.jeremymorgan.com/images/arduino-lcd/arduino-projects-02.jpg" title="Arduino projects - LCD Shield Kit" alt="Arduino Projects - LCD Shield Kit" /></p>

<p>For this kit you will need to do a considerable amount of soldering. Some folks aren&#8217;t a fan of this idea, but I love it. This is great for beginners so they can learn soldering techniques and get better at it. Even though this is a complete kit that could be easily shipped soldered and assembled, I think that would be cheating beginners out of the experience of assembly. Not to mention it frees you up to use only the parts you need, or even use them in something else.</p>

<p>You&#8217;re a hacker now, embrace it!</p>

<h3>Assembling the Shield</h3>

<p>For the first step you&#8217;ll want to solder on the resistors out of the kit in the following configuration:</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-lcd/arduino-projects-03.jpg" title="Arduino projects - LCD Shield Kit" alt="Arduino Projects - LCD Shield Kit" /></p>

<p>An easy way to do this is pull the resistors down through the holes and cross the wires like so. Then once they are all through, solder each piece and trim off the ends.</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-lcd/arduino-projects-04.jpg" title="Arduino projects - LCD Shield Kit" alt="Arduino Projects - LCD Shield Kit" />
Next, add the buttons. You&#8217;ll have to be careful with these pins as they are very close together.</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-lcd/arduino-projects-05.jpg" title="Arduino projects - LCD Shield Kit" alt="Arduino Projects - LCD Shield Kit" /></p>

<p>Now, install the IC with the notch matching, as shown in the diagram:</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-lcd/arduino-projects-06.jpg" title="Arduino projects - LCD Shield Kit" alt="Arduino Projects - LCD Shield Kit" /></p>

<p>Then break apart the header pins and insert them as shown:</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-lcd/arduino-projects-07.jpg" title="Arduino projects - LCD Shield Kit" alt="Arduino Projects - LCD Shield Kit" /></p>

<p>You can now place the board on the Arduino so the pins match up.</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-lcd/arduino-projects-08.jpg" title="Arduino projects - LCD Shield Kit" alt="Arduino Projects - LCD Shield Kit" /></p>

<p>Now you can solder the pins in. This gives you an interface to your Arduino, but mostly it&#8217;s just to keep the sheild stable. At this point you could add risers to the header pins for stacking other devices if you want.</p>

<p>Finally, you then solder on the LCD screen:</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-lcd/arduino-projects-09.jpg" title="Arduino projects - LCD Shield Kit" alt="Arduino Projects - LCD Shield Kit" /></p>

<p>And you&#8217;re done!</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-lcd/arduino-projects-10.jpg" title="Arduino projects - LCD Shield Kit" alt="Arduino Projects - LCD Shield Kit" /></p>

<p>Next we&#8217;ll cover how to put some text on the screen.</p>

<h3>Displaying Text</h3>

<p>The easiest way to interact with this shield is to use Adafruit&#8217;s <a href="https://github.com/adafruit/Adafruit-RGB-LCD-Shield-Library/archive/master.zip">RGB LCD Shield Library</a>. Download that and install it into sketch. (<a href="https://www.arduino.cc/en/Guide/Libraries">How to install additional Arduino libraries</a>)</p>

<p>To output the message shown above, create a file with the following code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;Wire.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Adafruit_MCP23017.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Adafruit_RGBLCDShield.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Adafruit_RGBLCDShield</span> <span class="n">lcd</span> <span class="o">=</span> <span class="n">Adafruit_RGBLCDShield</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Debugging output</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// set up the LCD&#39;s number of columns and rows: </span>
</span><span class='line'>  <span class="n">lcd</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// print in first row</span>
</span><span class='line'>  <span class="n">lcd</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;Be sure to drink&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// set cursor to second row (row 1)</span>
</span><span class='line'>  <span class="n">lcd</span><span class="p">.</span><span class="n">setCursor</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// print in second row</span>
</span><span class='line'>  <span class="n">lcd</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;your Ovaltine&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// set backlight to white </span>
</span><span class='line'>  <span class="n">lcd</span><span class="p">.</span><span class="n">setBacklight</span><span class="p">(</span><span class="mh">0x7</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// do nothing for now</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="https://github.com/IoT-Projects/Arduino-LCD-Shield">Get this code on Github</a>)</p>

<p>Pretty easy right? I hope the comments explain what&#8217;s going on. But we have some other buttons on there we want to work with. We&#8217;ll put the following in the loop:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">uint8_t</span> <span class="n">buttons</span> <span class="o">=</span> <span class="n">lcd</span><span class="p">.</span><span class="n">readButtons</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">buttons</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">lcd</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="n">lcd</span><span class="p">.</span><span class="n">setCursor</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">buttons</span> <span class="o">&amp;</span> <span class="n">BUTTON_UP</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">lcd</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;pressed UP&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">buttons</span> <span class="o">&amp;</span> <span class="n">BUTTON_DOWN</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">lcd</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;pressed DOWN&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">buttons</span> <span class="o">&amp;</span> <span class="n">BUTTON_LEFT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">lcd</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;pressed LEFT&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">buttons</span> <span class="o">&amp;</span> <span class="n">BUTTON_RIGHT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">lcd</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;pressed RIGHT&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">buttons</span> <span class="o">&amp;</span> <span class="n">BUTTON_SELECT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">lcd</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;pressed SELECT&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="https://github.com/IoT-Projects/Arduino-LCD-Shield">Get this code on Github</a>)</p>

<p>This code should be really straightforward. You can check to see if a button is pressed in the loop, and create code based on it. So let&#8217;s do something with that.</p>

<h3>Turn an LED On and Off with Indicator</h3>

<p>Here&#8217;s something to try, hook up an LED to a digital pin. I am using the Arduino Mega, and just put it in the board like this:</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-lcd/arduino-projects-11.jpg" title="Arduino projects - LCD Shield Kit" alt="Arduino Projects - LCD Shield Kit" /></p>

<p>Now, create a file with the following code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;Wire.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Adafruit_MCP23017.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Adafruit_RGBLCDShield.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Adafruit_RGBLCDShield</span> <span class="n">lcd</span> <span class="o">=</span> <span class="n">Adafruit_RGBLCDShield</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
</span><span class='line'>  <span class="n">lcd</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">lcd</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;LED MODE:&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">lcd</span><span class="p">.</span><span class="n">setCursor</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// off by default</span>
</span><span class='line'>  <span class="n">lcd</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;OFF&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">lcd</span><span class="p">.</span><span class="n">setBacklight</span><span class="p">(</span><span class="mh">0x7</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="mi">53</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">uint8_t</span> <span class="n">buttons</span> <span class="o">=</span> <span class="n">lcd</span><span class="p">.</span><span class="n">readButtons</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">lcd</span><span class="p">.</span><span class="n">setCursor</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">lcd</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;LED MODE:&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">buttons</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">lcd</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">buttons</span> <span class="o">&amp;</span> <span class="n">BUTTON_UP</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// turn led on</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="mi">53</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// display it</span>
</span><span class='line'>      <span class="n">lcd</span><span class="p">.</span><span class="n">setCursor</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="n">lcd</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;ON&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">buttons</span> <span class="o">&amp;</span> <span class="n">BUTTON_DOWN</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// turn led off</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="mi">53</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// display it</span>
</span><span class='line'>      <span class="n">lcd</span><span class="p">.</span><span class="n">setCursor</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="n">lcd</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;OFF&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="https://github.com/IoT-Projects/Arduino-LCD-Shield">Get this code on Github</a>)</p>

<p>This is pretty straightforward stuff, not that we set &#8220;pinMode&#8221; to 53,OUTPUT. This is how we set up the pin to light up the LED with the digitalWrite function. By setting pin 53 to HIGH it powers it, and setting it to LOW stops it. The LCD screen then prints the status.</p>

<p><img src="https://www.jeremymorgan.com/images/arduino-lcd/arduino-projects-12.jpg" title="Arduino projects - LCD Shield Kit" alt="Arduino Projects - LCD Shield Kit" />
<img src="https://www.jeremymorgan.com/images/arduino-lcd/arduino-projects-13.jpg" title="Arduino projects - LCD Shield Kit" alt="Arduino Projects - LCD Shield Kit" /></p>

<p>The possibilities are endless here!</p>

<br />


<p><a href="https://eepurl.com/bMxQr5"><img src="https://www.jeremymorgan.com/images/banners/raspberry-pi-newsletter-650.jpg" alt="Raspberry Pi Newsletter" /></a></p>

<br />


<h3>Summary</h3>

<p>Overall I think this product is a fantastic value. I&#8217;ve just barely scratched the surface of what can be done here, and it&#8217;s only $19.95. It could be a very valuable display for your projects. It&#8217;s easy to assemble and works great. So pick up an Arduino (I really like the <a href="http://www.newark.com/arduino/a000067/dev-brd-atmega2560-arduino-mega/dp/45W6205">Mega 2650</a>) and an LCD shield and start tinkering! Contact me with any cool projects you create!</p>

<br />


<br />


<br />


<div>
<h4>My New Course: Hands on Internet of Things with the Raspberry Pi </h4>
<a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=DOTCOMFANS"><img src="https://www.jeremymorgan.com/images/banners/internet-of-things.jpg" alt="Internet of Things" /></a>
<br /><br />
<p>I have just released my new course titled &#8221;<a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=DOTCOMFANS">Hands on Internet of Things</a>&#8221; which is intended to be a course for people who want to get started with IoT. I&#8217;ll take you through blinking lights and reading sensors to creating YOUR own IoT endpoint and dashboard. I&#8217;m offering this special coupon for readers of my site: <a href="https://www.udemy.com/hands-on-internet-of-things-raspberry-pi/?couponCode=DOTCOMFANS">get %50 off this course here</a>. Thanks for being a reader! </p>
</div>


<br />


<p><a href="http://eepurl.com/bMxQr5">Like my IoT projects? Sign up here to be added to my IoT newsletter</a><br /></p>

<br />

]]></content>
  </entry>
  
</feed>
