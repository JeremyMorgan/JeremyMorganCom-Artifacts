<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">

  <title><![CDATA[Blog Category:  DotNet | Jeremy's Programming Blog]]></title>
  <link href="https://www.jeremymorgan.com/blog/dotnet/atom.xml" rel="self"/>
  <link href="https://www.jeremymorgan.com/"/>
  <updated>2019-02-27T04:15:33+00:00</updated>
  <id>https://www.jeremymorgan.com/</id>
  <author>
    <name><![CDATA[Jeremy Morgan]]></name>
    
  </author>
  <generator uri="https://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Load Testing Your IIS Web Server]]></title>
    <link href="https://www.jeremymorgan.com/tutorials/IIS/how-to-load-test-iis-web-server/"/>
    <updated>2017-07-01T02:27:00+00:00</updated>
    <id>https://www.jeremymorgan.com/tutorials/IIS/load-testing-your-iis-web-server</id>
    <content type="html"><![CDATA[<p>All the theory, calculations, and estimations in the world aren't going to tell you how your website will truly perform under a load. If you're deploying a new server, or doing any kind of performance enhancements you don't want to test your results in production. It's always a good idea to see how your system behaves before your visitors do. To do that, you can use a load testing tool, and here are a few I use quite frequently.</p>

<p><strong>Update:</strong> I've featured these tools is my latest IIS course on Pluralsight, <a href="http://pluralsight.pxf.io/c/1221983/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fiis-administration-in-depth" target="_blank">IIS Administration in Depth</a>, check it out!</p>

<!-- more -->


<p></p>

<h3>Netling</h3>

<p><img src="/images/load-testing-iis-web-server/load-test-iis-web-server-01.jpg" alt="Load Testing IIS Web Server" /></p>

<p><strong><a href="https://github.com/hallatore/Netling">Download Netling Here </a></strong></p>

<p>One of the "quick and dirty" applications I use is Netling. This is a super simple tester written in C#. You will need to compile this with Visual Studio, but you don't necessarily have to be a developer to do it. I've been able to load it up, and select build to create it with no modifications with many versions of Visual Studio.</p>

<p>Netling is super simple to operate and about as easy as it gets.</p>

<p>You select how many threads you want to run. This is entirely up to you, more threads will put more load on your machine, and depending on how many cores your CPU has, more may not necessarily be better. Experiment with it and see what works best for you.</p>

<p>It has a feature for "Pipelining". This is when multiple requests go through a single socket without waiting for a response. Setting this higher will generate a higher load but again this something to adjust for best results.  There will be a physical limit to pipelining depending on your hardware and connection speed.</p>

<p>This is a handy tool and is extremely simple to use. One issue I've had with Netling is it sends raw requests that aren't much like a real browser. To emulate real traffic more accurately I have another tool I like to use.</p>

<h3>Netling Pros</h3>

<ul>
<li>Free</li>
<li>Open Source, can be easily modified</li>
<li>Extremely Simple</li>
</ul>


<h3>Netling Cons</h3>

<ul>
<li>Doesn't simulate real transactions well</li>
<li>Can't do authentication or other simulations</li>
<li>Only tests one URL at a time</li>
</ul>


<h3>Web Surge</h3>

<p><img src="/images/load-testing-iis-web-server/load-test-iis-web-server-02.jpg" alt="Load Testing IIS Web Server" /></p>

<p><strong><a href="https://websurge.west-wind.com/">Download Web Surge Here</a></strong></p>

<p>Web surge is by far one of my favorites. It's a great application that simulates a load on your server in a very realistic fashion.</p>

<p>With this program you create sessions, which means you can use more than one URL for the test. Each of the URLs will be run in the session, which can make it more random and realistic. It has a ton of great options as well:</p>

<p><img src="/images/load-testing-iis-web-server/load-test-iis-web-server-03.jpg" alt="Load Testing IIS Web Server" /></p>

<p>It gives you quick results, and you can "drill down" to get more detailed data.</p>

<p><img src="/images/load-testing-iis-web-server/load-test-iis-web-server-04.jpg" alt="Load Testing IIS Web Server" /></p>

<p>You can also export these results in several formats. There's the Websurge proprietary format, as well as XML or JSON. You could parse these results for future analysis work.</p>

<p>Overall Websurge is among my favorites for load testing because it's closer to real world traffic. If you put in a list of all your pages and randomize the test, it can provide some solid information.</p>

<h3>Web Surge Pros</h3>

<ul>
<li>Free (for personal use)</li>
<li>Professional Version reasonably priced</li>
<li>Fast and generates a large load</li>
<li>Simple to use, yet powerful</li>
<li>Simulates "real world" traffic very well</li>
<li>Extremely configurable</li>
</ul>


<h3>Web Surge Cons</h3>

<ul>
<li>None than I can think of</li>
</ul>


<h2>Apache JMeter</h2>

<p><img src="/images/load-testing-iis-web-server/load-test-iis-web-server-05.jpg" alt="Load Testing IIS Web Server" /></p>

<p><strong><a href="https://jmeter.apache.org/">Download JMeter Here </a></strong></p>

<p>The Next application we'll look at is Jmeter. This is an extremely powerful program and can do very thorough testing in addition to generating a load. In fact load testing with Jmeter is just a very small part of it's overall functionality.</p>

<p>With JMeter you have scenarios to run out, because it's more of a testing oriented application you can run through a longer set of steps and processes as a part of your test.</p>

<p>I would encourage you to really dig into this application and learn as much as you can about it to get the full benefits of it.</p>

<h3>Apache JMeter Pros</h3>

<ul>
<li>Free</li>
<li>Very Powerful</li>
<li>Detailed tests can be set up</li>
<li>Minimal setup</li>
</ul>


<h3>Apache JMeter Cons</h3>

<ul>
<li>Steeper learning curve</li>
<li>Can be fairly complicated</li>
<li>May be overkill for what you need</li>
</ul>


<h2>Conclusion</h2>

<p>There are many tools out there for load generation, but these are the ones I use the most. I like to set up various different tests to accurately gauge performance of your website and it's reaction to a load.</p>

<p>In fact, the reaction to a heavy load is the most important thing I'm looking for. When doing performance measurements it's difficult to really nail down all the variables and prove a change has increased performance. But sending a heavy load to your server and seeing how it reacts is pretty conclusive.</p>

<p>I cover some performance and stability enhancements in my <strong><a href="http://pluralsight.pxf.io/c/1221983/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fiis-administration-fundamentals">Pluralsight Course - IIS Administration Fundamentals</a></strong>.</p>

<p>I cover load testing in detail in my new course <strong><a href="http://pluralsight.pxf.io/c/1221983/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fiis-administration-in-depth">IIS Administration In Depth</a></strong>.</p>

<p>Check it out if you want to learn more about administering IIS Servers. If you don't have a Pluralsight account yet, you can <a href="http://pluralsight.pxf.io/c/1221983/424552/7490">start a free trial by clicking here</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Install Microsoft SQL Server on Ubuntu Linux in 5 Minutes]]></title>
    <link href="https://www.jeremymorgan.com/tutorials/linux/how-to-install-microsoft-sql-server-ubuntu-linux/"/>
    <updated>2016-12-06T21:13:00+00:00</updated>
    <id>https://www.jeremymorgan.com/tutorials/linux/how-to-install-microsoft-sql-server-on-ubuntu-linux</id>
    <content type="html"><![CDATA[<p>I must admit I was surprised when I learned that Microsoft SQL Server would be availble in Linux. They've been pushing the open source initiative hard, but I didn't expect something this big. Oh yeah, Visual Studio is now available for Mac as well. I just saw a pig flying by.</p>

<p>While MS-SQL is not open source they have made it available to run on open source platforms such as Linux and OSX, which I can imagine took a ton of work. So I decided to take advantage of this new option and try it out. It works great! It took 5 minutes to install. Here's how you can do it too. Note that you will need a server with 3.5 gigs of RAM for this.</p>

<!-- more -->


<p>
The first thing I always do on an Ubuntu machine is update it</p>

<p><code>
sudo apt-get update
sudo apt-get upgrade
</code></p>

<p>Next we need to import the public repository GPG keys</p>

<p><code>
curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
curl https://packages.microsoft.com/config/ubuntu/16.04/mssql-server.list | sudo tee /etc/apt/sources.list.d/mssql-server.list
</code></p>

<p>Next we'll install SQL Server.</p>

<p><code>
sudo apt-get update
sudo apt-get install -y mssql-server
</code></p>

<p><img src="/images/sql-server-linux/how-to-install-sql-server-linux-1.jpg" title="&#34;How to Install SQL Server in Linux&#34;" alt="&#34;How to Install SQL Server in Linux&#34;"></p>

<p>Now we need to run a configuration script to set up the server:</p>

<p>```
sudo /opt/mssql/bin/sqlservr-setup
````
It will ask if you want to start the service and if you'd like to start it on boot.</p>

<p>Here's how you can check if the service is running:</p>

<p><code>
systemctl status mssql-server
</code></p>

<p><img src="/images/sql-server-linux/how-to-install-sql-server-linux-2.jpg" title="&#34;How to Install SQL Server in Linux&#34;" alt="&#34;How to Install SQL Server in Linux&#34;"></p>

<h3>Install the MSSQL Tools for Linux</h3>

<p>To test this out a little, install the MSSQL tools on Ubuntu.</p>

<p>Add in a new repository:</p>

<p>```
curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list</p>

<p>sudo apt-get update
sudo apt-get install mssql-tools
```</p>

<p>Now, Let's try to connect!</p>

<p><code>
sqlcmd -S localhost -U SA -P '&lt;YourPassword&gt;'
</code></p>

<p>You can run this command to view all your databases:</p>

<p><code>
SELECT Name from sys.Databases;
GO
</code></p>

<p><img src="/images/sql-server-linux/how-to-install-sql-server-linux-3.jpg" title="&#34;How to Install SQL Server in Linux&#34;" alt="&#34;How to Install SQL Server in Linux&#34;"></p>

<p>This should look pretty familiar to you if you've worked with SQL in the past.</p>

<p><code>
CREATE DATABASE acmewidgets;
GO
</code></p>

<p>Now we need to select that database:</p>

<p><code>
USE acmewidgets;
GO
</code></p>

<p>As a test. let's create a customer table</p>

<p><code>
CREATE TABLE customer (id INT, firstname NVARCHAR(50), lastname NVARCHAR(50));
GO
</code></p>

<p>Now, let's put some customers in there:</p>

<p><code>
INSERT INTO customer VALUES (1, 'Lloyd', 'Christmas');
INSERT INTO customer VALUES (2, 'Harry', 'Dunn');
INSERT INTO customer VALUES (3, 'Mary', 'Swanson');
GO
</code></p>

<p>Now, let's take a look at those customers:</p>

<p><code>
SELECT * FROM customer
GO
</code></p>

<p><img src="/images/sql-server-linux/how-to-install-sql-server-linux-4.jpg" title="&#34;How to Install SQL Server in Linux&#34;" alt="&#34;How to Install SQL Server in Linux&#34;"></p>

<p>And it's that easy! You can run SQL scripts here, or connect to it from SSMS, a traditional ASP site, or a .Net Core site/app. I'll be doing a lot of ASP.Net core work in the coming months, so be sure to check back here.</p>

<p>To quit from SQL server, type in</p>

<p><code>
QUIT
</code></p>

<p>And you're done!</p>

<p>I'll be messing with this some more in the coming weeks and really putting it to the test, and I'll share my results.</p>

<p>-Jeremy</p>

<p>I also did a YouTube tutorial for this article:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/OqsOdUNsO4g" frameborder="0" allowfullscreen></iframe>




<br />


<br />


<p><br />
<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I'm constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://eepurl.com/b3Y9Wz"><strong>get the hacker newsletter</strong></a> 100% spam free! 
<br /><br />
You can also follow my projects on GitHub:<br />
<iframe src="https://ghbtns.com/github-btn.html?user=JeremyMorgan&type=follow&count=true&size=large" frameborder="0" scrolling="0" width="220px" height="30px"></iframe>
</div>
<br />
<br />
<a href="//pluralsight.pxf.io/c/1221983/431405/7490"><img src="//a.impactradius-go.com/display-ad/7490-431405" border="0" alt="" width="320" height="50"/></a><img height="0" width="0" src="//pluralsight.pxf.io/i/1221983/431405/7490" style="position:absolute;visibility:hidden;" border="0" />
<br />

</p>

<br />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to Application Pools in IIS]]></title>
    <link href="https://www.jeremymorgan.com/blog/iis-devops/what-is-an-application-pool/"/>
    <updated>2016-07-09T02:56:00+00:00</updated>
    <id>https://www.jeremymorgan.com/blog/iis-devops/intro-to-application-pools-in-iis</id>
    <content type="html"><![CDATA[<p>Application Pools in IIS can be somewhat of a mystery. Since they're created for you automatically many times Administrators don't give them a second thought. But understanding application pools is crucial to having a good running IIS server.</p>

<p>I cover this and other IIS Administration topics in my <a href="http://www.pluralsight.com/courses/iis-administration-fundamentals">IIS Administration Fundamentals</a> course at Pluralsight. Check it out!</p>

<!-- more -->


<h3>What Is an Application Pool?</h3>

<p>To understand Application Pools, we must first understand applications, as far as IIS is concerned.</p>

<p>An <strong>application</strong> is a set of files and folders that deliver content. Any website will have a default application assigned to it, even if it's just HTML and images. The diagram below shows the web server / web site / application relationship:</p>

<p><img src="/images/what-is-iis-app-pool/what-is-iis-app-pool-01.jpg" alt="What is an Application Pool" /></p>

<p>An <strong>Application Pool</strong> is a container for your applications. It serves to isolate your application from other applications on the server. Each application in an application pool shares a worker process (w3wp.exe). You can have several applications share the same worker process, or have one for each application.</p>

<p><img src="/images/what-is-iis-app-pool/what-is-iis-app-pool-00.jpg" alt="What is an Application Pool" /></p>

<p>When setting up Application Pools, you have a few options. Let's compare a couple patterns.</p>

<h4>Multiple Applications in Single Pool</h4>

<p><img src="/images/what-is-iis-app-pool/what-is-iis-app-pool-02.jpg" alt="What is an Application Pool" /></p>

<p>With this setup every application shares the same pool/process. Some reasons you may want to do this:</p>

<ul>
<li>Simpler Design</li>
<li>When making changes you only have to do it once.</li>
<li>Caching is improved, code can be shared and cached between applications</li>
</ul>


<p>Some reasons you may not want to:</p>

<ul>
<li>One crash takes down every application</li>
<li>An application with high load will slow the others</li>
<li>All applications share the same security profile</li>
<li>One applications required setting may break another application.</li>
</ul>


<h4>Each application has its own application pool</h4>

<p><img src="/images/what-is-iis-app-pool/what-is-iis-app-pool-03.jpg" alt="What is an Application Pool" /></p>

<p>With this setup each application has it's own unique process.</p>

<p>Some reasons you may want to do this:</p>

<ul>
<li>Isolated operations - if one application fails it doesn't affect the others.</li>
<li>Isolated performance - a higher load application (most likely) will not slow the other applications down.</li>
<li>Security can be configured for each application individually.</li>
</ul>


<p>Some reasons you may not want to do this:</p>

<ul>
<li>Settings cannot be changed globally, must do one by one.</li>
<li>Common code caching advantage not present.</li>
<li>Could create more overhead than a single pool.</li>
</ul>


<p>There is no "magic bullet" for this, it will depend on your website and the needs of your organization. It's definitely something you want to experiment with for best results.</p>

<h3>Application Pool Settings</h3>

<p>There are some important settings to consider with Application Pools. If you choose the basic settings you don't get much:</p>

<p><img src="/images/what-is-iis-app-pool/what-is-iis-app-pool-04.jpg" alt="What is an Application Pool" /></p>

<p>This only allows you to change your CLR version and Managed pipeline mode. But choose advanced settings and you get far more options:</p>

<p><img src="/images/what-is-iis-app-pool/what-is-iis-app-pool-05.jpg" alt="What is an Application Pool" /></p>

<p>Here are some ones I've often seen changed:</p>

<ul>
<li><p><strong>.Net CLR</strong>- Although there isn't a great reason to run a lower version of .Net it does happen. Usually I find myself setting this when the default app pool framework is 2.0.</p></li>
<li><p><strong>Enable 32 Bit applications</strong> - This is a common one for backwards compatibility. For instance the last application I worked on that required this used 32 bit DLLs written in C++, and the application would not function without this setting.</p></li>
<li><p><strong>Managed Pipeline Mode</strong> - This is another one used for backwards compatibility. You may need classic mode for some older ASP applications.</p></li>
<li><p><strong>Queue Length</strong> - this is a throttling setting and it's pretty rough but useful. What we're saying here is we can have 1000 requests in the queue, and above that visitors will get a 503 error.</p></li>
<li><p><strong>Limit</strong> - This is another throttling measure that controls the maximum percentage of CPU time you want this application pool to consume.</p></li>
<li><p><strong>Limit Action</strong> specifies what to do when that limit is hit. You can kill the process, throttle it, or do nothing.</p></li>
<li><p><strong>Limit interval</strong> is for fine tuning throttling. After the limit above is hit, this setting controls how many minutes we can stay in that state until recycling. If it's too long you may have throttling on after it's no longer needed. Too short and of an interval will just keep it throttling.</p></li>
<li><p><strong>Identity</strong> - This is important because this is the user your application pool is impersonating. Most of the time application pool identity is your best choice, but there are times when you will need a specific user to run a process. In that case you can have this app pool run under that user's account and it's given their permissions. Don't do this unless you absolutely need to. It's something I've seen a lot in the field especially in high security applications.</p></li>
</ul>


<p>As I've said before, there is no silver bullet for tuning either. It really depends on your organization and how your website is used. A great tune on one website could be bad for another.</p>

<h3>How to Create an Application Pool</h3>

<p>Creating Application Pools in IIS is easy. You can go into IIS Manager in the <strong>Application Pools</strong> feature pane, right click and create a new one:</p>

<p><img src="/images/what-is-iis-app-pool/what-is-iis-app-pool-06.jpg" alt="What is an Application Pool" /></p>

<p>Or you could create one with PowerShell (my preferred option):</p>

<p>```
$appPoolName = 'jeremyscoolapp'</p>

<p>if(!(Test-Path IIS:\AppPools\$appPoolName))
{</p>

<pre><code>$appPool = New-Item $appPoolName
$appPool | Set-ItemProperty -Name "managedRuntimeVersion" -Value 'v4.0'
</code></pre>

<p>}</p>

<p>Set-ItemProperty iis:\Sites\WebsiteName -Name applicationpool -Value $appPoolName
```</p>

<p>In this script you can see that I define a name for my Application Pool. Then, I test to see if it already exists. If it doesn't I create a new Application pool. Then I use Set-ItemProperty to change my runtime version to 4.0. You can set any of the application pool settings this way.</p>

<p>To see the options you can change type the following at a PowerShell prompt:</p>

<p><code>
Get-Item IIS:\AppPools\DefaultAppPool  | Select-Object *
</code>
Replace DefaultAppPool with the name of your application pool if it's different.</p>

<h3>Conclusion</h3>

<p>I hope this has given you a good introduction to application pools in IIS. Because these are created automatically often times administrators don't give a lot of thought to setting them up. Many websites run just fine with default settings. If you find yourself needing a custom configuration or you have some load issues, you now have a good understand of application pools and where to look to change them.</p>

<p>I cover this and many more IIS topics in my new Pluralsight Course <a href="http://www.pluralsight.com/courses/iis-administration-fundamentals">IIS Administration Fundamentals</a>. Check it out if you're interested in learning more about IIS Administration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy CRUD for your Web API with Dapper]]></title>
    <link href="https://www.jeremymorgan.com/blog/programming/how-to-dapper-web-api/"/>
    <updated>2016-02-13T15:51:00+00:00</updated>
    <id>https://www.jeremymorgan.com/blog/programming/easy-crud-for-your-web-api-with-dapper</id>
    <content type="html"><![CDATA[<p>Full disclosure here: I don't like ORMs. If you're building an enormous enterprise project, you should absolutely use an ORM. If you have data you really care about and a complex, monstrous system using something like Entity Framework can save you a lot of frustration. If you're building a simple application, or some home project it's really unnecessary.</p>

<!-- more -->


<p></p>

<p>Recently I found an ORM that I really like: <a href="https://www.nuget.org/packages/Dapper">Dapper</a>. It's small, simple, and fast. It can be useful on even the smallest of projects. Dapper is a simple object mapper for .Net that extends the IDbConnection interface. It contains helpers that execute queries and map results in a very elegant way. The best part is the performance is close enough to plain old SQL that it's well worth it. It will reduce the amount of code you write as well, by a long shot.</p>

<h2>Dapper Quick Start - Console Application</h2>

<p>Just to show you how easy it is to use, let's do a quick exercise.</p>

<p>Open up Visual Studio, and create a new Console Application</p>

<p><em>File -> New Project -> Templates -> Visual C# -> Windows -> Console Application</em></p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-01.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>Now, let's create a MS-SQL database to connect to. Create a database, and make a note of the dbname, user and password for this.</p>

<p>Let's create a quick table on the database using this code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Creation SQL </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">USE</span> <span class="p">[</span> <span class="p">(</span><span class="n">Your</span> <span class="k">database</span> <span class="n">name</span><span class="p">)</span> <span class="p">]</span>
</span><span class='line'><span class="k">GO</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;</span> <span class="k">Object</span><span class="p">:</span>  <span class="k">Table</span> <span class="p">[</span><span class="n">Customer</span><span class="p">]</span>  <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;/</span><span class="n">strong</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">SET</span> <span class="n">ANSI_NULLS</span> <span class="k">ON</span>
</span><span class='line'><span class="k">GO</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">SET</span> <span class="n">QUOTED_IDENTIFIER</span> <span class="k">ON</span>
</span><span class='line'><span class="k">GO</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">SET</span> <span class="n">ANSI_PADDING</span> <span class="k">ON</span>
</span><span class='line'><span class="k">GO</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">Customer</span><span class="p">](</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">CustomerID</span><span class="p">]</span> <span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="k">IDENTITY</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'><span class="p">[</span><span class="n">CustomerFirstName</span><span class="p">]</span> <span class="p">[</span><span class="nb">varchar</span><span class="p">](</span><span class="mi">50</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'><span class="p">[</span><span class="n">CustomerLastName</span><span class="p">]</span> <span class="p">[</span><span class="nb">varchar</span><span class="p">](</span><span class="mi">50</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'><span class="p">[</span><span class="n">IsActive</span><span class="p">]</span> <span class="p">[</span><span class="nb">bit</span><span class="p">]</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">PK_Customer</span><span class="p">]</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">CLUSTERED</span>
</span><span class='line'><span class="p">(</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">CustomerID</span><span class="p">]</span> <span class="k">ASC</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">)</span><span class="k">WITH</span> <span class="p">(</span><span class="n">PAD_INDEX</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">STATISTICS_NORECOMPUTE</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">IGNORE_DUP_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">ALLOW_ROW_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">ALLOW_PAGE_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
</span><span class='line'><span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">GO</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">SET</span> <span class="n">ANSI_PADDING</span> <span class="k">OFF</span>
</span><span class='line'><span class="k">GO</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now let's add a few records to it:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-02.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>We will grab these later.</p>

<p>Back in Visual Studio, open up your App.config file:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-03.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>and add an SQL connection string:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Add this to App.config </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>   <span class="nt">&lt;connectionStrings&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>  <span class="ni">&amp;lt;</span>add name=&quot;DefaultConnection&quot; providerName=&quot;System.Data.SqlClient&quot;
</span><span class='line'>        connectionString=&quot;Server=server.com;Database=DapperDemo;User Id=userid; Password=mypassword;&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>   <span class="nt">&lt;/connectionStrings&gt;</span> <span class="nt">&lt;br/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Obviously you would want to replace this with your information. Save the file.</p>

<p>Next, create a class called "Customer" that looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Customer.cs </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">class</span> <span class="nc">Customer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">CustomerID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">CustomerFirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">CustomerLastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsActive</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Save this file into your project's namespace.</p>

<p>Install Dapper from your Package Manager Console:</p>

<blockquote><p>Install-Package Dapper</p></blockquote>

<p>Now open up Program.cs and add the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Add to Program.cs </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IDbConnection</span> <span class="n">db</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SqlConnection</span><span class="p">(</span><span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">ConnectionStrings</span><span class="p">[</span><span class="s">&quot;DefaultConnection&quot;</span><span class="p">].</span><span class="n">ConnectionString</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This sets up a connection to your database using the IDbConnection interface.</p>

<p>Add an SQL string:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">string</span> <span class="n">SqlString</span> <span class="o">=</span> <span class="ss">&quot;SELECT TOP 100 [CustomerID],[CustomerFirstName],[CustomerLastName],[IsActive] FROM [Customer]&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Next, we're going to use Dapper to bring our records into an object:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">ourCustomers</span> <span class="p">=</span> <span class="p">(</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;)</span><span class="n">db</span><span class="p">.</span><span class="n">Query</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">SqlString</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What this does is pulls the values from the SQL query into a list of Customer objects. Now, some code to iterate through the results:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">Customer</span> <span class="k">in</span> <span class="n">ourCustomers</span><span class="p">)</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="k">new</span> <span class="kt">string</span><span class="p">(</span><span class="sc">&#39;*&#39;</span><span class="p">,</span> <span class="m">20</span><span class="p">));</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;\nCustomer ID: &quot;</span> <span class="p">+</span> <span class="n">Customer</span><span class="p">.</span><span class="n">CustomerID</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;First Name: &quot;</span> <span class="p">+</span> <span class="n">Customer</span><span class="p">.</span><span class="n">CustomerFirstName</span><span class="p">);</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Last Name: &quot;</span> <span class="p">+</span> <span class="n">Customer</span><span class="p">.</span><span class="n">CustomerLastName</span><span class="p">);</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Is Active? &quot;</span> <span class="p">+</span> <span class="n">Customer</span><span class="p">.</span><span class="n">IsActive</span> <span class="p">+</span> <span class="s">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="k">new</span> <span class="kt">string</span><span class="p">(</span><span class="sc">&#39;*&#39;</span><span class="p">,</span> <span class="m">20</span><span class="p">));</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">();&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, run the application and you'll see this:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-04.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>Yes, it's really that easy! You now have a console application reading from a database with very minimal code! Pretty Amazing stuff, but let's take it further.</p>

<p><a href="https://github.com/JeremyMorgan/Dapper-Demo-ConsoleApp">Download this code on GitHub</a></p>

<h2>Set up a Web API using Dapper</h2>

<p>Ok, here's where we can really let Dapper flex it's muscles. We'll set up an ASP.Net Web Api. First we need to set up a repository</p>

<blockquote><p>Disclaimer: This is not the best design, and I certainly wouldn't use this for a production application, but it does serve as a good demonstration of how to use Dapper.</p></blockquote>

<h3>Setting up Repository</h3>

<p>Create a new project in Visual Studio:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-05.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>We want to create a new ASP.Net Web API project. Select "Empty" then check the "Web API" box like so:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-06.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>Next, right click on the "Models" folder and select "Add -> New Item". We want to add a plain class (Visual C# -> Code -> Class) like we did in the last exercize. Name it "Customer.cs" and save it.</p>

<p>Our class is going to look the same as it did before:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">class</span> <span class="nc">Customer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">CustomerID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">CustomerFirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">CustomerLastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsActive</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will be our model for this application.</p>

<p>Next, create a folder named "DAL" (Data Access Layer) and let's create a repository. Add an interface (add -> New Item -> Visual C# -> Code -> Interface) and call it "ICustomerRepository".</p>

<p>In here we'll add the methods for our interface:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">internal</span> <span class="k">interface</span> <span class="n">ICustomerRespository</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">List</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Customer</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">GetCustomers</span><span class="p">(</span><span class="kt">int</span> <span class="n">amount</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sort</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Customer</span> <span class="nf">GetSingleCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">customerId</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">bool</span> <span class="nf">InsertCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">bool</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">customerId</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">bool</span> <span class="nf">UpdateCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>These will cover our CRUD (Create, Read, Update, Delete) operations, plus a list operation.</p>

<p>Now we'll create a CustomerRepository class that implements this interface: (add -> New Item -> Visual C# -> Code -> Class) and call it CustomerRespository.cs.</p>

<p>This class should implement the interface and it's members, to start out let's make it look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="n">IDbConnection</span> <span class="n">_db</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SqlConnection</span><span class="p">(</span><span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">ConnectionStrings</span><span class="p">[</span><span class="s">&quot;DefaultConnection&quot;</span><span class="p">].</span><span class="n">ConnectionString</span><span class="p">);&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerRespository</span> <span class="p">:</span> <span class="n">ICustomerRespository</span><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">List</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Customer</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">GetCustomers</span><span class="p">(</span><span class="kt">int</span> <span class="n">amount</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sort</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">Customer</span> <span class="nf">GetSingleCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">customerId</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">bool</span> <span class="nf">InsertCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">bool</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">customerId</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">bool</span> <span class="nf">UpdateCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We will now fill out these methods for our repository, following the CRUD pattern.</p>

<h3>CREATE Customer entries with InsertCustomer</h3>

<p>In this method we'll insert a new customer:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">InsertCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">)</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="kt">int</span> <span class="n">rowsAffected</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_db</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="s">@&quot;INSERT Customer([CustomerFirstName],[CustomerLastName],[IsActive]) values (@CustomerFirstName, @CustomerLastName, @IsActive)&quot;</span><span class="p">,</span><span class="k">new</span> <span class="p">{</span> <span class="n">CustomerFirstName</span> <span class="p">=</span> <span class="n">ourCustomer</span><span class="p">.</span><span class="n">CustomerFirstName</span><span class="p">,</span> <span class="n">CustomerLastName</span> <span class="p">=</span> <span class="n">ourCustomer</span><span class="p">.</span><span class="n">CustomerLastName</span><span class="p">,</span> <span class="n">IsActive</span> <span class="p">=</span> <span class="k">true</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">rowsAffected</span> <span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you look closely, we are using a parameterized query here. Then you pass in an object containing those parameters, taken from the object we passed in. This is pretty straightforward.</p>

<h3>READ Customer entries with GetSingleCustomer</h3>

<p>With this method we'll retrieve a single customer by CustomerID:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="n">Customer</span> <span class="n">GetSingleCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">customerId</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_db</span><span class="p">.</span><span class="n">Query</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Customer</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="s">&quot;SELECT[CustomerID],[CustomerFirstName],[CustomerLastName],[IsActive] FROM [Customer] WHERE CustomerID =@CustomerID&quot;</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">CustomerID</span> <span class="p">=</span> <span class="n">customerId</span> <span class="p">}).</span><span class="n">SingleOrDefault</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Simple stuff. Since this is an iDisposable, a using statement should be used here. But for demo purposes this works.</p>

<h3>UPDATE Customer entries with UpdateCustomer</h3>

<p>To update a customer we'll need to pass in a Customer object, and we'll update the record based on what's in that object.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">UpdateCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">)</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="kt">int</span> <span class="n">rowsAffected</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_db</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="s">&quot;UPDATE [Customer] SET [CustomerFirstName] = @CustomerFirstName ,[CustomerLastName] = @CustomerLastName, [IsActive] = @IsActive WHERE CustomerID = &quot;</span> <span class="p">+</span> <span class="n">ourCustomer</span><span class="p">.</span><span class="n">CustomerID</span><span class="p">,</span> <span class="n">ourCustomer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">rowsAffected</span> <span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In this statement we send an update with parameterized queries and map the ourCustomer object to the record to be updated. We'll change the values in this object in our controller previous to this action.</p>

<h3>DELETE Item with DeleteCustomer Method</h3>

<p>In this method we'll send a simple parameterized delete command based on the integer we pass in:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">customerId</span><span class="p">)</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="kt">int</span> <span class="n">rowsAffected</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_db</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="s">@&quot;DELETE FROM [jeremy].[Customer] WHERE CustomerID = @CustomerID&quot;</span><span class="p">,</span><span class="k">new</span><span class="p">{</span> <span class="n">CustomerID</span> <span class="p">=</span> <span class="n">customerId</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">rowsAffected</span> <span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Like similar methods we pass a true/false based on the number of records affected, if it's not zero we'll assume it was successful.</p>

<h3>LIST Items with GetCustomers Method</h3>

<p>In this method we are going to get a list of items. You can select how many items, and how you want to sort them.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">GetCustomers</span><span class="p">(</span><span class="kt">int</span> <span class="n">amount</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sort</span><span class="p">)</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">_db</span><span class="p">.</span><span class="n">Query</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Customer</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="s">&quot;SELECT TOP &quot;</span><span class="p">+</span> <span class="n">amount</span> <span class="p">+</span> <span class="s">&quot; [CustomerID],[CustomerFirstName],[CustomerLastName],[IsActive] FROM [Customer] ORDER BY CustomerID &quot;</span> <span class="p">+</span> <span class="n">sort</span><span class="p">).</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p>Disclaimer (again): If you insist on using this code for a real project, please add exception handling at the very least.</p></blockquote>

<p>Dapper's Query method takes the query results, maps it to the Customer object and adds it to a list. In this one line of code. Good stuff.</p>

<p>Now we have our simple repository set up, so now we need to create a controller and wire things up.</p>

<p>One last thing, like we did with our console application, you will need to open up Web.Config and add your connection string:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lang </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;connectionStrings>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  &lt;add name="DefaultConnection" providerName="System.Data.SqlClient"
</span><span class='line'>        connectionString="Server=server.com;Database=DapperDemo;User Id=userid; Password=mypassword;" /&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>   &lt;/connectionStrings></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We will be using this for our Web API connection.</p>

<h2>Create a Web API Controller</h2>

<p>Now we're going to create a Web API to connect to our data. One thing I would definitely suggest is <a href="https://www.getpostman.com">downloading POSTman</a>. This is a Chrome extension that makes testing and developing REST APIs a breeze.</p>

<p>For the first step, add the repository to your class, by adding the following to it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="n">CustomerRespository</span> <span class="n">_ourCustomerRespository</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CustomerRespository</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will be the instance of our repository to work with. We will need a controller to interact with this repository.</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-07.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>Let's call this "CustomerController".</p>

<p>You'll see a set of methods listed in the code that will interact with our repository.</p>

<ul>
<li>IEnumerable<string> Get() = <strong>LIST</strong></li>
<li>string Get(int id) = <strong>READ</strong></li>
<li>void Post([FromBody]string value) = <strong>CREATE</strong></li>
<li>void Put(int id, [FromBody]string value) = <strong>UPDATE</strong></li>
<li>void Delete(int id) = <strong>DELETE</strong></li>
</ul>


<p>With this controller we can perform all the methods we need to start working with our customers.</p>

<h3>Create Method</h3>

<p>Let's start with creating a record. The first thing we'll want to do is create a "response" to let us know whether the object was created or not. For this exercise we'll just use a true/false value.</p>

<p>Let's now refactor our method to make it behave how we'd like.</p>

<p>To do this, we'll want to start with the Post method on line 25. I'm a huge fan of <a href="http://www.asp.net/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2">attribute routing</a> in Web API, so let's decorate this method a bit. Add the following before the method on the controller:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Route(&quot;Customers&quot;)]</span>
</span><span class='line'><span class="na">[HttpPost]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And then let's refactor the method signature:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">Post</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This way it will return a boolean result based on whether the record was inserted or not.</p>

<p>Inside the method, let's just return the InsertCustomer call:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">return</span> <span class="n">_ourCustomerRespository</span><span class="p">.</span><span class="n">InsertCustomer</span><span class="p">(</span><span class="n">ourCustomer</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will be our method of inserting (sans any form of sanitization or exception handling).</p>

<p>In Postman, create a POST request to your URL that looks like this:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-08.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>Here we are sending a JSON object in a POST that matches our model.</p>

<p>If successful it should look like this:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-09.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>And when you open up SSMS and select all records you should see this:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-10.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>You've just inserted a new record! Here's what the final method looks like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Route(&quot;Customers&quot;)]</span>
</span><span class='line'><span class="na">[HttpPost]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">Post</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">)</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">return</span> <span class="n">_ourCustomerRespository</span><span class="p">.</span><span class="n">InsertCustomer</span><span class="p">(</span><span class="n">ourCustomer</span><span class="p">);</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is about as bare bones as you can get with ASP.Net.</p>

<h3>Read Method</h3>

<p>Now that we've created some records we are going to want to read a record. For this we'll use the get method that takes an id as a parameter. Let's add the routes for that:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Route(&quot;Customers/{id}&quot;)]</span>
</span><span class='line'><span class="na">[HttpGet]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This tells our controller to route any GET request with a parameter to this method, and our parameter name is "id".</p>

<p>Next we'll call our repository using that id:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">return</span> <span class="n">_ourCustomerRespository</span><span class="p">.</span><span class="n">GetSingleCustomer</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, send a GET request with postman, and append a CustomerId to the URL, and you should see this:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-11.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>This is a pretty easy way to grab a single record. Now let's update that record.</p>

<h3>Update Method</h3>

<p>In this method we are going to update an id. We'll do this by sending a JSON object representing the customer record. Whatever is contained in that record is what we'll want to update it to, so if Freda and Lloyd get married, we want to send this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;CustomerID&quot;</span><span class="o">:</span> <span class="s2">&quot;5&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;CustomerFirstName&quot;</span><span class="o">:</span> <span class="s2">&quot;Freda&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;CustomerLastName&quot;</span><span class="o">:</span> <span class="s2">&quot;Christmas&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;IsActive&quot;</span><span class="o">:</span> <span class="s2">&quot;True&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>to our PUT method. Since the last name is now different our repository will update the record with all the information in this object, and change the last name. We are making a PUT request to /Customers and sending the new object.</p>

<p>We start with the decorators to add to the method:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Route(&quot;Customers&quot;)]</span>
</span><span class='line'><span class="na">[HttpPut]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then we'll need to change the signature:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">Put</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This makes it so the method takes in the new object and updates the record accordingly. If it's successful it will return true. Add the following to the method body:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">return</span> <span class="n">_ourCustomerRespository</span><span class="p">.</span><span class="n">UpdateCustomer</span><span class="p">(</span><span class="n">ourCustomer</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now prepare your command in POSTman, it should look like this:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-12.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>And send it. If successful it should return true, and your record should be updated:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-13.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>Congratulations LLoyd and Freda!</p>

<p>The final method in your controller should look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Route(&quot;Customers&quot;)]</span>
</span><span class='line'><span class="na">[HttpPut]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">Put</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span><span class="n">Customer</span> <span class="n">ourCustomer</span><span class="p">)</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">return</span> <span class="n">_ourCustomerRespository</span><span class="p">.</span><span class="n">UpdateCustomer</span><span class="p">(</span><span class="n">ourCustomer</span><span class="p">);</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Delete Method</h3>

<p>In this method we're going to delete a record by it's ID. This will be done by sending a DELETE command to a url with an id as a parameter. The decorators look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Route(&quot;Customers/{id}&quot;)]</span>
</span><span class='line'><span class="na">[HttpDelete]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and we'll change the return type on the method to a boolean:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and add the call to our repository in our method:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">return</span> <span class="n">_ourCustomerRespository</span><span class="p">.</span><span class="n">DeleteCustomer</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And we're ready to go. Let's create the command in POSTman:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-14.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>Send the DELETE to the url of /Customers/2. Sorry Harry, but you gotta go.</p>

<p>Afterwards it should look like this:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-15.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>You've now deleted a record!</p>

<h3>List Method</h3>

<p>Ok for the last one, we want to make a list of every customer in the database. Or maybe a few customers. Remember we put some parameters into the GetCustomers method so we could select an amount of customers and sort them by ID. So for the default Get method let's just grab 10 customers (if available) and sort them ascending:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Route(&quot;Customers&quot;)]</span>
</span><span class='line'><span class="na">[HttpGet]</span>
</span><span class='line'><span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">Get</span><span class="p">()</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">return</span> <span class="n">_ourCustomerRespository</span><span class="p">.</span><span class="n">GetCustomers</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="s">&quot;ASC&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In POSTMan, send a get to the url of /Customers. It should look like this:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-16.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>Pretty easy right? But lets make it so we can choose the number and sort of the output also. Create another method that looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Route(&quot;Customers/{amount}/{sort}&quot;)]</span>
</span><span class='line'><span class="na">[HttpGet]</span>
</span><span class='line'><span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">Get</span><span class="p">(</span><span class="kt">int</span> <span class="n">amount</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sort</span><span class="p">)</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">return</span> <span class="n">_ourCustomerRespository</span><span class="p">.</span><span class="n">GetCustomers</span><span class="p">(</span><span class="n">amount</span><span class="p">,</span> <span class="n">sort</span><span class="p">);</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we're overloading the Get method and sending additional parameters. As we've seen before, we set up a decorator to take the amount and sort from the URL. These are passed into the method and then passed to the repository. If you send a GET to /Customers/3/desc it should look like this:</p>

<p><img src="https://www.jeremymorgan.com/images/dapper-how-to/dapper-how-to-17.jpg" alt="Dapper How To" title="Dapper How To"></p>

<p>Pretty powerful stuff! That concludes the API Methods, of course you can add many more and build complex queries and methods that go beyond this.</p>

<p><a href="https://github.com/JeremyMorgan/Dapper-Demo-Web-API">Download this code on GitHub</a></p>

<p><a href="https://github.com/JeremyMorgan/Dapper-Demo-Web-API/tree/master/Postman">Get the POSTMan collection here</a></p>

<h2>Summary</h2>

<p>Though this was a fairly long tutorial, you can see how much time and code you can save using Dapper. It's only slightly different performance wise from doing raw SQL Connections. <a href="https://github.com/StackExchange/dapper-dot-net#performance">There's a good performance comparison here</a>.</p>

<p>For a long time I would choose to write out SQL by hand for the extra performance and power, especially with small projects. Entity Framework always seemed like overkill for most stuff. But after discovering Dapper it's far easier and faster than writing it out, without the extra overhead of EF. It's a solid win.</p>

<p>I hope this has helped you explore Dapper and inspire you to make something with it. You'll find it's pretty great. If you have any questions or have something to say leave it in the comments or <a href="https://twitter.com/JeremyCMorgan">bug me on Twitter</a>.</p>

<p>-Jeremy</p>

<br />


<br />


<p><br />
<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I'm constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://eepurl.com/b3Y9Wz"><strong>get the hacker newsletter</strong></a> 100% spam free! 
<br /><br />
You can also follow my projects on GitHub:<br />
<iframe src="https://ghbtns.com/github-btn.html?user=JeremyMorgan&type=follow&count=true&size=large" frameborder="0" scrolling="0" width="220px" height="30px"></iframe>
</div>
<br />
<br />
<a href="//pluralsight.pxf.io/c/1221983/431405/7490"><img src="//a.impactradius-go.com/display-ad/7490-431405" border="0" alt="" width="320" height="50"/></a><img height="0" width="0" src="//pluralsight.pxf.io/i/1221983/431405/7490" style="position:absolute;visibility:hidden;" border="0" />
<br />

</p>

<br />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Failed Request Tracing with IIS]]></title>
    <link href="https://www.jeremymorgan.com/blog/iis-devops/failed-request-tracing-iis/"/>
    <updated>2016-01-08T19:42:00+00:00</updated>
    <id>https://www.jeremymorgan.com/blog/iis-devops/failed-request-tracing-with-iis</id>
    <content type="html"><![CDATA[<p>A great tool I've discovered recently is the Failed Request Tracing Tool is IIS. If you're building an ASP.Net application and having issues with requests it's a fantastic tool. I'll show you how to use it.</p>

<!-- more -->


<p>Are you:</p>

<ul>
<li>Getting a 500 error with messages suppressed?</li>
<li>Getting a permission denied and don't know where it's being denied?</li>
<li>Getting an error that doesn't show up in the logs?</li>
</ul>


<p>Each of these are good candidates for using the failed request tracing tool. This captures data right when the server gets hit. These are activities that happen right at the front, even before they can be logged.</p>

<p>In your IIS Manager, select your website. In the Actions panel under Manage Web Site click "Failed Request Tracing.."</p>

<p><img src="/images/failed-request-tracing-IIS/failed-request-tracing-IIS-001.jpg" alt="failed request tracing" /></p>

<p>In the next screen, you'll enable it, and click OK.</p>

<p><img src="/images/failed-request-tracing-IIS/failed-request-tracing-IIS-002.jpg" alt="failed request tracing" /></p>

<p>Next, find the "Failed Request Tracing Rules" icon, and click it:</p>

<p><img src="/images/failed-request-tracing-IIS/failed-request-tracing-IIS-003.jpg" alt="failed request tracing" /></p>

<p>In the next screen, we'll add a rule. Right click in the open area and select "Add"</p>

<p><img src="/images/failed-request-tracing-IIS/failed-request-tracing-IIS-004.jpg" alt="failed request tracing" /></p>

<p>Select the content you'd like to trace (I usually select all):</p>

<p><img src="/images/failed-request-tracing-IIS/failed-request-tracing-IIS-005.jpg" alt="failed request tracing" /></p>

<p>On this screen, type in 400-999 to capture the full range of errors</p>

<p><img src="/images/failed-request-tracing-IIS/failed-request-tracing-IIS-006.jpg" alt="failed request tracing" /></p>

<p>Select your trace providers (I usually select all of them)</p>

<p><img src="/images/failed-request-tracing-IIS/failed-request-tracing-IIS-007.jpg" alt="failed request tracing" /></p>

<p>Then, make a request to your web site (either through browser, ajax, etc)</p>

<p>Next in your inetpub folder under logs, you'll see a new FailedReqLogFiles folder. In there will be generated folders. Select the latest one.</p>

<p><img src="/images/failed-request-tracing-IIS/failed-request-tracing-IIS-008.jpg" alt="failed request tracing" /></p>

<p>In here you'll see a set of xml files for each individual request.</p>

<p><img src="/images/failed-request-tracing-IIS/failed-request-tracing-IIS-009.jpg" alt="failed request tracing" /></p>

<p>Double click to open it up, and you'll see very detailed information. In this case it shows I have a certificate error, that is not explained on the error page or the error log, but I've found it here and can move on.</p>

<p><img src="/images/failed-request-tracing-IIS/failed-request-tracing-IIS-010.jpg" alt="failed request tracing" /></p>

<p>And that's it! Make sure to turn it off once you've solved your problem.</p>

<p>While IIS admins have probably been using this for years, it's a helpful too for developers as well, especially ones who work on implementation as well as development.</p>

<p>Let me know in the comments what you think.</p>

<ul>
<li>Jeremy</li>
</ul>


<br />


<br />


<p><br />
<div class="subscribefooter">
<h4>Do you like articles like this?</h4>
<div class="rssbutton"></div>
I'm constantly hacking on stuff and writing about happenings in the programmer world. You can <a href="http://feeds.feedburner.com/jeremymorgan/NJwt"><strong>subscribe to my feed</strong></a> here, or you can <a href="http://eepurl.com/b3Y9Wz"><strong>get the hacker newsletter</strong></a> 100% spam free! 
<br /><br />
You can also follow my projects on GitHub:<br />
<iframe src="https://ghbtns.com/github-btn.html?user=JeremyMorgan&type=follow&count=true&size=large" frameborder="0" scrolling="0" width="220px" height="30px"></iframe>
</div>
<br />
<br />
<a href="//pluralsight.pxf.io/c/1221983/431405/7490"><img src="//a.impactradius-go.com/display-ad/7490-431405" border="0" alt="" width="320" height="50"/></a><img height="0" width="0" src="//pluralsight.pxf.io/i/1221983/431405/7490" style="position:absolute;visibility:hidden;" border="0" />
<br />

</p>

<br />

]]></content>
  </entry>
  
</feed>
